// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Holds auto-generated Raylib bindings
class DartRaylib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DartRaylib(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DartRaylib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Window-related functions
  void InitWindow(
    int width,
    int height,
    ffi.Pointer<ffi.Int8> title,
  ) {
    return _InitWindow(
      width,
      height,
      title,
    );
  }

  late final _InitWindow_ptr =
      _lookup<ffi.NativeFunction<_c_InitWindow>>('InitWindow');
  late final _dart_InitWindow _InitWindow =
      _InitWindow_ptr.asFunction<_dart_InitWindow>();

  int WindowShouldClose() {
    return _WindowShouldClose();
  }

  late final _WindowShouldClose_ptr =
      _lookup<ffi.NativeFunction<_c_WindowShouldClose>>('WindowShouldClose');
  late final _dart_WindowShouldClose _WindowShouldClose =
      _WindowShouldClose_ptr.asFunction<_dart_WindowShouldClose>();

  void CloseWindow() {
    return _CloseWindow();
  }

  late final _CloseWindow_ptr =
      _lookup<ffi.NativeFunction<_c_CloseWindow>>('CloseWindow');
  late final _dart_CloseWindow _CloseWindow =
      _CloseWindow_ptr.asFunction<_dart_CloseWindow>();

  int IsWindowReady() {
    return _IsWindowReady();
  }

  late final _IsWindowReady_ptr =
      _lookup<ffi.NativeFunction<_c_IsWindowReady>>('IsWindowReady');
  late final _dart_IsWindowReady _IsWindowReady =
      _IsWindowReady_ptr.asFunction<_dart_IsWindowReady>();

  int IsWindowFullscreen() {
    return _IsWindowFullscreen();
  }

  late final _IsWindowFullscreen_ptr =
      _lookup<ffi.NativeFunction<_c_IsWindowFullscreen>>('IsWindowFullscreen');
  late final _dart_IsWindowFullscreen _IsWindowFullscreen =
      _IsWindowFullscreen_ptr.asFunction<_dart_IsWindowFullscreen>();

  int IsWindowHidden() {
    return _IsWindowHidden();
  }

  late final _IsWindowHidden_ptr =
      _lookup<ffi.NativeFunction<_c_IsWindowHidden>>('IsWindowHidden');
  late final _dart_IsWindowHidden _IsWindowHidden =
      _IsWindowHidden_ptr.asFunction<_dart_IsWindowHidden>();

  int IsWindowMinimized() {
    return _IsWindowMinimized();
  }

  late final _IsWindowMinimized_ptr =
      _lookup<ffi.NativeFunction<_c_IsWindowMinimized>>('IsWindowMinimized');
  late final _dart_IsWindowMinimized _IsWindowMinimized =
      _IsWindowMinimized_ptr.asFunction<_dart_IsWindowMinimized>();

  int IsWindowMaximized() {
    return _IsWindowMaximized();
  }

  late final _IsWindowMaximized_ptr =
      _lookup<ffi.NativeFunction<_c_IsWindowMaximized>>('IsWindowMaximized');
  late final _dart_IsWindowMaximized _IsWindowMaximized =
      _IsWindowMaximized_ptr.asFunction<_dart_IsWindowMaximized>();

  int IsWindowFocused() {
    return _IsWindowFocused();
  }

  late final _IsWindowFocused_ptr =
      _lookup<ffi.NativeFunction<_c_IsWindowFocused>>('IsWindowFocused');
  late final _dart_IsWindowFocused _IsWindowFocused =
      _IsWindowFocused_ptr.asFunction<_dart_IsWindowFocused>();

  int IsWindowResized() {
    return _IsWindowResized();
  }

  late final _IsWindowResized_ptr =
      _lookup<ffi.NativeFunction<_c_IsWindowResized>>('IsWindowResized');
  late final _dart_IsWindowResized _IsWindowResized =
      _IsWindowResized_ptr.asFunction<_dart_IsWindowResized>();

  int IsWindowState(
    int flag,
  ) {
    return _IsWindowState(
      flag,
    );
  }

  late final _IsWindowState_ptr =
      _lookup<ffi.NativeFunction<_c_IsWindowState>>('IsWindowState');
  late final _dart_IsWindowState _IsWindowState =
      _IsWindowState_ptr.asFunction<_dart_IsWindowState>();

  void SetWindowState(
    int flags,
  ) {
    return _SetWindowState(
      flags,
    );
  }

  late final _SetWindowState_ptr =
      _lookup<ffi.NativeFunction<_c_SetWindowState>>('SetWindowState');
  late final _dart_SetWindowState _SetWindowState =
      _SetWindowState_ptr.asFunction<_dart_SetWindowState>();

  void ClearWindowState(
    int flags,
  ) {
    return _ClearWindowState(
      flags,
    );
  }

  late final _ClearWindowState_ptr =
      _lookup<ffi.NativeFunction<_c_ClearWindowState>>('ClearWindowState');
  late final _dart_ClearWindowState _ClearWindowState =
      _ClearWindowState_ptr.asFunction<_dart_ClearWindowState>();

  void ToggleFullscreen() {
    return _ToggleFullscreen();
  }

  late final _ToggleFullscreen_ptr =
      _lookup<ffi.NativeFunction<_c_ToggleFullscreen>>('ToggleFullscreen');
  late final _dart_ToggleFullscreen _ToggleFullscreen =
      _ToggleFullscreen_ptr.asFunction<_dart_ToggleFullscreen>();

  void MaximizeWindow() {
    return _MaximizeWindow();
  }

  late final _MaximizeWindow_ptr =
      _lookup<ffi.NativeFunction<_c_MaximizeWindow>>('MaximizeWindow');
  late final _dart_MaximizeWindow _MaximizeWindow =
      _MaximizeWindow_ptr.asFunction<_dart_MaximizeWindow>();

  void MinimizeWindow() {
    return _MinimizeWindow();
  }

  late final _MinimizeWindow_ptr =
      _lookup<ffi.NativeFunction<_c_MinimizeWindow>>('MinimizeWindow');
  late final _dart_MinimizeWindow _MinimizeWindow =
      _MinimizeWindow_ptr.asFunction<_dart_MinimizeWindow>();

  void RestoreWindow() {
    return _RestoreWindow();
  }

  late final _RestoreWindow_ptr =
      _lookup<ffi.NativeFunction<_c_RestoreWindow>>('RestoreWindow');
  late final _dart_RestoreWindow _RestoreWindow =
      _RestoreWindow_ptr.asFunction<_dart_RestoreWindow>();

  void SetWindowIcon(
    Image image,
  ) {
    return _SetWindowIcon(
      image,
    );
  }

  late final _SetWindowIcon_ptr =
      _lookup<ffi.NativeFunction<_c_SetWindowIcon>>('SetWindowIcon');
  late final _dart_SetWindowIcon _SetWindowIcon =
      _SetWindowIcon_ptr.asFunction<_dart_SetWindowIcon>();

  void SetWindowTitle(
    ffi.Pointer<ffi.Int8> title,
  ) {
    return _SetWindowTitle(
      title,
    );
  }

  late final _SetWindowTitle_ptr =
      _lookup<ffi.NativeFunction<_c_SetWindowTitle>>('SetWindowTitle');
  late final _dart_SetWindowTitle _SetWindowTitle =
      _SetWindowTitle_ptr.asFunction<_dart_SetWindowTitle>();

  void SetWindowPosition(
    int x,
    int y,
  ) {
    return _SetWindowPosition(
      x,
      y,
    );
  }

  late final _SetWindowPosition_ptr =
      _lookup<ffi.NativeFunction<_c_SetWindowPosition>>('SetWindowPosition');
  late final _dart_SetWindowPosition _SetWindowPosition =
      _SetWindowPosition_ptr.asFunction<_dart_SetWindowPosition>();

  void SetWindowMonitor(
    int monitor,
  ) {
    return _SetWindowMonitor(
      monitor,
    );
  }

  late final _SetWindowMonitor_ptr =
      _lookup<ffi.NativeFunction<_c_SetWindowMonitor>>('SetWindowMonitor');
  late final _dart_SetWindowMonitor _SetWindowMonitor =
      _SetWindowMonitor_ptr.asFunction<_dart_SetWindowMonitor>();

  void SetWindowMinSize(
    int width,
    int height,
  ) {
    return _SetWindowMinSize(
      width,
      height,
    );
  }

  late final _SetWindowMinSize_ptr =
      _lookup<ffi.NativeFunction<_c_SetWindowMinSize>>('SetWindowMinSize');
  late final _dart_SetWindowMinSize _SetWindowMinSize =
      _SetWindowMinSize_ptr.asFunction<_dart_SetWindowMinSize>();

  void SetWindowSize(
    int width,
    int height,
  ) {
    return _SetWindowSize(
      width,
      height,
    );
  }

  late final _SetWindowSize_ptr =
      _lookup<ffi.NativeFunction<_c_SetWindowSize>>('SetWindowSize');
  late final _dart_SetWindowSize _SetWindowSize =
      _SetWindowSize_ptr.asFunction<_dart_SetWindowSize>();

  ffi.Pointer<ffi.Void> GetWindowHandle() {
    return _GetWindowHandle();
  }

  late final _GetWindowHandle_ptr =
      _lookup<ffi.NativeFunction<_c_GetWindowHandle>>('GetWindowHandle');
  late final _dart_GetWindowHandle _GetWindowHandle =
      _GetWindowHandle_ptr.asFunction<_dart_GetWindowHandle>();

  int GetScreenWidth() {
    return _GetScreenWidth();
  }

  late final _GetScreenWidth_ptr =
      _lookup<ffi.NativeFunction<_c_GetScreenWidth>>('GetScreenWidth');
  late final _dart_GetScreenWidth _GetScreenWidth =
      _GetScreenWidth_ptr.asFunction<_dart_GetScreenWidth>();

  int GetScreenHeight() {
    return _GetScreenHeight();
  }

  late final _GetScreenHeight_ptr =
      _lookup<ffi.NativeFunction<_c_GetScreenHeight>>('GetScreenHeight');
  late final _dart_GetScreenHeight _GetScreenHeight =
      _GetScreenHeight_ptr.asFunction<_dart_GetScreenHeight>();

  int GetMonitorCount() {
    return _GetMonitorCount();
  }

  late final _GetMonitorCount_ptr =
      _lookup<ffi.NativeFunction<_c_GetMonitorCount>>('GetMonitorCount');
  late final _dart_GetMonitorCount _GetMonitorCount =
      _GetMonitorCount_ptr.asFunction<_dart_GetMonitorCount>();

  int GetCurrentMonitor() {
    return _GetCurrentMonitor();
  }

  late final _GetCurrentMonitor_ptr =
      _lookup<ffi.NativeFunction<_c_GetCurrentMonitor>>('GetCurrentMonitor');
  late final _dart_GetCurrentMonitor _GetCurrentMonitor =
      _GetCurrentMonitor_ptr.asFunction<_dart_GetCurrentMonitor>();

  Vector2 GetMonitorPosition(
    int monitor,
  ) {
    return _GetMonitorPosition(
      monitor,
    );
  }

  late final _GetMonitorPosition_ptr =
      _lookup<ffi.NativeFunction<_c_GetMonitorPosition>>('GetMonitorPosition');
  late final _dart_GetMonitorPosition _GetMonitorPosition =
      _GetMonitorPosition_ptr.asFunction<_dart_GetMonitorPosition>();

  int GetMonitorWidth(
    int monitor,
  ) {
    return _GetMonitorWidth(
      monitor,
    );
  }

  late final _GetMonitorWidth_ptr =
      _lookup<ffi.NativeFunction<_c_GetMonitorWidth>>('GetMonitorWidth');
  late final _dart_GetMonitorWidth _GetMonitorWidth =
      _GetMonitorWidth_ptr.asFunction<_dart_GetMonitorWidth>();

  int GetMonitorHeight(
    int monitor,
  ) {
    return _GetMonitorHeight(
      monitor,
    );
  }

  late final _GetMonitorHeight_ptr =
      _lookup<ffi.NativeFunction<_c_GetMonitorHeight>>('GetMonitorHeight');
  late final _dart_GetMonitorHeight _GetMonitorHeight =
      _GetMonitorHeight_ptr.asFunction<_dart_GetMonitorHeight>();

  int GetMonitorPhysicalWidth(
    int monitor,
  ) {
    return _GetMonitorPhysicalWidth(
      monitor,
    );
  }

  late final _GetMonitorPhysicalWidth_ptr =
      _lookup<ffi.NativeFunction<_c_GetMonitorPhysicalWidth>>(
          'GetMonitorPhysicalWidth');
  late final _dart_GetMonitorPhysicalWidth _GetMonitorPhysicalWidth =
      _GetMonitorPhysicalWidth_ptr.asFunction<_dart_GetMonitorPhysicalWidth>();

  int GetMonitorPhysicalHeight(
    int monitor,
  ) {
    return _GetMonitorPhysicalHeight(
      monitor,
    );
  }

  late final _GetMonitorPhysicalHeight_ptr =
      _lookup<ffi.NativeFunction<_c_GetMonitorPhysicalHeight>>(
          'GetMonitorPhysicalHeight');
  late final _dart_GetMonitorPhysicalHeight _GetMonitorPhysicalHeight =
      _GetMonitorPhysicalHeight_ptr.asFunction<
          _dart_GetMonitorPhysicalHeight>();

  int GetMonitorRefreshRate(
    int monitor,
  ) {
    return _GetMonitorRefreshRate(
      monitor,
    );
  }

  late final _GetMonitorRefreshRate_ptr =
      _lookup<ffi.NativeFunction<_c_GetMonitorRefreshRate>>(
          'GetMonitorRefreshRate');
  late final _dart_GetMonitorRefreshRate _GetMonitorRefreshRate =
      _GetMonitorRefreshRate_ptr.asFunction<_dart_GetMonitorRefreshRate>();

  Vector2 GetWindowPosition() {
    return _GetWindowPosition();
  }

  late final _GetWindowPosition_ptr =
      _lookup<ffi.NativeFunction<_c_GetWindowPosition>>('GetWindowPosition');
  late final _dart_GetWindowPosition _GetWindowPosition =
      _GetWindowPosition_ptr.asFunction<_dart_GetWindowPosition>();

  Vector2 GetWindowScaleDPI() {
    return _GetWindowScaleDPI();
  }

  late final _GetWindowScaleDPI_ptr =
      _lookup<ffi.NativeFunction<_c_GetWindowScaleDPI>>('GetWindowScaleDPI');
  late final _dart_GetWindowScaleDPI _GetWindowScaleDPI =
      _GetWindowScaleDPI_ptr.asFunction<_dart_GetWindowScaleDPI>();

  ffi.Pointer<ffi.Int8> GetMonitorName(
    int monitor,
  ) {
    return _GetMonitorName(
      monitor,
    );
  }

  late final _GetMonitorName_ptr =
      _lookup<ffi.NativeFunction<_c_GetMonitorName>>('GetMonitorName');
  late final _dart_GetMonitorName _GetMonitorName =
      _GetMonitorName_ptr.asFunction<_dart_GetMonitorName>();

  void SetClipboardText(
    ffi.Pointer<ffi.Int8> text,
  ) {
    return _SetClipboardText(
      text,
    );
  }

  late final _SetClipboardText_ptr =
      _lookup<ffi.NativeFunction<_c_SetClipboardText>>('SetClipboardText');
  late final _dart_SetClipboardText _SetClipboardText =
      _SetClipboardText_ptr.asFunction<_dart_SetClipboardText>();

  ffi.Pointer<ffi.Int8> GetClipboardText() {
    return _GetClipboardText();
  }

  late final _GetClipboardText_ptr =
      _lookup<ffi.NativeFunction<_c_GetClipboardText>>('GetClipboardText');
  late final _dart_GetClipboardText _GetClipboardText =
      _GetClipboardText_ptr.asFunction<_dart_GetClipboardText>();

  /// Custom frame control functions
  /// NOTE: Those functions are intended for advance users that want full control over the frame processing
  /// By default EndDrawing() does this job: draws everything + SwapScreenBuffer() + manage frame timming + PollInputEvents()
  /// To avoid that behaviour and control frame processes manually, enable in config.h: SUPPORT_CUSTOM_FRAME_CONTROL
  void SwapScreenBuffer() {
    return _SwapScreenBuffer();
  }

  late final _SwapScreenBuffer_ptr =
      _lookup<ffi.NativeFunction<_c_SwapScreenBuffer>>('SwapScreenBuffer');
  late final _dart_SwapScreenBuffer _SwapScreenBuffer =
      _SwapScreenBuffer_ptr.asFunction<_dart_SwapScreenBuffer>();

  void PollInputEvents() {
    return _PollInputEvents();
  }

  late final _PollInputEvents_ptr =
      _lookup<ffi.NativeFunction<_c_PollInputEvents>>('PollInputEvents');
  late final _dart_PollInputEvents _PollInputEvents =
      _PollInputEvents_ptr.asFunction<_dart_PollInputEvents>();

  void WaitTime(
    double ms,
  ) {
    return _WaitTime(
      ms,
    );
  }

  late final _WaitTime_ptr =
      _lookup<ffi.NativeFunction<_c_WaitTime>>('WaitTime');
  late final _dart_WaitTime _WaitTime =
      _WaitTime_ptr.asFunction<_dart_WaitTime>();

  /// Cursor-related functions
  void ShowCursor() {
    return _ShowCursor();
  }

  late final _ShowCursor_ptr =
      _lookup<ffi.NativeFunction<_c_ShowCursor>>('ShowCursor');
  late final _dart_ShowCursor _ShowCursor =
      _ShowCursor_ptr.asFunction<_dart_ShowCursor>();

  void HideCursor() {
    return _HideCursor();
  }

  late final _HideCursor_ptr =
      _lookup<ffi.NativeFunction<_c_HideCursor>>('HideCursor');
  late final _dart_HideCursor _HideCursor =
      _HideCursor_ptr.asFunction<_dart_HideCursor>();

  int IsCursorHidden() {
    return _IsCursorHidden();
  }

  late final _IsCursorHidden_ptr =
      _lookup<ffi.NativeFunction<_c_IsCursorHidden>>('IsCursorHidden');
  late final _dart_IsCursorHidden _IsCursorHidden =
      _IsCursorHidden_ptr.asFunction<_dart_IsCursorHidden>();

  void EnableCursor() {
    return _EnableCursor();
  }

  late final _EnableCursor_ptr =
      _lookup<ffi.NativeFunction<_c_EnableCursor>>('EnableCursor');
  late final _dart_EnableCursor _EnableCursor =
      _EnableCursor_ptr.asFunction<_dart_EnableCursor>();

  void DisableCursor() {
    return _DisableCursor();
  }

  late final _DisableCursor_ptr =
      _lookup<ffi.NativeFunction<_c_DisableCursor>>('DisableCursor');
  late final _dart_DisableCursor _DisableCursor =
      _DisableCursor_ptr.asFunction<_dart_DisableCursor>();

  int IsCursorOnScreen() {
    return _IsCursorOnScreen();
  }

  late final _IsCursorOnScreen_ptr =
      _lookup<ffi.NativeFunction<_c_IsCursorOnScreen>>('IsCursorOnScreen');
  late final _dart_IsCursorOnScreen _IsCursorOnScreen =
      _IsCursorOnScreen_ptr.asFunction<_dart_IsCursorOnScreen>();

  /// Drawing-related functions
  void ClearBackground(
    Color color,
  ) {
    return _ClearBackground(
      color,
    );
  }

  late final _ClearBackground_ptr =
      _lookup<ffi.NativeFunction<_c_ClearBackground>>('ClearBackground');
  late final _dart_ClearBackground _ClearBackground =
      _ClearBackground_ptr.asFunction<_dart_ClearBackground>();

  void BeginDrawing() {
    return _BeginDrawing();
  }

  late final _BeginDrawing_ptr =
      _lookup<ffi.NativeFunction<_c_BeginDrawing>>('BeginDrawing');
  late final _dart_BeginDrawing _BeginDrawing =
      _BeginDrawing_ptr.asFunction<_dart_BeginDrawing>();

  void EndDrawing() {
    return _EndDrawing();
  }

  late final _EndDrawing_ptr =
      _lookup<ffi.NativeFunction<_c_EndDrawing>>('EndDrawing');
  late final _dart_EndDrawing _EndDrawing =
      _EndDrawing_ptr.asFunction<_dart_EndDrawing>();

  void BeginMode2D(
    Camera2D camera,
  ) {
    return _BeginMode2D(
      camera,
    );
  }

  late final _BeginMode2D_ptr =
      _lookup<ffi.NativeFunction<_c_BeginMode2D>>('BeginMode2D');
  late final _dart_BeginMode2D _BeginMode2D =
      _BeginMode2D_ptr.asFunction<_dart_BeginMode2D>();

  void EndMode2D() {
    return _EndMode2D();
  }

  late final _EndMode2D_ptr =
      _lookup<ffi.NativeFunction<_c_EndMode2D>>('EndMode2D');
  late final _dart_EndMode2D _EndMode2D =
      _EndMode2D_ptr.asFunction<_dart_EndMode2D>();

  void BeginMode3D(
    Camera3D camera,
  ) {
    return _BeginMode3D(
      camera,
    );
  }

  late final _BeginMode3D_ptr =
      _lookup<ffi.NativeFunction<_c_BeginMode3D>>('BeginMode3D');
  late final _dart_BeginMode3D _BeginMode3D =
      _BeginMode3D_ptr.asFunction<_dart_BeginMode3D>();

  void EndMode3D() {
    return _EndMode3D();
  }

  late final _EndMode3D_ptr =
      _lookup<ffi.NativeFunction<_c_EndMode3D>>('EndMode3D');
  late final _dart_EndMode3D _EndMode3D =
      _EndMode3D_ptr.asFunction<_dart_EndMode3D>();

  void BeginTextureMode(
    RenderTexture target,
  ) {
    return _BeginTextureMode(
      target,
    );
  }

  late final _BeginTextureMode_ptr =
      _lookup<ffi.NativeFunction<_c_BeginTextureMode>>('BeginTextureMode');
  late final _dart_BeginTextureMode _BeginTextureMode =
      _BeginTextureMode_ptr.asFunction<_dart_BeginTextureMode>();

  void EndTextureMode() {
    return _EndTextureMode();
  }

  late final _EndTextureMode_ptr =
      _lookup<ffi.NativeFunction<_c_EndTextureMode>>('EndTextureMode');
  late final _dart_EndTextureMode _EndTextureMode =
      _EndTextureMode_ptr.asFunction<_dart_EndTextureMode>();

  void BeginShaderMode(
    Shader shader,
  ) {
    return _BeginShaderMode(
      shader,
    );
  }

  late final _BeginShaderMode_ptr =
      _lookup<ffi.NativeFunction<_c_BeginShaderMode>>('BeginShaderMode');
  late final _dart_BeginShaderMode _BeginShaderMode =
      _BeginShaderMode_ptr.asFunction<_dart_BeginShaderMode>();

  void EndShaderMode() {
    return _EndShaderMode();
  }

  late final _EndShaderMode_ptr =
      _lookup<ffi.NativeFunction<_c_EndShaderMode>>('EndShaderMode');
  late final _dart_EndShaderMode _EndShaderMode =
      _EndShaderMode_ptr.asFunction<_dart_EndShaderMode>();

  void BeginBlendMode(
    int mode,
  ) {
    return _BeginBlendMode(
      mode,
    );
  }

  late final _BeginBlendMode_ptr =
      _lookup<ffi.NativeFunction<_c_BeginBlendMode>>('BeginBlendMode');
  late final _dart_BeginBlendMode _BeginBlendMode =
      _BeginBlendMode_ptr.asFunction<_dart_BeginBlendMode>();

  void EndBlendMode() {
    return _EndBlendMode();
  }

  late final _EndBlendMode_ptr =
      _lookup<ffi.NativeFunction<_c_EndBlendMode>>('EndBlendMode');
  late final _dart_EndBlendMode _EndBlendMode =
      _EndBlendMode_ptr.asFunction<_dart_EndBlendMode>();

  void BeginScissorMode(
    int x,
    int y,
    int width,
    int height,
  ) {
    return _BeginScissorMode(
      x,
      y,
      width,
      height,
    );
  }

  late final _BeginScissorMode_ptr =
      _lookup<ffi.NativeFunction<_c_BeginScissorMode>>('BeginScissorMode');
  late final _dart_BeginScissorMode _BeginScissorMode =
      _BeginScissorMode_ptr.asFunction<_dart_BeginScissorMode>();

  void EndScissorMode() {
    return _EndScissorMode();
  }

  late final _EndScissorMode_ptr =
      _lookup<ffi.NativeFunction<_c_EndScissorMode>>('EndScissorMode');
  late final _dart_EndScissorMode _EndScissorMode =
      _EndScissorMode_ptr.asFunction<_dart_EndScissorMode>();

  void BeginVrStereoMode(
    VrStereoConfig config,
  ) {
    return _BeginVrStereoMode(
      config,
    );
  }

  late final _BeginVrStereoMode_ptr =
      _lookup<ffi.NativeFunction<_c_BeginVrStereoMode>>('BeginVrStereoMode');
  late final _dart_BeginVrStereoMode _BeginVrStereoMode =
      _BeginVrStereoMode_ptr.asFunction<_dart_BeginVrStereoMode>();

  void EndVrStereoMode() {
    return _EndVrStereoMode();
  }

  late final _EndVrStereoMode_ptr =
      _lookup<ffi.NativeFunction<_c_EndVrStereoMode>>('EndVrStereoMode');
  late final _dart_EndVrStereoMode _EndVrStereoMode =
      _EndVrStereoMode_ptr.asFunction<_dart_EndVrStereoMode>();

  /// VR stereo config functions for VR simulator
  VrStereoConfig LoadVrStereoConfig(
    VrDeviceInfo device,
  ) {
    return _LoadVrStereoConfig(
      device,
    );
  }

  late final _LoadVrStereoConfig_ptr =
      _lookup<ffi.NativeFunction<_c_LoadVrStereoConfig>>('LoadVrStereoConfig');
  late final _dart_LoadVrStereoConfig _LoadVrStereoConfig =
      _LoadVrStereoConfig_ptr.asFunction<_dart_LoadVrStereoConfig>();

  void UnloadVrStereoConfig(
    VrStereoConfig config,
  ) {
    return _UnloadVrStereoConfig(
      config,
    );
  }

  late final _UnloadVrStereoConfig_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadVrStereoConfig>>(
          'UnloadVrStereoConfig');
  late final _dart_UnloadVrStereoConfig _UnloadVrStereoConfig =
      _UnloadVrStereoConfig_ptr.asFunction<_dart_UnloadVrStereoConfig>();

  /// Shader management functions
  /// NOTE: Shader functionality is not available on OpenGL 1.1
  Shader LoadShader(
    ffi.Pointer<ffi.Int8> vsFileName,
    ffi.Pointer<ffi.Int8> fsFileName,
  ) {
    return _LoadShader(
      vsFileName,
      fsFileName,
    );
  }

  late final _LoadShader_ptr =
      _lookup<ffi.NativeFunction<_c_LoadShader>>('LoadShader');
  late final _dart_LoadShader _LoadShader =
      _LoadShader_ptr.asFunction<_dart_LoadShader>();

  Shader LoadShaderFromMemory(
    ffi.Pointer<ffi.Int8> vsCode,
    ffi.Pointer<ffi.Int8> fsCode,
  ) {
    return _LoadShaderFromMemory(
      vsCode,
      fsCode,
    );
  }

  late final _LoadShaderFromMemory_ptr =
      _lookup<ffi.NativeFunction<_c_LoadShaderFromMemory>>(
          'LoadShaderFromMemory');
  late final _dart_LoadShaderFromMemory _LoadShaderFromMemory =
      _LoadShaderFromMemory_ptr.asFunction<_dart_LoadShaderFromMemory>();

  int GetShaderLocation(
    Shader shader,
    ffi.Pointer<ffi.Int8> uniformName,
  ) {
    return _GetShaderLocation(
      shader,
      uniformName,
    );
  }

  late final _GetShaderLocation_ptr =
      _lookup<ffi.NativeFunction<_c_GetShaderLocation>>('GetShaderLocation');
  late final _dart_GetShaderLocation _GetShaderLocation =
      _GetShaderLocation_ptr.asFunction<_dart_GetShaderLocation>();

  int GetShaderLocationAttrib(
    Shader shader,
    ffi.Pointer<ffi.Int8> attribName,
  ) {
    return _GetShaderLocationAttrib(
      shader,
      attribName,
    );
  }

  late final _GetShaderLocationAttrib_ptr =
      _lookup<ffi.NativeFunction<_c_GetShaderLocationAttrib>>(
          'GetShaderLocationAttrib');
  late final _dart_GetShaderLocationAttrib _GetShaderLocationAttrib =
      _GetShaderLocationAttrib_ptr.asFunction<_dart_GetShaderLocationAttrib>();

  void SetShaderValue(
    Shader shader,
    int locIndex,
    ffi.Pointer<ffi.Void> value,
    int uniformType,
  ) {
    return _SetShaderValue(
      shader,
      locIndex,
      value,
      uniformType,
    );
  }

  late final _SetShaderValue_ptr =
      _lookup<ffi.NativeFunction<_c_SetShaderValue>>('SetShaderValue');
  late final _dart_SetShaderValue _SetShaderValue =
      _SetShaderValue_ptr.asFunction<_dart_SetShaderValue>();

  void SetShaderValueV(
    Shader shader,
    int locIndex,
    ffi.Pointer<ffi.Void> value,
    int uniformType,
    int count,
  ) {
    return _SetShaderValueV(
      shader,
      locIndex,
      value,
      uniformType,
      count,
    );
  }

  late final _SetShaderValueV_ptr =
      _lookup<ffi.NativeFunction<_c_SetShaderValueV>>('SetShaderValueV');
  late final _dart_SetShaderValueV _SetShaderValueV =
      _SetShaderValueV_ptr.asFunction<_dart_SetShaderValueV>();

  void SetShaderValueMatrix(
    Shader shader,
    int locIndex,
    Matrix mat,
  ) {
    return _SetShaderValueMatrix(
      shader,
      locIndex,
      mat,
    );
  }

  late final _SetShaderValueMatrix_ptr =
      _lookup<ffi.NativeFunction<_c_SetShaderValueMatrix>>(
          'SetShaderValueMatrix');
  late final _dart_SetShaderValueMatrix _SetShaderValueMatrix =
      _SetShaderValueMatrix_ptr.asFunction<_dart_SetShaderValueMatrix>();

  void SetShaderValueTexture(
    Shader shader,
    int locIndex,
    Texture texture,
  ) {
    return _SetShaderValueTexture(
      shader,
      locIndex,
      texture,
    );
  }

  late final _SetShaderValueTexture_ptr =
      _lookup<ffi.NativeFunction<_c_SetShaderValueTexture>>(
          'SetShaderValueTexture');
  late final _dart_SetShaderValueTexture _SetShaderValueTexture =
      _SetShaderValueTexture_ptr.asFunction<_dart_SetShaderValueTexture>();

  void UnloadShader(
    Shader shader,
  ) {
    return _UnloadShader(
      shader,
    );
  }

  late final _UnloadShader_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadShader>>('UnloadShader');
  late final _dart_UnloadShader _UnloadShader =
      _UnloadShader_ptr.asFunction<_dart_UnloadShader>();

  /// Screen-space-related functions
  Ray GetMouseRay(
    Vector2 mousePosition,
    Camera3D camera,
  ) {
    return _GetMouseRay(
      mousePosition,
      camera,
    );
  }

  late final _GetMouseRay_ptr =
      _lookup<ffi.NativeFunction<_c_GetMouseRay>>('GetMouseRay');
  late final _dart_GetMouseRay _GetMouseRay =
      _GetMouseRay_ptr.asFunction<_dart_GetMouseRay>();

  Matrix GetCameraMatrix(
    Camera3D camera,
  ) {
    return _GetCameraMatrix(
      camera,
    );
  }

  late final _GetCameraMatrix_ptr =
      _lookup<ffi.NativeFunction<_c_GetCameraMatrix>>('GetCameraMatrix');
  late final _dart_GetCameraMatrix _GetCameraMatrix =
      _GetCameraMatrix_ptr.asFunction<_dart_GetCameraMatrix>();

  Matrix GetCameraMatrix2D(
    Camera2D camera,
  ) {
    return _GetCameraMatrix2D(
      camera,
    );
  }

  late final _GetCameraMatrix2D_ptr =
      _lookup<ffi.NativeFunction<_c_GetCameraMatrix2D>>('GetCameraMatrix2D');
  late final _dart_GetCameraMatrix2D _GetCameraMatrix2D =
      _GetCameraMatrix2D_ptr.asFunction<_dart_GetCameraMatrix2D>();

  Vector2 GetWorldToScreen(
    Vector3 position,
    Camera3D camera,
  ) {
    return _GetWorldToScreen(
      position,
      camera,
    );
  }

  late final _GetWorldToScreen_ptr =
      _lookup<ffi.NativeFunction<_c_GetWorldToScreen>>('GetWorldToScreen');
  late final _dart_GetWorldToScreen _GetWorldToScreen =
      _GetWorldToScreen_ptr.asFunction<_dart_GetWorldToScreen>();

  Vector2 GetWorldToScreenEx(
    Vector3 position,
    Camera3D camera,
    int width,
    int height,
  ) {
    return _GetWorldToScreenEx(
      position,
      camera,
      width,
      height,
    );
  }

  late final _GetWorldToScreenEx_ptr =
      _lookup<ffi.NativeFunction<_c_GetWorldToScreenEx>>('GetWorldToScreenEx');
  late final _dart_GetWorldToScreenEx _GetWorldToScreenEx =
      _GetWorldToScreenEx_ptr.asFunction<_dart_GetWorldToScreenEx>();

  Vector2 GetWorldToScreen2D(
    Vector2 position,
    Camera2D camera,
  ) {
    return _GetWorldToScreen2D(
      position,
      camera,
    );
  }

  late final _GetWorldToScreen2D_ptr =
      _lookup<ffi.NativeFunction<_c_GetWorldToScreen2D>>('GetWorldToScreen2D');
  late final _dart_GetWorldToScreen2D _GetWorldToScreen2D =
      _GetWorldToScreen2D_ptr.asFunction<_dart_GetWorldToScreen2D>();

  Vector2 GetScreenToWorld2D(
    Vector2 position,
    Camera2D camera,
  ) {
    return _GetScreenToWorld2D(
      position,
      camera,
    );
  }

  late final _GetScreenToWorld2D_ptr =
      _lookup<ffi.NativeFunction<_c_GetScreenToWorld2D>>('GetScreenToWorld2D');
  late final _dart_GetScreenToWorld2D _GetScreenToWorld2D =
      _GetScreenToWorld2D_ptr.asFunction<_dart_GetScreenToWorld2D>();

  /// Timing-related functions
  void SetTargetFPS(
    int fps,
  ) {
    return _SetTargetFPS(
      fps,
    );
  }

  late final _SetTargetFPS_ptr =
      _lookup<ffi.NativeFunction<_c_SetTargetFPS>>('SetTargetFPS');
  late final _dart_SetTargetFPS _SetTargetFPS =
      _SetTargetFPS_ptr.asFunction<_dart_SetTargetFPS>();

  int GetFPS() {
    return _GetFPS();
  }

  late final _GetFPS_ptr = _lookup<ffi.NativeFunction<_c_GetFPS>>('GetFPS');
  late final _dart_GetFPS _GetFPS = _GetFPS_ptr.asFunction<_dart_GetFPS>();

  double GetFrameTime() {
    return _GetFrameTime();
  }

  late final _GetFrameTime_ptr =
      _lookup<ffi.NativeFunction<_c_GetFrameTime>>('GetFrameTime');
  late final _dart_GetFrameTime _GetFrameTime =
      _GetFrameTime_ptr.asFunction<_dart_GetFrameTime>();

  double GetTime() {
    return _GetTime();
  }

  late final _GetTime_ptr = _lookup<ffi.NativeFunction<_c_GetTime>>('GetTime');
  late final _dart_GetTime _GetTime = _GetTime_ptr.asFunction<_dart_GetTime>();

  /// Misc. functions
  int GetRandomValue(
    int min,
    int max,
  ) {
    return _GetRandomValue(
      min,
      max,
    );
  }

  late final _GetRandomValue_ptr =
      _lookup<ffi.NativeFunction<_c_GetRandomValue>>('GetRandomValue');
  late final _dart_GetRandomValue _GetRandomValue =
      _GetRandomValue_ptr.asFunction<_dart_GetRandomValue>();

  void SetRandomSeed(
    int seed,
  ) {
    return _SetRandomSeed(
      seed,
    );
  }

  late final _SetRandomSeed_ptr =
      _lookup<ffi.NativeFunction<_c_SetRandomSeed>>('SetRandomSeed');
  late final _dart_SetRandomSeed _SetRandomSeed =
      _SetRandomSeed_ptr.asFunction<_dart_SetRandomSeed>();

  void TakeScreenshot(
    ffi.Pointer<ffi.Int8> fileName,
  ) {
    return _TakeScreenshot(
      fileName,
    );
  }

  late final _TakeScreenshot_ptr =
      _lookup<ffi.NativeFunction<_c_TakeScreenshot>>('TakeScreenshot');
  late final _dart_TakeScreenshot _TakeScreenshot =
      _TakeScreenshot_ptr.asFunction<_dart_TakeScreenshot>();

  void SetConfigFlags(
    int flags,
  ) {
    return _SetConfigFlags(
      flags,
    );
  }

  late final _SetConfigFlags_ptr =
      _lookup<ffi.NativeFunction<_c_SetConfigFlags>>('SetConfigFlags');
  late final _dart_SetConfigFlags _SetConfigFlags =
      _SetConfigFlags_ptr.asFunction<_dart_SetConfigFlags>();

  void TraceLog(
    int logLevel,
    ffi.Pointer<ffi.Int8> text,
  ) {
    return _TraceLog(
      logLevel,
      text,
    );
  }

  late final _TraceLog_ptr =
      _lookup<ffi.NativeFunction<_c_TraceLog>>('TraceLog');
  late final _dart_TraceLog _TraceLog =
      _TraceLog_ptr.asFunction<_dart_TraceLog>();

  void SetTraceLogLevel(
    int logLevel,
  ) {
    return _SetTraceLogLevel(
      logLevel,
    );
  }

  late final _SetTraceLogLevel_ptr =
      _lookup<ffi.NativeFunction<_c_SetTraceLogLevel>>('SetTraceLogLevel');
  late final _dart_SetTraceLogLevel _SetTraceLogLevel =
      _SetTraceLogLevel_ptr.asFunction<_dart_SetTraceLogLevel>();

  ffi.Pointer<ffi.Void> MemAlloc(
    int size,
  ) {
    return _MemAlloc(
      size,
    );
  }

  late final _MemAlloc_ptr =
      _lookup<ffi.NativeFunction<_c_MemAlloc>>('MemAlloc');
  late final _dart_MemAlloc _MemAlloc =
      _MemAlloc_ptr.asFunction<_dart_MemAlloc>();

  ffi.Pointer<ffi.Void> MemRealloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _MemRealloc(
      ptr,
      size,
    );
  }

  late final _MemRealloc_ptr =
      _lookup<ffi.NativeFunction<_c_MemRealloc>>('MemRealloc');
  late final _dart_MemRealloc _MemRealloc =
      _MemRealloc_ptr.asFunction<_dart_MemRealloc>();

  void MemFree(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _MemFree(
      ptr,
    );
  }

  late final _MemFree_ptr = _lookup<ffi.NativeFunction<_c_MemFree>>('MemFree');
  late final _dart_MemFree _MemFree = _MemFree_ptr.asFunction<_dart_MemFree>();

  /// Set custom callbacks
  /// WARNING: Callbacks setup is intended for advance users
  void SetTraceLogCallback(
    ffi.Pointer<ffi.NativeFunction<TraceLogCallback>> callback,
  ) {
    return _SetTraceLogCallback(
      callback,
    );
  }

  late final _SetTraceLogCallback_ptr =
      _lookup<ffi.NativeFunction<_c_SetTraceLogCallback>>(
          'SetTraceLogCallback');
  late final _dart_SetTraceLogCallback _SetTraceLogCallback =
      _SetTraceLogCallback_ptr.asFunction<_dart_SetTraceLogCallback>();

  void SetLoadFileDataCallback(
    ffi.Pointer<ffi.NativeFunction<LoadFileDataCallback>> callback,
  ) {
    return _SetLoadFileDataCallback(
      callback,
    );
  }

  late final _SetLoadFileDataCallback_ptr =
      _lookup<ffi.NativeFunction<_c_SetLoadFileDataCallback>>(
          'SetLoadFileDataCallback');
  late final _dart_SetLoadFileDataCallback _SetLoadFileDataCallback =
      _SetLoadFileDataCallback_ptr.asFunction<_dart_SetLoadFileDataCallback>();

  void SetSaveFileDataCallback(
    ffi.Pointer<ffi.NativeFunction<SaveFileDataCallback>> callback,
  ) {
    return _SetSaveFileDataCallback(
      callback,
    );
  }

  late final _SetSaveFileDataCallback_ptr =
      _lookup<ffi.NativeFunction<_c_SetSaveFileDataCallback>>(
          'SetSaveFileDataCallback');
  late final _dart_SetSaveFileDataCallback _SetSaveFileDataCallback =
      _SetSaveFileDataCallback_ptr.asFunction<_dart_SetSaveFileDataCallback>();

  void SetLoadFileTextCallback(
    ffi.Pointer<ffi.NativeFunction<LoadFileTextCallback>> callback,
  ) {
    return _SetLoadFileTextCallback(
      callback,
    );
  }

  late final _SetLoadFileTextCallback_ptr =
      _lookup<ffi.NativeFunction<_c_SetLoadFileTextCallback>>(
          'SetLoadFileTextCallback');
  late final _dart_SetLoadFileTextCallback _SetLoadFileTextCallback =
      _SetLoadFileTextCallback_ptr.asFunction<_dart_SetLoadFileTextCallback>();

  void SetSaveFileTextCallback(
    ffi.Pointer<ffi.NativeFunction<SaveFileTextCallback>> callback,
  ) {
    return _SetSaveFileTextCallback(
      callback,
    );
  }

  late final _SetSaveFileTextCallback_ptr =
      _lookup<ffi.NativeFunction<_c_SetSaveFileTextCallback>>(
          'SetSaveFileTextCallback');
  late final _dart_SetSaveFileTextCallback _SetSaveFileTextCallback =
      _SetSaveFileTextCallback_ptr.asFunction<_dart_SetSaveFileTextCallback>();

  /// Files management functions
  ffi.Pointer<ffi.Uint8> LoadFileData(
    ffi.Pointer<ffi.Int8> fileName,
    ffi.Pointer<ffi.Uint32> bytesRead,
  ) {
    return _LoadFileData(
      fileName,
      bytesRead,
    );
  }

  late final _LoadFileData_ptr =
      _lookup<ffi.NativeFunction<_c_LoadFileData>>('LoadFileData');
  late final _dart_LoadFileData _LoadFileData =
      _LoadFileData_ptr.asFunction<_dart_LoadFileData>();

  void UnloadFileData(
    ffi.Pointer<ffi.Uint8> data,
  ) {
    return _UnloadFileData(
      data,
    );
  }

  late final _UnloadFileData_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadFileData>>('UnloadFileData');
  late final _dart_UnloadFileData _UnloadFileData =
      _UnloadFileData_ptr.asFunction<_dart_UnloadFileData>();

  int SaveFileData(
    ffi.Pointer<ffi.Int8> fileName,
    ffi.Pointer<ffi.Void> data,
    int bytesToWrite,
  ) {
    return _SaveFileData(
      fileName,
      data,
      bytesToWrite,
    );
  }

  late final _SaveFileData_ptr =
      _lookup<ffi.NativeFunction<_c_SaveFileData>>('SaveFileData');
  late final _dart_SaveFileData _SaveFileData =
      _SaveFileData_ptr.asFunction<_dart_SaveFileData>();

  ffi.Pointer<ffi.Int8> LoadFileText(
    ffi.Pointer<ffi.Int8> fileName,
  ) {
    return _LoadFileText(
      fileName,
    );
  }

  late final _LoadFileText_ptr =
      _lookup<ffi.NativeFunction<_c_LoadFileText>>('LoadFileText');
  late final _dart_LoadFileText _LoadFileText =
      _LoadFileText_ptr.asFunction<_dart_LoadFileText>();

  void UnloadFileText(
    ffi.Pointer<ffi.Int8> text,
  ) {
    return _UnloadFileText(
      text,
    );
  }

  late final _UnloadFileText_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadFileText>>('UnloadFileText');
  late final _dart_UnloadFileText _UnloadFileText =
      _UnloadFileText_ptr.asFunction<_dart_UnloadFileText>();

  int SaveFileText(
    ffi.Pointer<ffi.Int8> fileName,
    ffi.Pointer<ffi.Int8> text,
  ) {
    return _SaveFileText(
      fileName,
      text,
    );
  }

  late final _SaveFileText_ptr =
      _lookup<ffi.NativeFunction<_c_SaveFileText>>('SaveFileText');
  late final _dart_SaveFileText _SaveFileText =
      _SaveFileText_ptr.asFunction<_dart_SaveFileText>();

  int FileExists(
    ffi.Pointer<ffi.Int8> fileName,
  ) {
    return _FileExists(
      fileName,
    );
  }

  late final _FileExists_ptr =
      _lookup<ffi.NativeFunction<_c_FileExists>>('FileExists');
  late final _dart_FileExists _FileExists =
      _FileExists_ptr.asFunction<_dart_FileExists>();

  int DirectoryExists(
    ffi.Pointer<ffi.Int8> dirPath,
  ) {
    return _DirectoryExists(
      dirPath,
    );
  }

  late final _DirectoryExists_ptr =
      _lookup<ffi.NativeFunction<_c_DirectoryExists>>('DirectoryExists');
  late final _dart_DirectoryExists _DirectoryExists =
      _DirectoryExists_ptr.asFunction<_dart_DirectoryExists>();

  int IsFileExtension(
    ffi.Pointer<ffi.Int8> fileName,
    ffi.Pointer<ffi.Int8> ext,
  ) {
    return _IsFileExtension(
      fileName,
      ext,
    );
  }

  late final _IsFileExtension_ptr =
      _lookup<ffi.NativeFunction<_c_IsFileExtension>>('IsFileExtension');
  late final _dart_IsFileExtension _IsFileExtension =
      _IsFileExtension_ptr.asFunction<_dart_IsFileExtension>();

  ffi.Pointer<ffi.Int8> GetFileExtension(
    ffi.Pointer<ffi.Int8> fileName,
  ) {
    return _GetFileExtension(
      fileName,
    );
  }

  late final _GetFileExtension_ptr =
      _lookup<ffi.NativeFunction<_c_GetFileExtension>>('GetFileExtension');
  late final _dart_GetFileExtension _GetFileExtension =
      _GetFileExtension_ptr.asFunction<_dart_GetFileExtension>();

  ffi.Pointer<ffi.Int8> GetFileName(
    ffi.Pointer<ffi.Int8> filePath,
  ) {
    return _GetFileName(
      filePath,
    );
  }

  late final _GetFileName_ptr =
      _lookup<ffi.NativeFunction<_c_GetFileName>>('GetFileName');
  late final _dart_GetFileName _GetFileName =
      _GetFileName_ptr.asFunction<_dart_GetFileName>();

  ffi.Pointer<ffi.Int8> GetFileNameWithoutExt(
    ffi.Pointer<ffi.Int8> filePath,
  ) {
    return _GetFileNameWithoutExt(
      filePath,
    );
  }

  late final _GetFileNameWithoutExt_ptr =
      _lookup<ffi.NativeFunction<_c_GetFileNameWithoutExt>>(
          'GetFileNameWithoutExt');
  late final _dart_GetFileNameWithoutExt _GetFileNameWithoutExt =
      _GetFileNameWithoutExt_ptr.asFunction<_dart_GetFileNameWithoutExt>();

  ffi.Pointer<ffi.Int8> GetDirectoryPath(
    ffi.Pointer<ffi.Int8> filePath,
  ) {
    return _GetDirectoryPath(
      filePath,
    );
  }

  late final _GetDirectoryPath_ptr =
      _lookup<ffi.NativeFunction<_c_GetDirectoryPath>>('GetDirectoryPath');
  late final _dart_GetDirectoryPath _GetDirectoryPath =
      _GetDirectoryPath_ptr.asFunction<_dart_GetDirectoryPath>();

  ffi.Pointer<ffi.Int8> GetPrevDirectoryPath(
    ffi.Pointer<ffi.Int8> dirPath,
  ) {
    return _GetPrevDirectoryPath(
      dirPath,
    );
  }

  late final _GetPrevDirectoryPath_ptr =
      _lookup<ffi.NativeFunction<_c_GetPrevDirectoryPath>>(
          'GetPrevDirectoryPath');
  late final _dart_GetPrevDirectoryPath _GetPrevDirectoryPath =
      _GetPrevDirectoryPath_ptr.asFunction<_dart_GetPrevDirectoryPath>();

  ffi.Pointer<ffi.Int8> GetWorkingDirectory() {
    return _GetWorkingDirectory();
  }

  late final _GetWorkingDirectory_ptr =
      _lookup<ffi.NativeFunction<_c_GetWorkingDirectory>>(
          'GetWorkingDirectory');
  late final _dart_GetWorkingDirectory _GetWorkingDirectory =
      _GetWorkingDirectory_ptr.asFunction<_dart_GetWorkingDirectory>();

  ffi.Pointer<ffi.Pointer<ffi.Int8>> GetDirectoryFiles(
    ffi.Pointer<ffi.Int8> dirPath,
    ffi.Pointer<ffi.Int32> count,
  ) {
    return _GetDirectoryFiles(
      dirPath,
      count,
    );
  }

  late final _GetDirectoryFiles_ptr =
      _lookup<ffi.NativeFunction<_c_GetDirectoryFiles>>('GetDirectoryFiles');
  late final _dart_GetDirectoryFiles _GetDirectoryFiles =
      _GetDirectoryFiles_ptr.asFunction<_dart_GetDirectoryFiles>();

  void ClearDirectoryFiles() {
    return _ClearDirectoryFiles();
  }

  late final _ClearDirectoryFiles_ptr =
      _lookup<ffi.NativeFunction<_c_ClearDirectoryFiles>>(
          'ClearDirectoryFiles');
  late final _dart_ClearDirectoryFiles _ClearDirectoryFiles =
      _ClearDirectoryFiles_ptr.asFunction<_dart_ClearDirectoryFiles>();

  int ChangeDirectory(
    ffi.Pointer<ffi.Int8> dir,
  ) {
    return _ChangeDirectory(
      dir,
    );
  }

  late final _ChangeDirectory_ptr =
      _lookup<ffi.NativeFunction<_c_ChangeDirectory>>('ChangeDirectory');
  late final _dart_ChangeDirectory _ChangeDirectory =
      _ChangeDirectory_ptr.asFunction<_dart_ChangeDirectory>();

  int IsFileDropped() {
    return _IsFileDropped();
  }

  late final _IsFileDropped_ptr =
      _lookup<ffi.NativeFunction<_c_IsFileDropped>>('IsFileDropped');
  late final _dart_IsFileDropped _IsFileDropped =
      _IsFileDropped_ptr.asFunction<_dart_IsFileDropped>();

  ffi.Pointer<ffi.Pointer<ffi.Int8>> GetDroppedFiles(
    ffi.Pointer<ffi.Int32> count,
  ) {
    return _GetDroppedFiles(
      count,
    );
  }

  late final _GetDroppedFiles_ptr =
      _lookup<ffi.NativeFunction<_c_GetDroppedFiles>>('GetDroppedFiles');
  late final _dart_GetDroppedFiles _GetDroppedFiles =
      _GetDroppedFiles_ptr.asFunction<_dart_GetDroppedFiles>();

  void ClearDroppedFiles() {
    return _ClearDroppedFiles();
  }

  late final _ClearDroppedFiles_ptr =
      _lookup<ffi.NativeFunction<_c_ClearDroppedFiles>>('ClearDroppedFiles');
  late final _dart_ClearDroppedFiles _ClearDroppedFiles =
      _ClearDroppedFiles_ptr.asFunction<_dart_ClearDroppedFiles>();

  int GetFileModTime(
    ffi.Pointer<ffi.Int8> fileName,
  ) {
    return _GetFileModTime(
      fileName,
    );
  }

  late final _GetFileModTime_ptr =
      _lookup<ffi.NativeFunction<_c_GetFileModTime>>('GetFileModTime');
  late final _dart_GetFileModTime _GetFileModTime =
      _GetFileModTime_ptr.asFunction<_dart_GetFileModTime>();

  /// Compression/Encoding functionality
  ffi.Pointer<ffi.Uint8> CompressData(
    ffi.Pointer<ffi.Uint8> data,
    int dataLength,
    ffi.Pointer<ffi.Int32> compDataLength,
  ) {
    return _CompressData(
      data,
      dataLength,
      compDataLength,
    );
  }

  late final _CompressData_ptr =
      _lookup<ffi.NativeFunction<_c_CompressData>>('CompressData');
  late final _dart_CompressData _CompressData =
      _CompressData_ptr.asFunction<_dart_CompressData>();

  ffi.Pointer<ffi.Uint8> DecompressData(
    ffi.Pointer<ffi.Uint8> compData,
    int compDataLength,
    ffi.Pointer<ffi.Int32> dataLength,
  ) {
    return _DecompressData(
      compData,
      compDataLength,
      dataLength,
    );
  }

  late final _DecompressData_ptr =
      _lookup<ffi.NativeFunction<_c_DecompressData>>('DecompressData');
  late final _dart_DecompressData _DecompressData =
      _DecompressData_ptr.asFunction<_dart_DecompressData>();

  ffi.Pointer<ffi.Int8> EncodeDataBase64(
    ffi.Pointer<ffi.Uint8> data,
    int dataLength,
    ffi.Pointer<ffi.Int32> outputLength,
  ) {
    return _EncodeDataBase64(
      data,
      dataLength,
      outputLength,
    );
  }

  late final _EncodeDataBase64_ptr =
      _lookup<ffi.NativeFunction<_c_EncodeDataBase64>>('EncodeDataBase64');
  late final _dart_EncodeDataBase64 _EncodeDataBase64 =
      _EncodeDataBase64_ptr.asFunction<_dart_EncodeDataBase64>();

  ffi.Pointer<ffi.Uint8> DecodeDataBase64(
    ffi.Pointer<ffi.Uint8> data,
    ffi.Pointer<ffi.Int32> outputLength,
  ) {
    return _DecodeDataBase64(
      data,
      outputLength,
    );
  }

  late final _DecodeDataBase64_ptr =
      _lookup<ffi.NativeFunction<_c_DecodeDataBase64>>('DecodeDataBase64');
  late final _dart_DecodeDataBase64 _DecodeDataBase64 =
      _DecodeDataBase64_ptr.asFunction<_dart_DecodeDataBase64>();

  /// Persistent storage management
  int SaveStorageValue(
    int position,
    int value,
  ) {
    return _SaveStorageValue(
      position,
      value,
    );
  }

  late final _SaveStorageValue_ptr =
      _lookup<ffi.NativeFunction<_c_SaveStorageValue>>('SaveStorageValue');
  late final _dart_SaveStorageValue _SaveStorageValue =
      _SaveStorageValue_ptr.asFunction<_dart_SaveStorageValue>();

  int LoadStorageValue(
    int position,
  ) {
    return _LoadStorageValue(
      position,
    );
  }

  late final _LoadStorageValue_ptr =
      _lookup<ffi.NativeFunction<_c_LoadStorageValue>>('LoadStorageValue');
  late final _dart_LoadStorageValue _LoadStorageValue =
      _LoadStorageValue_ptr.asFunction<_dart_LoadStorageValue>();

  void OpenURL(
    ffi.Pointer<ffi.Int8> url,
  ) {
    return _OpenURL(
      url,
    );
  }

  late final _OpenURL_ptr = _lookup<ffi.NativeFunction<_c_OpenURL>>('OpenURL');
  late final _dart_OpenURL _OpenURL = _OpenURL_ptr.asFunction<_dart_OpenURL>();

  /// Input-related functions: keyboard
  int IsKeyPressed(
    int key,
  ) {
    return _IsKeyPressed(
      key,
    );
  }

  late final _IsKeyPressed_ptr =
      _lookup<ffi.NativeFunction<_c_IsKeyPressed>>('IsKeyPressed');
  late final _dart_IsKeyPressed _IsKeyPressed =
      _IsKeyPressed_ptr.asFunction<_dart_IsKeyPressed>();

  int IsKeyDown(
    int key,
  ) {
    return _IsKeyDown(
      key,
    );
  }

  late final _IsKeyDown_ptr =
      _lookup<ffi.NativeFunction<_c_IsKeyDown>>('IsKeyDown');
  late final _dart_IsKeyDown _IsKeyDown =
      _IsKeyDown_ptr.asFunction<_dart_IsKeyDown>();

  int IsKeyReleased(
    int key,
  ) {
    return _IsKeyReleased(
      key,
    );
  }

  late final _IsKeyReleased_ptr =
      _lookup<ffi.NativeFunction<_c_IsKeyReleased>>('IsKeyReleased');
  late final _dart_IsKeyReleased _IsKeyReleased =
      _IsKeyReleased_ptr.asFunction<_dart_IsKeyReleased>();

  int IsKeyUp(
    int key,
  ) {
    return _IsKeyUp(
      key,
    );
  }

  late final _IsKeyUp_ptr = _lookup<ffi.NativeFunction<_c_IsKeyUp>>('IsKeyUp');
  late final _dart_IsKeyUp _IsKeyUp = _IsKeyUp_ptr.asFunction<_dart_IsKeyUp>();

  void SetExitKey(
    int key,
  ) {
    return _SetExitKey(
      key,
    );
  }

  late final _SetExitKey_ptr =
      _lookup<ffi.NativeFunction<_c_SetExitKey>>('SetExitKey');
  late final _dart_SetExitKey _SetExitKey =
      _SetExitKey_ptr.asFunction<_dart_SetExitKey>();

  int GetKeyPressed() {
    return _GetKeyPressed();
  }

  late final _GetKeyPressed_ptr =
      _lookup<ffi.NativeFunction<_c_GetKeyPressed>>('GetKeyPressed');
  late final _dart_GetKeyPressed _GetKeyPressed =
      _GetKeyPressed_ptr.asFunction<_dart_GetKeyPressed>();

  int GetCharPressed() {
    return _GetCharPressed();
  }

  late final _GetCharPressed_ptr =
      _lookup<ffi.NativeFunction<_c_GetCharPressed>>('GetCharPressed');
  late final _dart_GetCharPressed _GetCharPressed =
      _GetCharPressed_ptr.asFunction<_dart_GetCharPressed>();

  /// Input-related functions: gamepads
  int IsGamepadAvailable(
    int gamepad,
  ) {
    return _IsGamepadAvailable(
      gamepad,
    );
  }

  late final _IsGamepadAvailable_ptr =
      _lookup<ffi.NativeFunction<_c_IsGamepadAvailable>>('IsGamepadAvailable');
  late final _dart_IsGamepadAvailable _IsGamepadAvailable =
      _IsGamepadAvailable_ptr.asFunction<_dart_IsGamepadAvailable>();

  ffi.Pointer<ffi.Int8> GetGamepadName(
    int gamepad,
  ) {
    return _GetGamepadName(
      gamepad,
    );
  }

  late final _GetGamepadName_ptr =
      _lookup<ffi.NativeFunction<_c_GetGamepadName>>('GetGamepadName');
  late final _dart_GetGamepadName _GetGamepadName =
      _GetGamepadName_ptr.asFunction<_dart_GetGamepadName>();

  int IsGamepadButtonPressed(
    int gamepad,
    int button,
  ) {
    return _IsGamepadButtonPressed(
      gamepad,
      button,
    );
  }

  late final _IsGamepadButtonPressed_ptr =
      _lookup<ffi.NativeFunction<_c_IsGamepadButtonPressed>>(
          'IsGamepadButtonPressed');
  late final _dart_IsGamepadButtonPressed _IsGamepadButtonPressed =
      _IsGamepadButtonPressed_ptr.asFunction<_dart_IsGamepadButtonPressed>();

  int IsGamepadButtonDown(
    int gamepad,
    int button,
  ) {
    return _IsGamepadButtonDown(
      gamepad,
      button,
    );
  }

  late final _IsGamepadButtonDown_ptr =
      _lookup<ffi.NativeFunction<_c_IsGamepadButtonDown>>(
          'IsGamepadButtonDown');
  late final _dart_IsGamepadButtonDown _IsGamepadButtonDown =
      _IsGamepadButtonDown_ptr.asFunction<_dart_IsGamepadButtonDown>();

  int IsGamepadButtonReleased(
    int gamepad,
    int button,
  ) {
    return _IsGamepadButtonReleased(
      gamepad,
      button,
    );
  }

  late final _IsGamepadButtonReleased_ptr =
      _lookup<ffi.NativeFunction<_c_IsGamepadButtonReleased>>(
          'IsGamepadButtonReleased');
  late final _dart_IsGamepadButtonReleased _IsGamepadButtonReleased =
      _IsGamepadButtonReleased_ptr.asFunction<_dart_IsGamepadButtonReleased>();

  int IsGamepadButtonUp(
    int gamepad,
    int button,
  ) {
    return _IsGamepadButtonUp(
      gamepad,
      button,
    );
  }

  late final _IsGamepadButtonUp_ptr =
      _lookup<ffi.NativeFunction<_c_IsGamepadButtonUp>>('IsGamepadButtonUp');
  late final _dart_IsGamepadButtonUp _IsGamepadButtonUp =
      _IsGamepadButtonUp_ptr.asFunction<_dart_IsGamepadButtonUp>();

  int GetGamepadButtonPressed() {
    return _GetGamepadButtonPressed();
  }

  late final _GetGamepadButtonPressed_ptr =
      _lookup<ffi.NativeFunction<_c_GetGamepadButtonPressed>>(
          'GetGamepadButtonPressed');
  late final _dart_GetGamepadButtonPressed _GetGamepadButtonPressed =
      _GetGamepadButtonPressed_ptr.asFunction<_dart_GetGamepadButtonPressed>();

  int GetGamepadAxisCount(
    int gamepad,
  ) {
    return _GetGamepadAxisCount(
      gamepad,
    );
  }

  late final _GetGamepadAxisCount_ptr =
      _lookup<ffi.NativeFunction<_c_GetGamepadAxisCount>>(
          'GetGamepadAxisCount');
  late final _dart_GetGamepadAxisCount _GetGamepadAxisCount =
      _GetGamepadAxisCount_ptr.asFunction<_dart_GetGamepadAxisCount>();

  double GetGamepadAxisMovement(
    int gamepad,
    int axis,
  ) {
    return _GetGamepadAxisMovement(
      gamepad,
      axis,
    );
  }

  late final _GetGamepadAxisMovement_ptr =
      _lookup<ffi.NativeFunction<_c_GetGamepadAxisMovement>>(
          'GetGamepadAxisMovement');
  late final _dart_GetGamepadAxisMovement _GetGamepadAxisMovement =
      _GetGamepadAxisMovement_ptr.asFunction<_dart_GetGamepadAxisMovement>();

  int SetGamepadMappings(
    ffi.Pointer<ffi.Int8> mappings,
  ) {
    return _SetGamepadMappings(
      mappings,
    );
  }

  late final _SetGamepadMappings_ptr =
      _lookup<ffi.NativeFunction<_c_SetGamepadMappings>>('SetGamepadMappings');
  late final _dart_SetGamepadMappings _SetGamepadMappings =
      _SetGamepadMappings_ptr.asFunction<_dart_SetGamepadMappings>();

  /// Input-related functions: mouse
  int IsMouseButtonPressed(
    int button,
  ) {
    return _IsMouseButtonPressed(
      button,
    );
  }

  late final _IsMouseButtonPressed_ptr =
      _lookup<ffi.NativeFunction<_c_IsMouseButtonPressed>>(
          'IsMouseButtonPressed');
  late final _dart_IsMouseButtonPressed _IsMouseButtonPressed =
      _IsMouseButtonPressed_ptr.asFunction<_dart_IsMouseButtonPressed>();

  int IsMouseButtonDown(
    int button,
  ) {
    return _IsMouseButtonDown(
      button,
    );
  }

  late final _IsMouseButtonDown_ptr =
      _lookup<ffi.NativeFunction<_c_IsMouseButtonDown>>('IsMouseButtonDown');
  late final _dart_IsMouseButtonDown _IsMouseButtonDown =
      _IsMouseButtonDown_ptr.asFunction<_dart_IsMouseButtonDown>();

  int IsMouseButtonReleased(
    int button,
  ) {
    return _IsMouseButtonReleased(
      button,
    );
  }

  late final _IsMouseButtonReleased_ptr =
      _lookup<ffi.NativeFunction<_c_IsMouseButtonReleased>>(
          'IsMouseButtonReleased');
  late final _dart_IsMouseButtonReleased _IsMouseButtonReleased =
      _IsMouseButtonReleased_ptr.asFunction<_dart_IsMouseButtonReleased>();

  int IsMouseButtonUp(
    int button,
  ) {
    return _IsMouseButtonUp(
      button,
    );
  }

  late final _IsMouseButtonUp_ptr =
      _lookup<ffi.NativeFunction<_c_IsMouseButtonUp>>('IsMouseButtonUp');
  late final _dart_IsMouseButtonUp _IsMouseButtonUp =
      _IsMouseButtonUp_ptr.asFunction<_dart_IsMouseButtonUp>();

  int GetMouseX() {
    return _GetMouseX();
  }

  late final _GetMouseX_ptr =
      _lookup<ffi.NativeFunction<_c_GetMouseX>>('GetMouseX');
  late final _dart_GetMouseX _GetMouseX =
      _GetMouseX_ptr.asFunction<_dart_GetMouseX>();

  int GetMouseY() {
    return _GetMouseY();
  }

  late final _GetMouseY_ptr =
      _lookup<ffi.NativeFunction<_c_GetMouseY>>('GetMouseY');
  late final _dart_GetMouseY _GetMouseY =
      _GetMouseY_ptr.asFunction<_dart_GetMouseY>();

  Vector2 GetMousePosition() {
    return _GetMousePosition();
  }

  late final _GetMousePosition_ptr =
      _lookup<ffi.NativeFunction<_c_GetMousePosition>>('GetMousePosition');
  late final _dart_GetMousePosition _GetMousePosition =
      _GetMousePosition_ptr.asFunction<_dart_GetMousePosition>();

  Vector2 GetMouseDelta() {
    return _GetMouseDelta();
  }

  late final _GetMouseDelta_ptr =
      _lookup<ffi.NativeFunction<_c_GetMouseDelta>>('GetMouseDelta');
  late final _dart_GetMouseDelta _GetMouseDelta =
      _GetMouseDelta_ptr.asFunction<_dart_GetMouseDelta>();

  void SetMousePosition(
    int x,
    int y,
  ) {
    return _SetMousePosition(
      x,
      y,
    );
  }

  late final _SetMousePosition_ptr =
      _lookup<ffi.NativeFunction<_c_SetMousePosition>>('SetMousePosition');
  late final _dart_SetMousePosition _SetMousePosition =
      _SetMousePosition_ptr.asFunction<_dart_SetMousePosition>();

  void SetMouseOffset(
    int offsetX,
    int offsetY,
  ) {
    return _SetMouseOffset(
      offsetX,
      offsetY,
    );
  }

  late final _SetMouseOffset_ptr =
      _lookup<ffi.NativeFunction<_c_SetMouseOffset>>('SetMouseOffset');
  late final _dart_SetMouseOffset _SetMouseOffset =
      _SetMouseOffset_ptr.asFunction<_dart_SetMouseOffset>();

  void SetMouseScale(
    double scaleX,
    double scaleY,
  ) {
    return _SetMouseScale(
      scaleX,
      scaleY,
    );
  }

  late final _SetMouseScale_ptr =
      _lookup<ffi.NativeFunction<_c_SetMouseScale>>('SetMouseScale');
  late final _dart_SetMouseScale _SetMouseScale =
      _SetMouseScale_ptr.asFunction<_dart_SetMouseScale>();

  double GetMouseWheelMove() {
    return _GetMouseWheelMove();
  }

  late final _GetMouseWheelMove_ptr =
      _lookup<ffi.NativeFunction<_c_GetMouseWheelMove>>('GetMouseWheelMove');
  late final _dart_GetMouseWheelMove _GetMouseWheelMove =
      _GetMouseWheelMove_ptr.asFunction<_dart_GetMouseWheelMove>();

  void SetMouseCursor(
    int cursor,
  ) {
    return _SetMouseCursor(
      cursor,
    );
  }

  late final _SetMouseCursor_ptr =
      _lookup<ffi.NativeFunction<_c_SetMouseCursor>>('SetMouseCursor');
  late final _dart_SetMouseCursor _SetMouseCursor =
      _SetMouseCursor_ptr.asFunction<_dart_SetMouseCursor>();

  /// Input-related functions: touch
  int GetTouchX() {
    return _GetTouchX();
  }

  late final _GetTouchX_ptr =
      _lookup<ffi.NativeFunction<_c_GetTouchX>>('GetTouchX');
  late final _dart_GetTouchX _GetTouchX =
      _GetTouchX_ptr.asFunction<_dart_GetTouchX>();

  int GetTouchY() {
    return _GetTouchY();
  }

  late final _GetTouchY_ptr =
      _lookup<ffi.NativeFunction<_c_GetTouchY>>('GetTouchY');
  late final _dart_GetTouchY _GetTouchY =
      _GetTouchY_ptr.asFunction<_dart_GetTouchY>();

  Vector2 GetTouchPosition(
    int index,
  ) {
    return _GetTouchPosition(
      index,
    );
  }

  late final _GetTouchPosition_ptr =
      _lookup<ffi.NativeFunction<_c_GetTouchPosition>>('GetTouchPosition');
  late final _dart_GetTouchPosition _GetTouchPosition =
      _GetTouchPosition_ptr.asFunction<_dart_GetTouchPosition>();

  int GetTouchPointId(
    int index,
  ) {
    return _GetTouchPointId(
      index,
    );
  }

  late final _GetTouchPointId_ptr =
      _lookup<ffi.NativeFunction<_c_GetTouchPointId>>('GetTouchPointId');
  late final _dart_GetTouchPointId _GetTouchPointId =
      _GetTouchPointId_ptr.asFunction<_dart_GetTouchPointId>();

  int GetTouchPointCount() {
    return _GetTouchPointCount();
  }

  late final _GetTouchPointCount_ptr =
      _lookup<ffi.NativeFunction<_c_GetTouchPointCount>>('GetTouchPointCount');
  late final _dart_GetTouchPointCount _GetTouchPointCount =
      _GetTouchPointCount_ptr.asFunction<_dart_GetTouchPointCount>();

  /// ------------------------------------------------------------------------------------
  /// Gestures and Touch Handling Functions (Module: rgestures)
  /// ------------------------------------------------------------------------------------
  void SetGesturesEnabled(
    int flags,
  ) {
    return _SetGesturesEnabled(
      flags,
    );
  }

  late final _SetGesturesEnabled_ptr =
      _lookup<ffi.NativeFunction<_c_SetGesturesEnabled>>('SetGesturesEnabled');
  late final _dart_SetGesturesEnabled _SetGesturesEnabled =
      _SetGesturesEnabled_ptr.asFunction<_dart_SetGesturesEnabled>();

  int IsGestureDetected(
    int gesture,
  ) {
    return _IsGestureDetected(
      gesture,
    );
  }

  late final _IsGestureDetected_ptr =
      _lookup<ffi.NativeFunction<_c_IsGestureDetected>>('IsGestureDetected');
  late final _dart_IsGestureDetected _IsGestureDetected =
      _IsGestureDetected_ptr.asFunction<_dart_IsGestureDetected>();

  int GetGestureDetected() {
    return _GetGestureDetected();
  }

  late final _GetGestureDetected_ptr =
      _lookup<ffi.NativeFunction<_c_GetGestureDetected>>('GetGestureDetected');
  late final _dart_GetGestureDetected _GetGestureDetected =
      _GetGestureDetected_ptr.asFunction<_dart_GetGestureDetected>();

  double GetGestureHoldDuration() {
    return _GetGestureHoldDuration();
  }

  late final _GetGestureHoldDuration_ptr =
      _lookup<ffi.NativeFunction<_c_GetGestureHoldDuration>>(
          'GetGestureHoldDuration');
  late final _dart_GetGestureHoldDuration _GetGestureHoldDuration =
      _GetGestureHoldDuration_ptr.asFunction<_dart_GetGestureHoldDuration>();

  Vector2 GetGestureDragVector() {
    return _GetGestureDragVector();
  }

  late final _GetGestureDragVector_ptr =
      _lookup<ffi.NativeFunction<_c_GetGestureDragVector>>(
          'GetGestureDragVector');
  late final _dart_GetGestureDragVector _GetGestureDragVector =
      _GetGestureDragVector_ptr.asFunction<_dart_GetGestureDragVector>();

  double GetGestureDragAngle() {
    return _GetGestureDragAngle();
  }

  late final _GetGestureDragAngle_ptr =
      _lookup<ffi.NativeFunction<_c_GetGestureDragAngle>>(
          'GetGestureDragAngle');
  late final _dart_GetGestureDragAngle _GetGestureDragAngle =
      _GetGestureDragAngle_ptr.asFunction<_dart_GetGestureDragAngle>();

  Vector2 GetGesturePinchVector() {
    return _GetGesturePinchVector();
  }

  late final _GetGesturePinchVector_ptr =
      _lookup<ffi.NativeFunction<_c_GetGesturePinchVector>>(
          'GetGesturePinchVector');
  late final _dart_GetGesturePinchVector _GetGesturePinchVector =
      _GetGesturePinchVector_ptr.asFunction<_dart_GetGesturePinchVector>();

  double GetGesturePinchAngle() {
    return _GetGesturePinchAngle();
  }

  late final _GetGesturePinchAngle_ptr =
      _lookup<ffi.NativeFunction<_c_GetGesturePinchAngle>>(
          'GetGesturePinchAngle');
  late final _dart_GetGesturePinchAngle _GetGesturePinchAngle =
      _GetGesturePinchAngle_ptr.asFunction<_dart_GetGesturePinchAngle>();

  /// ------------------------------------------------------------------------------------
  /// Camera System Functions (Module: rcamera)
  /// ------------------------------------------------------------------------------------
  void SetCameraMode(
    Camera3D camera,
    int mode,
  ) {
    return _SetCameraMode(
      camera,
      mode,
    );
  }

  late final _SetCameraMode_ptr =
      _lookup<ffi.NativeFunction<_c_SetCameraMode>>('SetCameraMode');
  late final _dart_SetCameraMode _SetCameraMode =
      _SetCameraMode_ptr.asFunction<_dart_SetCameraMode>();

  void UpdateCamera(
    ffi.Pointer<Camera3D> camera,
  ) {
    return _UpdateCamera(
      camera,
    );
  }

  late final _UpdateCamera_ptr =
      _lookup<ffi.NativeFunction<_c_UpdateCamera>>('UpdateCamera');
  late final _dart_UpdateCamera _UpdateCamera =
      _UpdateCamera_ptr.asFunction<_dart_UpdateCamera>();

  void SetCameraPanControl(
    int keyPan,
  ) {
    return _SetCameraPanControl(
      keyPan,
    );
  }

  late final _SetCameraPanControl_ptr =
      _lookup<ffi.NativeFunction<_c_SetCameraPanControl>>(
          'SetCameraPanControl');
  late final _dart_SetCameraPanControl _SetCameraPanControl =
      _SetCameraPanControl_ptr.asFunction<_dart_SetCameraPanControl>();

  void SetCameraAltControl(
    int keyAlt,
  ) {
    return _SetCameraAltControl(
      keyAlt,
    );
  }

  late final _SetCameraAltControl_ptr =
      _lookup<ffi.NativeFunction<_c_SetCameraAltControl>>(
          'SetCameraAltControl');
  late final _dart_SetCameraAltControl _SetCameraAltControl =
      _SetCameraAltControl_ptr.asFunction<_dart_SetCameraAltControl>();

  void SetCameraSmoothZoomControl(
    int keySmoothZoom,
  ) {
    return _SetCameraSmoothZoomControl(
      keySmoothZoom,
    );
  }

  late final _SetCameraSmoothZoomControl_ptr =
      _lookup<ffi.NativeFunction<_c_SetCameraSmoothZoomControl>>(
          'SetCameraSmoothZoomControl');
  late final _dart_SetCameraSmoothZoomControl _SetCameraSmoothZoomControl =
      _SetCameraSmoothZoomControl_ptr.asFunction<
          _dart_SetCameraSmoothZoomControl>();

  void SetCameraMoveControls(
    int keyFront,
    int keyBack,
    int keyRight,
    int keyLeft,
    int keyUp,
    int keyDown,
  ) {
    return _SetCameraMoveControls(
      keyFront,
      keyBack,
      keyRight,
      keyLeft,
      keyUp,
      keyDown,
    );
  }

  late final _SetCameraMoveControls_ptr =
      _lookup<ffi.NativeFunction<_c_SetCameraMoveControls>>(
          'SetCameraMoveControls');
  late final _dart_SetCameraMoveControls _SetCameraMoveControls =
      _SetCameraMoveControls_ptr.asFunction<_dart_SetCameraMoveControls>();

  /// ------------------------------------------------------------------------------------
  /// Basic Shapes Drawing Functions (Module: shapes)
  /// ------------------------------------------------------------------------------------
  /// Set texture and rectangle to be used on shapes drawing
  /// NOTE: It can be useful when using basic shapes and one single font,
  /// defining a font char white rectangle would allow drawing everything in a single draw call
  void SetShapesTexture(
    Texture texture,
    Rectangle source,
  ) {
    return _SetShapesTexture(
      texture,
      source,
    );
  }

  late final _SetShapesTexture_ptr =
      _lookup<ffi.NativeFunction<_c_SetShapesTexture>>('SetShapesTexture');
  late final _dart_SetShapesTexture _SetShapesTexture =
      _SetShapesTexture_ptr.asFunction<_dart_SetShapesTexture>();

  /// Basic shapes drawing functions
  void DrawPixel(
    int posX,
    int posY,
    Color color,
  ) {
    return _DrawPixel(
      posX,
      posY,
      color,
    );
  }

  late final _DrawPixel_ptr =
      _lookup<ffi.NativeFunction<_c_DrawPixel>>('DrawPixel');
  late final _dart_DrawPixel _DrawPixel =
      _DrawPixel_ptr.asFunction<_dart_DrawPixel>();

  void DrawPixelV(
    Vector2 position,
    Color color,
  ) {
    return _DrawPixelV(
      position,
      color,
    );
  }

  late final _DrawPixelV_ptr =
      _lookup<ffi.NativeFunction<_c_DrawPixelV>>('DrawPixelV');
  late final _dart_DrawPixelV _DrawPixelV =
      _DrawPixelV_ptr.asFunction<_dart_DrawPixelV>();

  void DrawLine(
    int startPosX,
    int startPosY,
    int endPosX,
    int endPosY,
    Color color,
  ) {
    return _DrawLine(
      startPosX,
      startPosY,
      endPosX,
      endPosY,
      color,
    );
  }

  late final _DrawLine_ptr =
      _lookup<ffi.NativeFunction<_c_DrawLine>>('DrawLine');
  late final _dart_DrawLine _DrawLine =
      _DrawLine_ptr.asFunction<_dart_DrawLine>();

  void DrawLineV(
    Vector2 startPos,
    Vector2 endPos,
    Color color,
  ) {
    return _DrawLineV(
      startPos,
      endPos,
      color,
    );
  }

  late final _DrawLineV_ptr =
      _lookup<ffi.NativeFunction<_c_DrawLineV>>('DrawLineV');
  late final _dart_DrawLineV _DrawLineV =
      _DrawLineV_ptr.asFunction<_dart_DrawLineV>();

  void DrawLineEx(
    Vector2 startPos,
    Vector2 endPos,
    double thick,
    Color color,
  ) {
    return _DrawLineEx(
      startPos,
      endPos,
      thick,
      color,
    );
  }

  late final _DrawLineEx_ptr =
      _lookup<ffi.NativeFunction<_c_DrawLineEx>>('DrawLineEx');
  late final _dart_DrawLineEx _DrawLineEx =
      _DrawLineEx_ptr.asFunction<_dart_DrawLineEx>();

  void DrawLineBezier(
    Vector2 startPos,
    Vector2 endPos,
    double thick,
    Color color,
  ) {
    return _DrawLineBezier(
      startPos,
      endPos,
      thick,
      color,
    );
  }

  late final _DrawLineBezier_ptr =
      _lookup<ffi.NativeFunction<_c_DrawLineBezier>>('DrawLineBezier');
  late final _dart_DrawLineBezier _DrawLineBezier =
      _DrawLineBezier_ptr.asFunction<_dart_DrawLineBezier>();

  void DrawLineBezierQuad(
    Vector2 startPos,
    Vector2 endPos,
    Vector2 controlPos,
    double thick,
    Color color,
  ) {
    return _DrawLineBezierQuad(
      startPos,
      endPos,
      controlPos,
      thick,
      color,
    );
  }

  late final _DrawLineBezierQuad_ptr =
      _lookup<ffi.NativeFunction<_c_DrawLineBezierQuad>>('DrawLineBezierQuad');
  late final _dart_DrawLineBezierQuad _DrawLineBezierQuad =
      _DrawLineBezierQuad_ptr.asFunction<_dart_DrawLineBezierQuad>();

  void DrawLineBezierCubic(
    Vector2 startPos,
    Vector2 endPos,
    Vector2 startControlPos,
    Vector2 endControlPos,
    double thick,
    Color color,
  ) {
    return _DrawLineBezierCubic(
      startPos,
      endPos,
      startControlPos,
      endControlPos,
      thick,
      color,
    );
  }

  late final _DrawLineBezierCubic_ptr =
      _lookup<ffi.NativeFunction<_c_DrawLineBezierCubic>>(
          'DrawLineBezierCubic');
  late final _dart_DrawLineBezierCubic _DrawLineBezierCubic =
      _DrawLineBezierCubic_ptr.asFunction<_dart_DrawLineBezierCubic>();

  void DrawLineStrip(
    ffi.Pointer<Vector2> points,
    int pointCount,
    Color color,
  ) {
    return _DrawLineStrip(
      points,
      pointCount,
      color,
    );
  }

  late final _DrawLineStrip_ptr =
      _lookup<ffi.NativeFunction<_c_DrawLineStrip>>('DrawLineStrip');
  late final _dart_DrawLineStrip _DrawLineStrip =
      _DrawLineStrip_ptr.asFunction<_dart_DrawLineStrip>();

  void DrawCircle(
    int centerX,
    int centerY,
    double radius,
    Color color,
  ) {
    return _DrawCircle(
      centerX,
      centerY,
      radius,
      color,
    );
  }

  late final _DrawCircle_ptr =
      _lookup<ffi.NativeFunction<_c_DrawCircle>>('DrawCircle');
  late final _dart_DrawCircle _DrawCircle =
      _DrawCircle_ptr.asFunction<_dart_DrawCircle>();

  void DrawCircleSector(
    Vector2 center,
    double radius,
    double startAngle,
    double endAngle,
    int segments,
    Color color,
  ) {
    return _DrawCircleSector(
      center,
      radius,
      startAngle,
      endAngle,
      segments,
      color,
    );
  }

  late final _DrawCircleSector_ptr =
      _lookup<ffi.NativeFunction<_c_DrawCircleSector>>('DrawCircleSector');
  late final _dart_DrawCircleSector _DrawCircleSector =
      _DrawCircleSector_ptr.asFunction<_dart_DrawCircleSector>();

  void DrawCircleSectorLines(
    Vector2 center,
    double radius,
    double startAngle,
    double endAngle,
    int segments,
    Color color,
  ) {
    return _DrawCircleSectorLines(
      center,
      radius,
      startAngle,
      endAngle,
      segments,
      color,
    );
  }

  late final _DrawCircleSectorLines_ptr =
      _lookup<ffi.NativeFunction<_c_DrawCircleSectorLines>>(
          'DrawCircleSectorLines');
  late final _dart_DrawCircleSectorLines _DrawCircleSectorLines =
      _DrawCircleSectorLines_ptr.asFunction<_dart_DrawCircleSectorLines>();

  void DrawCircleGradient(
    int centerX,
    int centerY,
    double radius,
    Color color1,
    Color color2,
  ) {
    return _DrawCircleGradient(
      centerX,
      centerY,
      radius,
      color1,
      color2,
    );
  }

  late final _DrawCircleGradient_ptr =
      _lookup<ffi.NativeFunction<_c_DrawCircleGradient>>('DrawCircleGradient');
  late final _dart_DrawCircleGradient _DrawCircleGradient =
      _DrawCircleGradient_ptr.asFunction<_dart_DrawCircleGradient>();

  void DrawCircleV(
    Vector2 center,
    double radius,
    Color color,
  ) {
    return _DrawCircleV(
      center,
      radius,
      color,
    );
  }

  late final _DrawCircleV_ptr =
      _lookup<ffi.NativeFunction<_c_DrawCircleV>>('DrawCircleV');
  late final _dart_DrawCircleV _DrawCircleV =
      _DrawCircleV_ptr.asFunction<_dart_DrawCircleV>();

  void DrawCircleLines(
    int centerX,
    int centerY,
    double radius,
    Color color,
  ) {
    return _DrawCircleLines(
      centerX,
      centerY,
      radius,
      color,
    );
  }

  late final _DrawCircleLines_ptr =
      _lookup<ffi.NativeFunction<_c_DrawCircleLines>>('DrawCircleLines');
  late final _dart_DrawCircleLines _DrawCircleLines =
      _DrawCircleLines_ptr.asFunction<_dart_DrawCircleLines>();

  void DrawEllipse(
    int centerX,
    int centerY,
    double radiusH,
    double radiusV,
    Color color,
  ) {
    return _DrawEllipse(
      centerX,
      centerY,
      radiusH,
      radiusV,
      color,
    );
  }

  late final _DrawEllipse_ptr =
      _lookup<ffi.NativeFunction<_c_DrawEllipse>>('DrawEllipse');
  late final _dart_DrawEllipse _DrawEllipse =
      _DrawEllipse_ptr.asFunction<_dart_DrawEllipse>();

  void DrawEllipseLines(
    int centerX,
    int centerY,
    double radiusH,
    double radiusV,
    Color color,
  ) {
    return _DrawEllipseLines(
      centerX,
      centerY,
      radiusH,
      radiusV,
      color,
    );
  }

  late final _DrawEllipseLines_ptr =
      _lookup<ffi.NativeFunction<_c_DrawEllipseLines>>('DrawEllipseLines');
  late final _dart_DrawEllipseLines _DrawEllipseLines =
      _DrawEllipseLines_ptr.asFunction<_dart_DrawEllipseLines>();

  void DrawRing(
    Vector2 center,
    double innerRadius,
    double outerRadius,
    double startAngle,
    double endAngle,
    int segments,
    Color color,
  ) {
    return _DrawRing(
      center,
      innerRadius,
      outerRadius,
      startAngle,
      endAngle,
      segments,
      color,
    );
  }

  late final _DrawRing_ptr =
      _lookup<ffi.NativeFunction<_c_DrawRing>>('DrawRing');
  late final _dart_DrawRing _DrawRing =
      _DrawRing_ptr.asFunction<_dart_DrawRing>();

  void DrawRingLines(
    Vector2 center,
    double innerRadius,
    double outerRadius,
    double startAngle,
    double endAngle,
    int segments,
    Color color,
  ) {
    return _DrawRingLines(
      center,
      innerRadius,
      outerRadius,
      startAngle,
      endAngle,
      segments,
      color,
    );
  }

  late final _DrawRingLines_ptr =
      _lookup<ffi.NativeFunction<_c_DrawRingLines>>('DrawRingLines');
  late final _dart_DrawRingLines _DrawRingLines =
      _DrawRingLines_ptr.asFunction<_dart_DrawRingLines>();

  void DrawRectangle(
    int posX,
    int posY,
    int width,
    int height,
    Color color,
  ) {
    return _DrawRectangle(
      posX,
      posY,
      width,
      height,
      color,
    );
  }

  late final _DrawRectangle_ptr =
      _lookup<ffi.NativeFunction<_c_DrawRectangle>>('DrawRectangle');
  late final _dart_DrawRectangle _DrawRectangle =
      _DrawRectangle_ptr.asFunction<_dart_DrawRectangle>();

  void DrawRectangleV(
    Vector2 position,
    Vector2 size,
    Color color,
  ) {
    return _DrawRectangleV(
      position,
      size,
      color,
    );
  }

  late final _DrawRectangleV_ptr =
      _lookup<ffi.NativeFunction<_c_DrawRectangleV>>('DrawRectangleV');
  late final _dart_DrawRectangleV _DrawRectangleV =
      _DrawRectangleV_ptr.asFunction<_dart_DrawRectangleV>();

  void DrawRectangleRec(
    Rectangle rec,
    Color color,
  ) {
    return _DrawRectangleRec(
      rec,
      color,
    );
  }

  late final _DrawRectangleRec_ptr =
      _lookup<ffi.NativeFunction<_c_DrawRectangleRec>>('DrawRectangleRec');
  late final _dart_DrawRectangleRec _DrawRectangleRec =
      _DrawRectangleRec_ptr.asFunction<_dart_DrawRectangleRec>();

  void DrawRectanglePro(
    Rectangle rec,
    Vector2 origin,
    double rotation,
    Color color,
  ) {
    return _DrawRectanglePro(
      rec,
      origin,
      rotation,
      color,
    );
  }

  late final _DrawRectanglePro_ptr =
      _lookup<ffi.NativeFunction<_c_DrawRectanglePro>>('DrawRectanglePro');
  late final _dart_DrawRectanglePro _DrawRectanglePro =
      _DrawRectanglePro_ptr.asFunction<_dart_DrawRectanglePro>();

  void DrawRectangleGradientV(
    int posX,
    int posY,
    int width,
    int height,
    Color color1,
    Color color2,
  ) {
    return _DrawRectangleGradientV(
      posX,
      posY,
      width,
      height,
      color1,
      color2,
    );
  }

  late final _DrawRectangleGradientV_ptr =
      _lookup<ffi.NativeFunction<_c_DrawRectangleGradientV>>(
          'DrawRectangleGradientV');
  late final _dart_DrawRectangleGradientV _DrawRectangleGradientV =
      _DrawRectangleGradientV_ptr.asFunction<_dart_DrawRectangleGradientV>();

  void DrawRectangleGradientH(
    int posX,
    int posY,
    int width,
    int height,
    Color color1,
    Color color2,
  ) {
    return _DrawRectangleGradientH(
      posX,
      posY,
      width,
      height,
      color1,
      color2,
    );
  }

  late final _DrawRectangleGradientH_ptr =
      _lookup<ffi.NativeFunction<_c_DrawRectangleGradientH>>(
          'DrawRectangleGradientH');
  late final _dart_DrawRectangleGradientH _DrawRectangleGradientH =
      _DrawRectangleGradientH_ptr.asFunction<_dart_DrawRectangleGradientH>();

  void DrawRectangleGradientEx(
    Rectangle rec,
    Color col1,
    Color col2,
    Color col3,
    Color col4,
  ) {
    return _DrawRectangleGradientEx(
      rec,
      col1,
      col2,
      col3,
      col4,
    );
  }

  late final _DrawRectangleGradientEx_ptr =
      _lookup<ffi.NativeFunction<_c_DrawRectangleGradientEx>>(
          'DrawRectangleGradientEx');
  late final _dart_DrawRectangleGradientEx _DrawRectangleGradientEx =
      _DrawRectangleGradientEx_ptr.asFunction<_dart_DrawRectangleGradientEx>();

  void DrawRectangleLines(
    int posX,
    int posY,
    int width,
    int height,
    Color color,
  ) {
    return _DrawRectangleLines(
      posX,
      posY,
      width,
      height,
      color,
    );
  }

  late final _DrawRectangleLines_ptr =
      _lookup<ffi.NativeFunction<_c_DrawRectangleLines>>('DrawRectangleLines');
  late final _dart_DrawRectangleLines _DrawRectangleLines =
      _DrawRectangleLines_ptr.asFunction<_dart_DrawRectangleLines>();

  void DrawRectangleLinesEx(
    Rectangle rec,
    double lineThick,
    Color color,
  ) {
    return _DrawRectangleLinesEx(
      rec,
      lineThick,
      color,
    );
  }

  late final _DrawRectangleLinesEx_ptr =
      _lookup<ffi.NativeFunction<_c_DrawRectangleLinesEx>>(
          'DrawRectangleLinesEx');
  late final _dart_DrawRectangleLinesEx _DrawRectangleLinesEx =
      _DrawRectangleLinesEx_ptr.asFunction<_dart_DrawRectangleLinesEx>();

  void DrawRectangleRounded(
    Rectangle rec,
    double roundness,
    int segments,
    Color color,
  ) {
    return _DrawRectangleRounded(
      rec,
      roundness,
      segments,
      color,
    );
  }

  late final _DrawRectangleRounded_ptr =
      _lookup<ffi.NativeFunction<_c_DrawRectangleRounded>>(
          'DrawRectangleRounded');
  late final _dart_DrawRectangleRounded _DrawRectangleRounded =
      _DrawRectangleRounded_ptr.asFunction<_dart_DrawRectangleRounded>();

  void DrawRectangleRoundedLines(
    Rectangle rec,
    double roundness,
    int segments,
    double lineThick,
    Color color,
  ) {
    return _DrawRectangleRoundedLines(
      rec,
      roundness,
      segments,
      lineThick,
      color,
    );
  }

  late final _DrawRectangleRoundedLines_ptr =
      _lookup<ffi.NativeFunction<_c_DrawRectangleRoundedLines>>(
          'DrawRectangleRoundedLines');
  late final _dart_DrawRectangleRoundedLines _DrawRectangleRoundedLines =
      _DrawRectangleRoundedLines_ptr.asFunction<
          _dart_DrawRectangleRoundedLines>();

  void DrawTriangle(
    Vector2 v1,
    Vector2 v2,
    Vector2 v3,
    Color color,
  ) {
    return _DrawTriangle(
      v1,
      v2,
      v3,
      color,
    );
  }

  late final _DrawTriangle_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTriangle>>('DrawTriangle');
  late final _dart_DrawTriangle _DrawTriangle =
      _DrawTriangle_ptr.asFunction<_dart_DrawTriangle>();

  void DrawTriangleLines(
    Vector2 v1,
    Vector2 v2,
    Vector2 v3,
    Color color,
  ) {
    return _DrawTriangleLines(
      v1,
      v2,
      v3,
      color,
    );
  }

  late final _DrawTriangleLines_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTriangleLines>>('DrawTriangleLines');
  late final _dart_DrawTriangleLines _DrawTriangleLines =
      _DrawTriangleLines_ptr.asFunction<_dart_DrawTriangleLines>();

  void DrawTriangleFan(
    ffi.Pointer<Vector2> points,
    int pointCount,
    Color color,
  ) {
    return _DrawTriangleFan(
      points,
      pointCount,
      color,
    );
  }

  late final _DrawTriangleFan_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTriangleFan>>('DrawTriangleFan');
  late final _dart_DrawTriangleFan _DrawTriangleFan =
      _DrawTriangleFan_ptr.asFunction<_dart_DrawTriangleFan>();

  void DrawTriangleStrip(
    ffi.Pointer<Vector2> points,
    int pointCount,
    Color color,
  ) {
    return _DrawTriangleStrip(
      points,
      pointCount,
      color,
    );
  }

  late final _DrawTriangleStrip_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTriangleStrip>>('DrawTriangleStrip');
  late final _dart_DrawTriangleStrip _DrawTriangleStrip =
      _DrawTriangleStrip_ptr.asFunction<_dart_DrawTriangleStrip>();

  void DrawPoly(
    Vector2 center,
    int sides,
    double radius,
    double rotation,
    Color color,
  ) {
    return _DrawPoly(
      center,
      sides,
      radius,
      rotation,
      color,
    );
  }

  late final _DrawPoly_ptr =
      _lookup<ffi.NativeFunction<_c_DrawPoly>>('DrawPoly');
  late final _dart_DrawPoly _DrawPoly =
      _DrawPoly_ptr.asFunction<_dart_DrawPoly>();

  void DrawPolyLines(
    Vector2 center,
    int sides,
    double radius,
    double rotation,
    Color color,
  ) {
    return _DrawPolyLines(
      center,
      sides,
      radius,
      rotation,
      color,
    );
  }

  late final _DrawPolyLines_ptr =
      _lookup<ffi.NativeFunction<_c_DrawPolyLines>>('DrawPolyLines');
  late final _dart_DrawPolyLines _DrawPolyLines =
      _DrawPolyLines_ptr.asFunction<_dart_DrawPolyLines>();

  void DrawPolyLinesEx(
    Vector2 center,
    int sides,
    double radius,
    double rotation,
    double lineThick,
    Color color,
  ) {
    return _DrawPolyLinesEx(
      center,
      sides,
      radius,
      rotation,
      lineThick,
      color,
    );
  }

  late final _DrawPolyLinesEx_ptr =
      _lookup<ffi.NativeFunction<_c_DrawPolyLinesEx>>('DrawPolyLinesEx');
  late final _dart_DrawPolyLinesEx _DrawPolyLinesEx =
      _DrawPolyLinesEx_ptr.asFunction<_dart_DrawPolyLinesEx>();

  /// Basic shapes collision detection functions
  int CheckCollisionRecs(
    Rectangle rec1,
    Rectangle rec2,
  ) {
    return _CheckCollisionRecs(
      rec1,
      rec2,
    );
  }

  late final _CheckCollisionRecs_ptr =
      _lookup<ffi.NativeFunction<_c_CheckCollisionRecs>>('CheckCollisionRecs');
  late final _dart_CheckCollisionRecs _CheckCollisionRecs =
      _CheckCollisionRecs_ptr.asFunction<_dart_CheckCollisionRecs>();

  int CheckCollisionCircles(
    Vector2 center1,
    double radius1,
    Vector2 center2,
    double radius2,
  ) {
    return _CheckCollisionCircles(
      center1,
      radius1,
      center2,
      radius2,
    );
  }

  late final _CheckCollisionCircles_ptr =
      _lookup<ffi.NativeFunction<_c_CheckCollisionCircles>>(
          'CheckCollisionCircles');
  late final _dart_CheckCollisionCircles _CheckCollisionCircles =
      _CheckCollisionCircles_ptr.asFunction<_dart_CheckCollisionCircles>();

  int CheckCollisionCircleRec(
    Vector2 center,
    double radius,
    Rectangle rec,
  ) {
    return _CheckCollisionCircleRec(
      center,
      radius,
      rec,
    );
  }

  late final _CheckCollisionCircleRec_ptr =
      _lookup<ffi.NativeFunction<_c_CheckCollisionCircleRec>>(
          'CheckCollisionCircleRec');
  late final _dart_CheckCollisionCircleRec _CheckCollisionCircleRec =
      _CheckCollisionCircleRec_ptr.asFunction<_dart_CheckCollisionCircleRec>();

  int CheckCollisionPointRec(
    Vector2 point,
    Rectangle rec,
  ) {
    return _CheckCollisionPointRec(
      point,
      rec,
    );
  }

  late final _CheckCollisionPointRec_ptr =
      _lookup<ffi.NativeFunction<_c_CheckCollisionPointRec>>(
          'CheckCollisionPointRec');
  late final _dart_CheckCollisionPointRec _CheckCollisionPointRec =
      _CheckCollisionPointRec_ptr.asFunction<_dart_CheckCollisionPointRec>();

  int CheckCollisionPointCircle(
    Vector2 point,
    Vector2 center,
    double radius,
  ) {
    return _CheckCollisionPointCircle(
      point,
      center,
      radius,
    );
  }

  late final _CheckCollisionPointCircle_ptr =
      _lookup<ffi.NativeFunction<_c_CheckCollisionPointCircle>>(
          'CheckCollisionPointCircle');
  late final _dart_CheckCollisionPointCircle _CheckCollisionPointCircle =
      _CheckCollisionPointCircle_ptr.asFunction<
          _dart_CheckCollisionPointCircle>();

  int CheckCollisionPointTriangle(
    Vector2 point,
    Vector2 p1,
    Vector2 p2,
    Vector2 p3,
  ) {
    return _CheckCollisionPointTriangle(
      point,
      p1,
      p2,
      p3,
    );
  }

  late final _CheckCollisionPointTriangle_ptr =
      _lookup<ffi.NativeFunction<_c_CheckCollisionPointTriangle>>(
          'CheckCollisionPointTriangle');
  late final _dart_CheckCollisionPointTriangle _CheckCollisionPointTriangle =
      _CheckCollisionPointTriangle_ptr.asFunction<
          _dart_CheckCollisionPointTriangle>();

  int CheckCollisionLines(
    Vector2 startPos1,
    Vector2 endPos1,
    Vector2 startPos2,
    Vector2 endPos2,
    ffi.Pointer<Vector2> collisionPoint,
  ) {
    return _CheckCollisionLines(
      startPos1,
      endPos1,
      startPos2,
      endPos2,
      collisionPoint,
    );
  }

  late final _CheckCollisionLines_ptr =
      _lookup<ffi.NativeFunction<_c_CheckCollisionLines>>(
          'CheckCollisionLines');
  late final _dart_CheckCollisionLines _CheckCollisionLines =
      _CheckCollisionLines_ptr.asFunction<_dart_CheckCollisionLines>();

  int CheckCollisionPointLine(
    Vector2 point,
    Vector2 p1,
    Vector2 p2,
    int threshold,
  ) {
    return _CheckCollisionPointLine(
      point,
      p1,
      p2,
      threshold,
    );
  }

  late final _CheckCollisionPointLine_ptr =
      _lookup<ffi.NativeFunction<_c_CheckCollisionPointLine>>(
          'CheckCollisionPointLine');
  late final _dart_CheckCollisionPointLine _CheckCollisionPointLine =
      _CheckCollisionPointLine_ptr.asFunction<_dart_CheckCollisionPointLine>();

  Rectangle GetCollisionRec(
    Rectangle rec1,
    Rectangle rec2,
  ) {
    return _GetCollisionRec(
      rec1,
      rec2,
    );
  }

  late final _GetCollisionRec_ptr =
      _lookup<ffi.NativeFunction<_c_GetCollisionRec>>('GetCollisionRec');
  late final _dart_GetCollisionRec _GetCollisionRec =
      _GetCollisionRec_ptr.asFunction<_dart_GetCollisionRec>();

  /// Image loading functions
  /// NOTE: This functions do not require GPU access
  Image LoadImage(
    ffi.Pointer<ffi.Int8> fileName,
  ) {
    return _LoadImage(
      fileName,
    );
  }

  late final _LoadImage_ptr =
      _lookup<ffi.NativeFunction<_c_LoadImage>>('LoadImage');
  late final _dart_LoadImage _LoadImage =
      _LoadImage_ptr.asFunction<_dart_LoadImage>();

  Image LoadImageRaw(
    ffi.Pointer<ffi.Int8> fileName,
    int width,
    int height,
    int format,
    int headerSize,
  ) {
    return _LoadImageRaw(
      fileName,
      width,
      height,
      format,
      headerSize,
    );
  }

  late final _LoadImageRaw_ptr =
      _lookup<ffi.NativeFunction<_c_LoadImageRaw>>('LoadImageRaw');
  late final _dart_LoadImageRaw _LoadImageRaw =
      _LoadImageRaw_ptr.asFunction<_dart_LoadImageRaw>();

  Image LoadImageAnim(
    ffi.Pointer<ffi.Int8> fileName,
    ffi.Pointer<ffi.Int32> frames,
  ) {
    return _LoadImageAnim(
      fileName,
      frames,
    );
  }

  late final _LoadImageAnim_ptr =
      _lookup<ffi.NativeFunction<_c_LoadImageAnim>>('LoadImageAnim');
  late final _dart_LoadImageAnim _LoadImageAnim =
      _LoadImageAnim_ptr.asFunction<_dart_LoadImageAnim>();

  Image LoadImageFromMemory(
    ffi.Pointer<ffi.Int8> fileType,
    ffi.Pointer<ffi.Uint8> fileData,
    int dataSize,
  ) {
    return _LoadImageFromMemory(
      fileType,
      fileData,
      dataSize,
    );
  }

  late final _LoadImageFromMemory_ptr =
      _lookup<ffi.NativeFunction<_c_LoadImageFromMemory>>(
          'LoadImageFromMemory');
  late final _dart_LoadImageFromMemory _LoadImageFromMemory =
      _LoadImageFromMemory_ptr.asFunction<_dart_LoadImageFromMemory>();

  Image LoadImageFromTexture(
    Texture texture,
  ) {
    return _LoadImageFromTexture(
      texture,
    );
  }

  late final _LoadImageFromTexture_ptr =
      _lookup<ffi.NativeFunction<_c_LoadImageFromTexture>>(
          'LoadImageFromTexture');
  late final _dart_LoadImageFromTexture _LoadImageFromTexture =
      _LoadImageFromTexture_ptr.asFunction<_dart_LoadImageFromTexture>();

  Image LoadImageFromScreen() {
    return _LoadImageFromScreen();
  }

  late final _LoadImageFromScreen_ptr =
      _lookup<ffi.NativeFunction<_c_LoadImageFromScreen>>(
          'LoadImageFromScreen');
  late final _dart_LoadImageFromScreen _LoadImageFromScreen =
      _LoadImageFromScreen_ptr.asFunction<_dart_LoadImageFromScreen>();

  void UnloadImage(
    Image image,
  ) {
    return _UnloadImage(
      image,
    );
  }

  late final _UnloadImage_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadImage>>('UnloadImage');
  late final _dart_UnloadImage _UnloadImage =
      _UnloadImage_ptr.asFunction<_dart_UnloadImage>();

  int ExportImage(
    Image image,
    ffi.Pointer<ffi.Int8> fileName,
  ) {
    return _ExportImage(
      image,
      fileName,
    );
  }

  late final _ExportImage_ptr =
      _lookup<ffi.NativeFunction<_c_ExportImage>>('ExportImage');
  late final _dart_ExportImage _ExportImage =
      _ExportImage_ptr.asFunction<_dart_ExportImage>();

  int ExportImageAsCode(
    Image image,
    ffi.Pointer<ffi.Int8> fileName,
  ) {
    return _ExportImageAsCode(
      image,
      fileName,
    );
  }

  late final _ExportImageAsCode_ptr =
      _lookup<ffi.NativeFunction<_c_ExportImageAsCode>>('ExportImageAsCode');
  late final _dart_ExportImageAsCode _ExportImageAsCode =
      _ExportImageAsCode_ptr.asFunction<_dart_ExportImageAsCode>();

  /// Image generation functions
  Image GenImageColor(
    int width,
    int height,
    Color color,
  ) {
    return _GenImageColor(
      width,
      height,
      color,
    );
  }

  late final _GenImageColor_ptr =
      _lookup<ffi.NativeFunction<_c_GenImageColor>>('GenImageColor');
  late final _dart_GenImageColor _GenImageColor =
      _GenImageColor_ptr.asFunction<_dart_GenImageColor>();

  Image GenImageGradientV(
    int width,
    int height,
    Color top,
    Color bottom,
  ) {
    return _GenImageGradientV(
      width,
      height,
      top,
      bottom,
    );
  }

  late final _GenImageGradientV_ptr =
      _lookup<ffi.NativeFunction<_c_GenImageGradientV>>('GenImageGradientV');
  late final _dart_GenImageGradientV _GenImageGradientV =
      _GenImageGradientV_ptr.asFunction<_dart_GenImageGradientV>();

  Image GenImageGradientH(
    int width,
    int height,
    Color left,
    Color right,
  ) {
    return _GenImageGradientH(
      width,
      height,
      left,
      right,
    );
  }

  late final _GenImageGradientH_ptr =
      _lookup<ffi.NativeFunction<_c_GenImageGradientH>>('GenImageGradientH');
  late final _dart_GenImageGradientH _GenImageGradientH =
      _GenImageGradientH_ptr.asFunction<_dart_GenImageGradientH>();

  Image GenImageGradientRadial(
    int width,
    int height,
    double density,
    Color inner,
    Color outer,
  ) {
    return _GenImageGradientRadial(
      width,
      height,
      density,
      inner,
      outer,
    );
  }

  late final _GenImageGradientRadial_ptr =
      _lookup<ffi.NativeFunction<_c_GenImageGradientRadial>>(
          'GenImageGradientRadial');
  late final _dart_GenImageGradientRadial _GenImageGradientRadial =
      _GenImageGradientRadial_ptr.asFunction<_dart_GenImageGradientRadial>();

  Image GenImageChecked(
    int width,
    int height,
    int checksX,
    int checksY,
    Color col1,
    Color col2,
  ) {
    return _GenImageChecked(
      width,
      height,
      checksX,
      checksY,
      col1,
      col2,
    );
  }

  late final _GenImageChecked_ptr =
      _lookup<ffi.NativeFunction<_c_GenImageChecked>>('GenImageChecked');
  late final _dart_GenImageChecked _GenImageChecked =
      _GenImageChecked_ptr.asFunction<_dart_GenImageChecked>();

  Image GenImageWhiteNoise(
    int width,
    int height,
    double factor,
  ) {
    return _GenImageWhiteNoise(
      width,
      height,
      factor,
    );
  }

  late final _GenImageWhiteNoise_ptr =
      _lookup<ffi.NativeFunction<_c_GenImageWhiteNoise>>('GenImageWhiteNoise');
  late final _dart_GenImageWhiteNoise _GenImageWhiteNoise =
      _GenImageWhiteNoise_ptr.asFunction<_dart_GenImageWhiteNoise>();

  Image GenImageCellular(
    int width,
    int height,
    int tileSize,
  ) {
    return _GenImageCellular(
      width,
      height,
      tileSize,
    );
  }

  late final _GenImageCellular_ptr =
      _lookup<ffi.NativeFunction<_c_GenImageCellular>>('GenImageCellular');
  late final _dart_GenImageCellular _GenImageCellular =
      _GenImageCellular_ptr.asFunction<_dart_GenImageCellular>();

  /// Image manipulation functions
  Image ImageCopy(
    Image image,
  ) {
    return _ImageCopy(
      image,
    );
  }

  late final _ImageCopy_ptr =
      _lookup<ffi.NativeFunction<_c_ImageCopy>>('ImageCopy');
  late final _dart_ImageCopy _ImageCopy =
      _ImageCopy_ptr.asFunction<_dart_ImageCopy>();

  Image ImageFromImage(
    Image image,
    Rectangle rec,
  ) {
    return _ImageFromImage(
      image,
      rec,
    );
  }

  late final _ImageFromImage_ptr =
      _lookup<ffi.NativeFunction<_c_ImageFromImage>>('ImageFromImage');
  late final _dart_ImageFromImage _ImageFromImage =
      _ImageFromImage_ptr.asFunction<_dart_ImageFromImage>();

  Image ImageText(
    ffi.Pointer<ffi.Int8> text,
    int fontSize,
    Color color,
  ) {
    return _ImageText(
      text,
      fontSize,
      color,
    );
  }

  late final _ImageText_ptr =
      _lookup<ffi.NativeFunction<_c_ImageText>>('ImageText');
  late final _dart_ImageText _ImageText =
      _ImageText_ptr.asFunction<_dart_ImageText>();

  Image ImageTextEx(
    Font font,
    ffi.Pointer<ffi.Int8> text,
    double fontSize,
    double spacing,
    Color tint,
  ) {
    return _ImageTextEx(
      font,
      text,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _ImageTextEx_ptr =
      _lookup<ffi.NativeFunction<_c_ImageTextEx>>('ImageTextEx');
  late final _dart_ImageTextEx _ImageTextEx =
      _ImageTextEx_ptr.asFunction<_dart_ImageTextEx>();

  void ImageFormat(
    ffi.Pointer<Image> image,
    int newFormat,
  ) {
    return _ImageFormat(
      image,
      newFormat,
    );
  }

  late final _ImageFormat_ptr =
      _lookup<ffi.NativeFunction<_c_ImageFormat>>('ImageFormat');
  late final _dart_ImageFormat _ImageFormat =
      _ImageFormat_ptr.asFunction<_dart_ImageFormat>();

  void ImageToPOT(
    ffi.Pointer<Image> image,
    Color fill,
  ) {
    return _ImageToPOT(
      image,
      fill,
    );
  }

  late final _ImageToPOT_ptr =
      _lookup<ffi.NativeFunction<_c_ImageToPOT>>('ImageToPOT');
  late final _dart_ImageToPOT _ImageToPOT =
      _ImageToPOT_ptr.asFunction<_dart_ImageToPOT>();

  void ImageCrop(
    ffi.Pointer<Image> image,
    Rectangle crop,
  ) {
    return _ImageCrop(
      image,
      crop,
    );
  }

  late final _ImageCrop_ptr =
      _lookup<ffi.NativeFunction<_c_ImageCrop>>('ImageCrop');
  late final _dart_ImageCrop _ImageCrop =
      _ImageCrop_ptr.asFunction<_dart_ImageCrop>();

  void ImageAlphaCrop(
    ffi.Pointer<Image> image,
    double threshold,
  ) {
    return _ImageAlphaCrop(
      image,
      threshold,
    );
  }

  late final _ImageAlphaCrop_ptr =
      _lookup<ffi.NativeFunction<_c_ImageAlphaCrop>>('ImageAlphaCrop');
  late final _dart_ImageAlphaCrop _ImageAlphaCrop =
      _ImageAlphaCrop_ptr.asFunction<_dart_ImageAlphaCrop>();

  void ImageAlphaClear(
    ffi.Pointer<Image> image,
    Color color,
    double threshold,
  ) {
    return _ImageAlphaClear(
      image,
      color,
      threshold,
    );
  }

  late final _ImageAlphaClear_ptr =
      _lookup<ffi.NativeFunction<_c_ImageAlphaClear>>('ImageAlphaClear');
  late final _dart_ImageAlphaClear _ImageAlphaClear =
      _ImageAlphaClear_ptr.asFunction<_dart_ImageAlphaClear>();

  void ImageAlphaMask(
    ffi.Pointer<Image> image,
    Image alphaMask,
  ) {
    return _ImageAlphaMask(
      image,
      alphaMask,
    );
  }

  late final _ImageAlphaMask_ptr =
      _lookup<ffi.NativeFunction<_c_ImageAlphaMask>>('ImageAlphaMask');
  late final _dart_ImageAlphaMask _ImageAlphaMask =
      _ImageAlphaMask_ptr.asFunction<_dart_ImageAlphaMask>();

  void ImageAlphaPremultiply(
    ffi.Pointer<Image> image,
  ) {
    return _ImageAlphaPremultiply(
      image,
    );
  }

  late final _ImageAlphaPremultiply_ptr =
      _lookup<ffi.NativeFunction<_c_ImageAlphaPremultiply>>(
          'ImageAlphaPremultiply');
  late final _dart_ImageAlphaPremultiply _ImageAlphaPremultiply =
      _ImageAlphaPremultiply_ptr.asFunction<_dart_ImageAlphaPremultiply>();

  void ImageResize(
    ffi.Pointer<Image> image,
    int newWidth,
    int newHeight,
  ) {
    return _ImageResize(
      image,
      newWidth,
      newHeight,
    );
  }

  late final _ImageResize_ptr =
      _lookup<ffi.NativeFunction<_c_ImageResize>>('ImageResize');
  late final _dart_ImageResize _ImageResize =
      _ImageResize_ptr.asFunction<_dart_ImageResize>();

  void ImageResizeNN(
    ffi.Pointer<Image> image,
    int newWidth,
    int newHeight,
  ) {
    return _ImageResizeNN(
      image,
      newWidth,
      newHeight,
    );
  }

  late final _ImageResizeNN_ptr =
      _lookup<ffi.NativeFunction<_c_ImageResizeNN>>('ImageResizeNN');
  late final _dart_ImageResizeNN _ImageResizeNN =
      _ImageResizeNN_ptr.asFunction<_dart_ImageResizeNN>();

  void ImageResizeCanvas(
    ffi.Pointer<Image> image,
    int newWidth,
    int newHeight,
    int offsetX,
    int offsetY,
    Color fill,
  ) {
    return _ImageResizeCanvas(
      image,
      newWidth,
      newHeight,
      offsetX,
      offsetY,
      fill,
    );
  }

  late final _ImageResizeCanvas_ptr =
      _lookup<ffi.NativeFunction<_c_ImageResizeCanvas>>('ImageResizeCanvas');
  late final _dart_ImageResizeCanvas _ImageResizeCanvas =
      _ImageResizeCanvas_ptr.asFunction<_dart_ImageResizeCanvas>();

  void ImageMipmaps(
    ffi.Pointer<Image> image,
  ) {
    return _ImageMipmaps(
      image,
    );
  }

  late final _ImageMipmaps_ptr =
      _lookup<ffi.NativeFunction<_c_ImageMipmaps>>('ImageMipmaps');
  late final _dart_ImageMipmaps _ImageMipmaps =
      _ImageMipmaps_ptr.asFunction<_dart_ImageMipmaps>();

  void ImageDither(
    ffi.Pointer<Image> image,
    int rBpp,
    int gBpp,
    int bBpp,
    int aBpp,
  ) {
    return _ImageDither(
      image,
      rBpp,
      gBpp,
      bBpp,
      aBpp,
    );
  }

  late final _ImageDither_ptr =
      _lookup<ffi.NativeFunction<_c_ImageDither>>('ImageDither');
  late final _dart_ImageDither _ImageDither =
      _ImageDither_ptr.asFunction<_dart_ImageDither>();

  void ImageFlipVertical(
    ffi.Pointer<Image> image,
  ) {
    return _ImageFlipVertical(
      image,
    );
  }

  late final _ImageFlipVertical_ptr =
      _lookup<ffi.NativeFunction<_c_ImageFlipVertical>>('ImageFlipVertical');
  late final _dart_ImageFlipVertical _ImageFlipVertical =
      _ImageFlipVertical_ptr.asFunction<_dart_ImageFlipVertical>();

  void ImageFlipHorizontal(
    ffi.Pointer<Image> image,
  ) {
    return _ImageFlipHorizontal(
      image,
    );
  }

  late final _ImageFlipHorizontal_ptr =
      _lookup<ffi.NativeFunction<_c_ImageFlipHorizontal>>(
          'ImageFlipHorizontal');
  late final _dart_ImageFlipHorizontal _ImageFlipHorizontal =
      _ImageFlipHorizontal_ptr.asFunction<_dart_ImageFlipHorizontal>();

  void ImageRotateCW(
    ffi.Pointer<Image> image,
  ) {
    return _ImageRotateCW(
      image,
    );
  }

  late final _ImageRotateCW_ptr =
      _lookup<ffi.NativeFunction<_c_ImageRotateCW>>('ImageRotateCW');
  late final _dart_ImageRotateCW _ImageRotateCW =
      _ImageRotateCW_ptr.asFunction<_dart_ImageRotateCW>();

  void ImageRotateCCW(
    ffi.Pointer<Image> image,
  ) {
    return _ImageRotateCCW(
      image,
    );
  }

  late final _ImageRotateCCW_ptr =
      _lookup<ffi.NativeFunction<_c_ImageRotateCCW>>('ImageRotateCCW');
  late final _dart_ImageRotateCCW _ImageRotateCCW =
      _ImageRotateCCW_ptr.asFunction<_dart_ImageRotateCCW>();

  void ImageColorTint(
    ffi.Pointer<Image> image,
    Color color,
  ) {
    return _ImageColorTint(
      image,
      color,
    );
  }

  late final _ImageColorTint_ptr =
      _lookup<ffi.NativeFunction<_c_ImageColorTint>>('ImageColorTint');
  late final _dart_ImageColorTint _ImageColorTint =
      _ImageColorTint_ptr.asFunction<_dart_ImageColorTint>();

  void ImageColorInvert(
    ffi.Pointer<Image> image,
  ) {
    return _ImageColorInvert(
      image,
    );
  }

  late final _ImageColorInvert_ptr =
      _lookup<ffi.NativeFunction<_c_ImageColorInvert>>('ImageColorInvert');
  late final _dart_ImageColorInvert _ImageColorInvert =
      _ImageColorInvert_ptr.asFunction<_dart_ImageColorInvert>();

  void ImageColorGrayscale(
    ffi.Pointer<Image> image,
  ) {
    return _ImageColorGrayscale(
      image,
    );
  }

  late final _ImageColorGrayscale_ptr =
      _lookup<ffi.NativeFunction<_c_ImageColorGrayscale>>(
          'ImageColorGrayscale');
  late final _dart_ImageColorGrayscale _ImageColorGrayscale =
      _ImageColorGrayscale_ptr.asFunction<_dart_ImageColorGrayscale>();

  void ImageColorContrast(
    ffi.Pointer<Image> image,
    double contrast,
  ) {
    return _ImageColorContrast(
      image,
      contrast,
    );
  }

  late final _ImageColorContrast_ptr =
      _lookup<ffi.NativeFunction<_c_ImageColorContrast>>('ImageColorContrast');
  late final _dart_ImageColorContrast _ImageColorContrast =
      _ImageColorContrast_ptr.asFunction<_dart_ImageColorContrast>();

  void ImageColorBrightness(
    ffi.Pointer<Image> image,
    int brightness,
  ) {
    return _ImageColorBrightness(
      image,
      brightness,
    );
  }

  late final _ImageColorBrightness_ptr =
      _lookup<ffi.NativeFunction<_c_ImageColorBrightness>>(
          'ImageColorBrightness');
  late final _dart_ImageColorBrightness _ImageColorBrightness =
      _ImageColorBrightness_ptr.asFunction<_dart_ImageColorBrightness>();

  void ImageColorReplace(
    ffi.Pointer<Image> image,
    Color color,
    Color replace,
  ) {
    return _ImageColorReplace(
      image,
      color,
      replace,
    );
  }

  late final _ImageColorReplace_ptr =
      _lookup<ffi.NativeFunction<_c_ImageColorReplace>>('ImageColorReplace');
  late final _dart_ImageColorReplace _ImageColorReplace =
      _ImageColorReplace_ptr.asFunction<_dart_ImageColorReplace>();

  ffi.Pointer<Color> LoadImageColors(
    Image image,
  ) {
    return _LoadImageColors(
      image,
    );
  }

  late final _LoadImageColors_ptr =
      _lookup<ffi.NativeFunction<_c_LoadImageColors>>('LoadImageColors');
  late final _dart_LoadImageColors _LoadImageColors =
      _LoadImageColors_ptr.asFunction<_dart_LoadImageColors>();

  ffi.Pointer<Color> LoadImagePalette(
    Image image,
    int maxPaletteSize,
    ffi.Pointer<ffi.Int32> colorCount,
  ) {
    return _LoadImagePalette(
      image,
      maxPaletteSize,
      colorCount,
    );
  }

  late final _LoadImagePalette_ptr =
      _lookup<ffi.NativeFunction<_c_LoadImagePalette>>('LoadImagePalette');
  late final _dart_LoadImagePalette _LoadImagePalette =
      _LoadImagePalette_ptr.asFunction<_dart_LoadImagePalette>();

  void UnloadImageColors(
    ffi.Pointer<Color> colors,
  ) {
    return _UnloadImageColors(
      colors,
    );
  }

  late final _UnloadImageColors_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadImageColors>>('UnloadImageColors');
  late final _dart_UnloadImageColors _UnloadImageColors =
      _UnloadImageColors_ptr.asFunction<_dart_UnloadImageColors>();

  void UnloadImagePalette(
    ffi.Pointer<Color> colors,
  ) {
    return _UnloadImagePalette(
      colors,
    );
  }

  late final _UnloadImagePalette_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadImagePalette>>('UnloadImagePalette');
  late final _dart_UnloadImagePalette _UnloadImagePalette =
      _UnloadImagePalette_ptr.asFunction<_dart_UnloadImagePalette>();

  Rectangle GetImageAlphaBorder(
    Image image,
    double threshold,
  ) {
    return _GetImageAlphaBorder(
      image,
      threshold,
    );
  }

  late final _GetImageAlphaBorder_ptr =
      _lookup<ffi.NativeFunction<_c_GetImageAlphaBorder>>(
          'GetImageAlphaBorder');
  late final _dart_GetImageAlphaBorder _GetImageAlphaBorder =
      _GetImageAlphaBorder_ptr.asFunction<_dart_GetImageAlphaBorder>();

  Color GetImageColor(
    Image image,
    int x,
    int y,
  ) {
    return _GetImageColor(
      image,
      x,
      y,
    );
  }

  late final _GetImageColor_ptr =
      _lookup<ffi.NativeFunction<_c_GetImageColor>>('GetImageColor');
  late final _dart_GetImageColor _GetImageColor =
      _GetImageColor_ptr.asFunction<_dart_GetImageColor>();

  /// Image drawing functions
  /// NOTE: Image software-rendering functions (CPU)
  void ImageClearBackground(
    ffi.Pointer<Image> dst,
    Color color,
  ) {
    return _ImageClearBackground(
      dst,
      color,
    );
  }

  late final _ImageClearBackground_ptr =
      _lookup<ffi.NativeFunction<_c_ImageClearBackground>>(
          'ImageClearBackground');
  late final _dart_ImageClearBackground _ImageClearBackground =
      _ImageClearBackground_ptr.asFunction<_dart_ImageClearBackground>();

  void ImageDrawPixel(
    ffi.Pointer<Image> dst,
    int posX,
    int posY,
    Color color,
  ) {
    return _ImageDrawPixel(
      dst,
      posX,
      posY,
      color,
    );
  }

  late final _ImageDrawPixel_ptr =
      _lookup<ffi.NativeFunction<_c_ImageDrawPixel>>('ImageDrawPixel');
  late final _dart_ImageDrawPixel _ImageDrawPixel =
      _ImageDrawPixel_ptr.asFunction<_dart_ImageDrawPixel>();

  void ImageDrawPixelV(
    ffi.Pointer<Image> dst,
    Vector2 position,
    Color color,
  ) {
    return _ImageDrawPixelV(
      dst,
      position,
      color,
    );
  }

  late final _ImageDrawPixelV_ptr =
      _lookup<ffi.NativeFunction<_c_ImageDrawPixelV>>('ImageDrawPixelV');
  late final _dart_ImageDrawPixelV _ImageDrawPixelV =
      _ImageDrawPixelV_ptr.asFunction<_dart_ImageDrawPixelV>();

  void ImageDrawLine(
    ffi.Pointer<Image> dst,
    int startPosX,
    int startPosY,
    int endPosX,
    int endPosY,
    Color color,
  ) {
    return _ImageDrawLine(
      dst,
      startPosX,
      startPosY,
      endPosX,
      endPosY,
      color,
    );
  }

  late final _ImageDrawLine_ptr =
      _lookup<ffi.NativeFunction<_c_ImageDrawLine>>('ImageDrawLine');
  late final _dart_ImageDrawLine _ImageDrawLine =
      _ImageDrawLine_ptr.asFunction<_dart_ImageDrawLine>();

  void ImageDrawLineV(
    ffi.Pointer<Image> dst,
    Vector2 start,
    Vector2 end,
    Color color,
  ) {
    return _ImageDrawLineV(
      dst,
      start,
      end,
      color,
    );
  }

  late final _ImageDrawLineV_ptr =
      _lookup<ffi.NativeFunction<_c_ImageDrawLineV>>('ImageDrawLineV');
  late final _dart_ImageDrawLineV _ImageDrawLineV =
      _ImageDrawLineV_ptr.asFunction<_dart_ImageDrawLineV>();

  void ImageDrawCircle(
    ffi.Pointer<Image> dst,
    int centerX,
    int centerY,
    int radius,
    Color color,
  ) {
    return _ImageDrawCircle(
      dst,
      centerX,
      centerY,
      radius,
      color,
    );
  }

  late final _ImageDrawCircle_ptr =
      _lookup<ffi.NativeFunction<_c_ImageDrawCircle>>('ImageDrawCircle');
  late final _dart_ImageDrawCircle _ImageDrawCircle =
      _ImageDrawCircle_ptr.asFunction<_dart_ImageDrawCircle>();

  void ImageDrawCircleV(
    ffi.Pointer<Image> dst,
    Vector2 center,
    int radius,
    Color color,
  ) {
    return _ImageDrawCircleV(
      dst,
      center,
      radius,
      color,
    );
  }

  late final _ImageDrawCircleV_ptr =
      _lookup<ffi.NativeFunction<_c_ImageDrawCircleV>>('ImageDrawCircleV');
  late final _dart_ImageDrawCircleV _ImageDrawCircleV =
      _ImageDrawCircleV_ptr.asFunction<_dart_ImageDrawCircleV>();

  void ImageDrawRectangle(
    ffi.Pointer<Image> dst,
    int posX,
    int posY,
    int width,
    int height,
    Color color,
  ) {
    return _ImageDrawRectangle(
      dst,
      posX,
      posY,
      width,
      height,
      color,
    );
  }

  late final _ImageDrawRectangle_ptr =
      _lookup<ffi.NativeFunction<_c_ImageDrawRectangle>>('ImageDrawRectangle');
  late final _dart_ImageDrawRectangle _ImageDrawRectangle =
      _ImageDrawRectangle_ptr.asFunction<_dart_ImageDrawRectangle>();

  void ImageDrawRectangleV(
    ffi.Pointer<Image> dst,
    Vector2 position,
    Vector2 size,
    Color color,
  ) {
    return _ImageDrawRectangleV(
      dst,
      position,
      size,
      color,
    );
  }

  late final _ImageDrawRectangleV_ptr =
      _lookup<ffi.NativeFunction<_c_ImageDrawRectangleV>>(
          'ImageDrawRectangleV');
  late final _dart_ImageDrawRectangleV _ImageDrawRectangleV =
      _ImageDrawRectangleV_ptr.asFunction<_dart_ImageDrawRectangleV>();

  void ImageDrawRectangleRec(
    ffi.Pointer<Image> dst,
    Rectangle rec,
    Color color,
  ) {
    return _ImageDrawRectangleRec(
      dst,
      rec,
      color,
    );
  }

  late final _ImageDrawRectangleRec_ptr =
      _lookup<ffi.NativeFunction<_c_ImageDrawRectangleRec>>(
          'ImageDrawRectangleRec');
  late final _dart_ImageDrawRectangleRec _ImageDrawRectangleRec =
      _ImageDrawRectangleRec_ptr.asFunction<_dart_ImageDrawRectangleRec>();

  void ImageDrawRectangleLines(
    ffi.Pointer<Image> dst,
    Rectangle rec,
    int thick,
    Color color,
  ) {
    return _ImageDrawRectangleLines(
      dst,
      rec,
      thick,
      color,
    );
  }

  late final _ImageDrawRectangleLines_ptr =
      _lookup<ffi.NativeFunction<_c_ImageDrawRectangleLines>>(
          'ImageDrawRectangleLines');
  late final _dart_ImageDrawRectangleLines _ImageDrawRectangleLines =
      _ImageDrawRectangleLines_ptr.asFunction<_dart_ImageDrawRectangleLines>();

  void ImageDraw(
    ffi.Pointer<Image> dst,
    Image src,
    Rectangle srcRec,
    Rectangle dstRec,
    Color tint,
  ) {
    return _ImageDraw(
      dst,
      src,
      srcRec,
      dstRec,
      tint,
    );
  }

  late final _ImageDraw_ptr =
      _lookup<ffi.NativeFunction<_c_ImageDraw>>('ImageDraw');
  late final _dart_ImageDraw _ImageDraw =
      _ImageDraw_ptr.asFunction<_dart_ImageDraw>();

  void ImageDrawText(
    ffi.Pointer<Image> dst,
    ffi.Pointer<ffi.Int8> text,
    int posX,
    int posY,
    int fontSize,
    Color color,
  ) {
    return _ImageDrawText(
      dst,
      text,
      posX,
      posY,
      fontSize,
      color,
    );
  }

  late final _ImageDrawText_ptr =
      _lookup<ffi.NativeFunction<_c_ImageDrawText>>('ImageDrawText');
  late final _dart_ImageDrawText _ImageDrawText =
      _ImageDrawText_ptr.asFunction<_dart_ImageDrawText>();

  void ImageDrawTextEx(
    ffi.Pointer<Image> dst,
    Font font,
    ffi.Pointer<ffi.Int8> text,
    Vector2 position,
    double fontSize,
    double spacing,
    Color tint,
  ) {
    return _ImageDrawTextEx(
      dst,
      font,
      text,
      position,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _ImageDrawTextEx_ptr =
      _lookup<ffi.NativeFunction<_c_ImageDrawTextEx>>('ImageDrawTextEx');
  late final _dart_ImageDrawTextEx _ImageDrawTextEx =
      _ImageDrawTextEx_ptr.asFunction<_dart_ImageDrawTextEx>();

  /// Texture loading functions
  /// NOTE: These functions require GPU access
  Texture LoadTexture(
    ffi.Pointer<ffi.Int8> fileName,
  ) {
    return _LoadTexture(
      fileName,
    );
  }

  late final _LoadTexture_ptr =
      _lookup<ffi.NativeFunction<_c_LoadTexture>>('LoadTexture');
  late final _dart_LoadTexture _LoadTexture =
      _LoadTexture_ptr.asFunction<_dart_LoadTexture>();

  Texture LoadTextureFromImage(
    Image image,
  ) {
    return _LoadTextureFromImage(
      image,
    );
  }

  late final _LoadTextureFromImage_ptr =
      _lookup<ffi.NativeFunction<_c_LoadTextureFromImage>>(
          'LoadTextureFromImage');
  late final _dart_LoadTextureFromImage _LoadTextureFromImage =
      _LoadTextureFromImage_ptr.asFunction<_dart_LoadTextureFromImage>();

  Texture LoadTextureCubemap(
    Image image,
    int layout,
  ) {
    return _LoadTextureCubemap(
      image,
      layout,
    );
  }

  late final _LoadTextureCubemap_ptr =
      _lookup<ffi.NativeFunction<_c_LoadTextureCubemap>>('LoadTextureCubemap');
  late final _dart_LoadTextureCubemap _LoadTextureCubemap =
      _LoadTextureCubemap_ptr.asFunction<_dart_LoadTextureCubemap>();

  RenderTexture LoadRenderTexture(
    int width,
    int height,
  ) {
    return _LoadRenderTexture(
      width,
      height,
    );
  }

  late final _LoadRenderTexture_ptr =
      _lookup<ffi.NativeFunction<_c_LoadRenderTexture>>('LoadRenderTexture');
  late final _dart_LoadRenderTexture _LoadRenderTexture =
      _LoadRenderTexture_ptr.asFunction<_dart_LoadRenderTexture>();

  void UnloadTexture(
    Texture texture,
  ) {
    return _UnloadTexture(
      texture,
    );
  }

  late final _UnloadTexture_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadTexture>>('UnloadTexture');
  late final _dart_UnloadTexture _UnloadTexture =
      _UnloadTexture_ptr.asFunction<_dart_UnloadTexture>();

  void UnloadRenderTexture(
    RenderTexture target,
  ) {
    return _UnloadRenderTexture(
      target,
    );
  }

  late final _UnloadRenderTexture_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadRenderTexture>>(
          'UnloadRenderTexture');
  late final _dart_UnloadRenderTexture _UnloadRenderTexture =
      _UnloadRenderTexture_ptr.asFunction<_dart_UnloadRenderTexture>();

  void UpdateTexture(
    Texture texture,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    return _UpdateTexture(
      texture,
      pixels,
    );
  }

  late final _UpdateTexture_ptr =
      _lookup<ffi.NativeFunction<_c_UpdateTexture>>('UpdateTexture');
  late final _dart_UpdateTexture _UpdateTexture =
      _UpdateTexture_ptr.asFunction<_dart_UpdateTexture>();

  void UpdateTextureRec(
    Texture texture,
    Rectangle rec,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    return _UpdateTextureRec(
      texture,
      rec,
      pixels,
    );
  }

  late final _UpdateTextureRec_ptr =
      _lookup<ffi.NativeFunction<_c_UpdateTextureRec>>('UpdateTextureRec');
  late final _dart_UpdateTextureRec _UpdateTextureRec =
      _UpdateTextureRec_ptr.asFunction<_dart_UpdateTextureRec>();

  /// Texture configuration functions
  void GenTextureMipmaps(
    ffi.Pointer<Texture> texture,
  ) {
    return _GenTextureMipmaps(
      texture,
    );
  }

  late final _GenTextureMipmaps_ptr =
      _lookup<ffi.NativeFunction<_c_GenTextureMipmaps>>('GenTextureMipmaps');
  late final _dart_GenTextureMipmaps _GenTextureMipmaps =
      _GenTextureMipmaps_ptr.asFunction<_dart_GenTextureMipmaps>();

  void SetTextureFilter(
    Texture texture,
    int filter,
  ) {
    return _SetTextureFilter(
      texture,
      filter,
    );
  }

  late final _SetTextureFilter_ptr =
      _lookup<ffi.NativeFunction<_c_SetTextureFilter>>('SetTextureFilter');
  late final _dart_SetTextureFilter _SetTextureFilter =
      _SetTextureFilter_ptr.asFunction<_dart_SetTextureFilter>();

  void SetTextureWrap(
    Texture texture,
    int wrap,
  ) {
    return _SetTextureWrap(
      texture,
      wrap,
    );
  }

  late final _SetTextureWrap_ptr =
      _lookup<ffi.NativeFunction<_c_SetTextureWrap>>('SetTextureWrap');
  late final _dart_SetTextureWrap _SetTextureWrap =
      _SetTextureWrap_ptr.asFunction<_dart_SetTextureWrap>();

  /// Texture drawing functions
  void DrawTexture(
    Texture texture,
    int posX,
    int posY,
    Color tint,
  ) {
    return _DrawTexture(
      texture,
      posX,
      posY,
      tint,
    );
  }

  late final _DrawTexture_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTexture>>('DrawTexture');
  late final _dart_DrawTexture _DrawTexture =
      _DrawTexture_ptr.asFunction<_dart_DrawTexture>();

  void DrawTextureV(
    Texture texture,
    Vector2 position,
    Color tint,
  ) {
    return _DrawTextureV(
      texture,
      position,
      tint,
    );
  }

  late final _DrawTextureV_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTextureV>>('DrawTextureV');
  late final _dart_DrawTextureV _DrawTextureV =
      _DrawTextureV_ptr.asFunction<_dart_DrawTextureV>();

  void DrawTextureEx(
    Texture texture,
    Vector2 position,
    double rotation,
    double scale,
    Color tint,
  ) {
    return _DrawTextureEx(
      texture,
      position,
      rotation,
      scale,
      tint,
    );
  }

  late final _DrawTextureEx_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTextureEx>>('DrawTextureEx');
  late final _dart_DrawTextureEx _DrawTextureEx =
      _DrawTextureEx_ptr.asFunction<_dart_DrawTextureEx>();

  void DrawTextureRec(
    Texture texture,
    Rectangle source,
    Vector2 position,
    Color tint,
  ) {
    return _DrawTextureRec(
      texture,
      source,
      position,
      tint,
    );
  }

  late final _DrawTextureRec_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTextureRec>>('DrawTextureRec');
  late final _dart_DrawTextureRec _DrawTextureRec =
      _DrawTextureRec_ptr.asFunction<_dart_DrawTextureRec>();

  void DrawTextureQuad(
    Texture texture,
    Vector2 tiling,
    Vector2 offset,
    Rectangle quad,
    Color tint,
  ) {
    return _DrawTextureQuad(
      texture,
      tiling,
      offset,
      quad,
      tint,
    );
  }

  late final _DrawTextureQuad_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTextureQuad>>('DrawTextureQuad');
  late final _dart_DrawTextureQuad _DrawTextureQuad =
      _DrawTextureQuad_ptr.asFunction<_dart_DrawTextureQuad>();

  void DrawTextureTiled(
    Texture texture,
    Rectangle source,
    Rectangle dest,
    Vector2 origin,
    double rotation,
    double scale,
    Color tint,
  ) {
    return _DrawTextureTiled(
      texture,
      source,
      dest,
      origin,
      rotation,
      scale,
      tint,
    );
  }

  late final _DrawTextureTiled_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTextureTiled>>('DrawTextureTiled');
  late final _dart_DrawTextureTiled _DrawTextureTiled =
      _DrawTextureTiled_ptr.asFunction<_dart_DrawTextureTiled>();

  void DrawTexturePro(
    Texture texture,
    Rectangle source,
    Rectangle dest,
    Vector2 origin,
    double rotation,
    Color tint,
  ) {
    return _DrawTexturePro(
      texture,
      source,
      dest,
      origin,
      rotation,
      tint,
    );
  }

  late final _DrawTexturePro_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTexturePro>>('DrawTexturePro');
  late final _dart_DrawTexturePro _DrawTexturePro =
      _DrawTexturePro_ptr.asFunction<_dart_DrawTexturePro>();

  void DrawTextureNPatch(
    Texture texture,
    NPatchInfo nPatchInfo,
    Rectangle dest,
    Vector2 origin,
    double rotation,
    Color tint,
  ) {
    return _DrawTextureNPatch(
      texture,
      nPatchInfo,
      dest,
      origin,
      rotation,
      tint,
    );
  }

  late final _DrawTextureNPatch_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTextureNPatch>>('DrawTextureNPatch');
  late final _dart_DrawTextureNPatch _DrawTextureNPatch =
      _DrawTextureNPatch_ptr.asFunction<_dart_DrawTextureNPatch>();

  void DrawTexturePoly(
    Texture texture,
    Vector2 center,
    ffi.Pointer<Vector2> points,
    ffi.Pointer<Vector2> texcoords,
    int pointCount,
    Color tint,
  ) {
    return _DrawTexturePoly(
      texture,
      center,
      points,
      texcoords,
      pointCount,
      tint,
    );
  }

  late final _DrawTexturePoly_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTexturePoly>>('DrawTexturePoly');
  late final _dart_DrawTexturePoly _DrawTexturePoly =
      _DrawTexturePoly_ptr.asFunction<_dart_DrawTexturePoly>();

  /// Color/pixel related functions
  Color Fade(
    Color color,
    double alpha,
  ) {
    return _Fade(
      color,
      alpha,
    );
  }

  late final _Fade_ptr = _lookup<ffi.NativeFunction<_c_Fade>>('Fade');
  late final _dart_Fade _Fade = _Fade_ptr.asFunction<_dart_Fade>();

  int ColorToInt(
    Color color,
  ) {
    return _ColorToInt(
      color,
    );
  }

  late final _ColorToInt_ptr =
      _lookup<ffi.NativeFunction<_c_ColorToInt>>('ColorToInt');
  late final _dart_ColorToInt _ColorToInt =
      _ColorToInt_ptr.asFunction<_dart_ColorToInt>();

  Vector4 ColorNormalize(
    Color color,
  ) {
    return _ColorNormalize(
      color,
    );
  }

  late final _ColorNormalize_ptr =
      _lookup<ffi.NativeFunction<_c_ColorNormalize>>('ColorNormalize');
  late final _dart_ColorNormalize _ColorNormalize =
      _ColorNormalize_ptr.asFunction<_dart_ColorNormalize>();

  Color ColorFromNormalized(
    Vector4 normalized,
  ) {
    return _ColorFromNormalized(
      normalized,
    );
  }

  late final _ColorFromNormalized_ptr =
      _lookup<ffi.NativeFunction<_c_ColorFromNormalized>>(
          'ColorFromNormalized');
  late final _dart_ColorFromNormalized _ColorFromNormalized =
      _ColorFromNormalized_ptr.asFunction<_dart_ColorFromNormalized>();

  Vector3 ColorToHSV(
    Color color,
  ) {
    return _ColorToHSV(
      color,
    );
  }

  late final _ColorToHSV_ptr =
      _lookup<ffi.NativeFunction<_c_ColorToHSV>>('ColorToHSV');
  late final _dart_ColorToHSV _ColorToHSV =
      _ColorToHSV_ptr.asFunction<_dart_ColorToHSV>();

  Color ColorFromHSV(
    double hue,
    double saturation,
    double value,
  ) {
    return _ColorFromHSV(
      hue,
      saturation,
      value,
    );
  }

  late final _ColorFromHSV_ptr =
      _lookup<ffi.NativeFunction<_c_ColorFromHSV>>('ColorFromHSV');
  late final _dart_ColorFromHSV _ColorFromHSV =
      _ColorFromHSV_ptr.asFunction<_dart_ColorFromHSV>();

  Color ColorAlpha(
    Color color,
    double alpha,
  ) {
    return _ColorAlpha(
      color,
      alpha,
    );
  }

  late final _ColorAlpha_ptr =
      _lookup<ffi.NativeFunction<_c_ColorAlpha>>('ColorAlpha');
  late final _dart_ColorAlpha _ColorAlpha =
      _ColorAlpha_ptr.asFunction<_dart_ColorAlpha>();

  Color ColorAlphaBlend(
    Color dst,
    Color src,
    Color tint,
  ) {
    return _ColorAlphaBlend(
      dst,
      src,
      tint,
    );
  }

  late final _ColorAlphaBlend_ptr =
      _lookup<ffi.NativeFunction<_c_ColorAlphaBlend>>('ColorAlphaBlend');
  late final _dart_ColorAlphaBlend _ColorAlphaBlend =
      _ColorAlphaBlend_ptr.asFunction<_dart_ColorAlphaBlend>();

  Color GetColor(
    int hexValue,
  ) {
    return _GetColor(
      hexValue,
    );
  }

  late final _GetColor_ptr =
      _lookup<ffi.NativeFunction<_c_GetColor>>('GetColor');
  late final _dart_GetColor _GetColor =
      _GetColor_ptr.asFunction<_dart_GetColor>();

  Color GetPixelColor(
    ffi.Pointer<ffi.Void> srcPtr,
    int format,
  ) {
    return _GetPixelColor(
      srcPtr,
      format,
    );
  }

  late final _GetPixelColor_ptr =
      _lookup<ffi.NativeFunction<_c_GetPixelColor>>('GetPixelColor');
  late final _dart_GetPixelColor _GetPixelColor =
      _GetPixelColor_ptr.asFunction<_dart_GetPixelColor>();

  void SetPixelColor(
    ffi.Pointer<ffi.Void> dstPtr,
    Color color,
    int format,
  ) {
    return _SetPixelColor(
      dstPtr,
      color,
      format,
    );
  }

  late final _SetPixelColor_ptr =
      _lookup<ffi.NativeFunction<_c_SetPixelColor>>('SetPixelColor');
  late final _dart_SetPixelColor _SetPixelColor =
      _SetPixelColor_ptr.asFunction<_dart_SetPixelColor>();

  int GetPixelDataSize(
    int width,
    int height,
    int format,
  ) {
    return _GetPixelDataSize(
      width,
      height,
      format,
    );
  }

  late final _GetPixelDataSize_ptr =
      _lookup<ffi.NativeFunction<_c_GetPixelDataSize>>('GetPixelDataSize');
  late final _dart_GetPixelDataSize _GetPixelDataSize =
      _GetPixelDataSize_ptr.asFunction<_dart_GetPixelDataSize>();

  /// Font loading/unloading functions
  Font GetFontDefault() {
    return _GetFontDefault();
  }

  late final _GetFontDefault_ptr =
      _lookup<ffi.NativeFunction<_c_GetFontDefault>>('GetFontDefault');
  late final _dart_GetFontDefault _GetFontDefault =
      _GetFontDefault_ptr.asFunction<_dart_GetFontDefault>();

  Font LoadFont(
    ffi.Pointer<ffi.Int8> fileName,
  ) {
    return _LoadFont(
      fileName,
    );
  }

  late final _LoadFont_ptr =
      _lookup<ffi.NativeFunction<_c_LoadFont>>('LoadFont');
  late final _dart_LoadFont _LoadFont =
      _LoadFont_ptr.asFunction<_dart_LoadFont>();

  Font LoadFontEx(
    ffi.Pointer<ffi.Int8> fileName,
    int fontSize,
    ffi.Pointer<ffi.Int32> fontChars,
    int glyphCount,
  ) {
    return _LoadFontEx(
      fileName,
      fontSize,
      fontChars,
      glyphCount,
    );
  }

  late final _LoadFontEx_ptr =
      _lookup<ffi.NativeFunction<_c_LoadFontEx>>('LoadFontEx');
  late final _dart_LoadFontEx _LoadFontEx =
      _LoadFontEx_ptr.asFunction<_dart_LoadFontEx>();

  Font LoadFontFromImage(
    Image image,
    Color key,
    int firstChar,
  ) {
    return _LoadFontFromImage(
      image,
      key,
      firstChar,
    );
  }

  late final _LoadFontFromImage_ptr =
      _lookup<ffi.NativeFunction<_c_LoadFontFromImage>>('LoadFontFromImage');
  late final _dart_LoadFontFromImage _LoadFontFromImage =
      _LoadFontFromImage_ptr.asFunction<_dart_LoadFontFromImage>();

  Font LoadFontFromMemory(
    ffi.Pointer<ffi.Int8> fileType,
    ffi.Pointer<ffi.Uint8> fileData,
    int dataSize,
    int fontSize,
    ffi.Pointer<ffi.Int32> fontChars,
    int glyphCount,
  ) {
    return _LoadFontFromMemory(
      fileType,
      fileData,
      dataSize,
      fontSize,
      fontChars,
      glyphCount,
    );
  }

  late final _LoadFontFromMemory_ptr =
      _lookup<ffi.NativeFunction<_c_LoadFontFromMemory>>('LoadFontFromMemory');
  late final _dart_LoadFontFromMemory _LoadFontFromMemory =
      _LoadFontFromMemory_ptr.asFunction<_dart_LoadFontFromMemory>();

  ffi.Pointer<GlyphInfo> LoadFontData(
    ffi.Pointer<ffi.Uint8> fileData,
    int dataSize,
    int fontSize,
    ffi.Pointer<ffi.Int32> fontChars,
    int glyphCount,
    int type,
  ) {
    return _LoadFontData(
      fileData,
      dataSize,
      fontSize,
      fontChars,
      glyphCount,
      type,
    );
  }

  late final _LoadFontData_ptr =
      _lookup<ffi.NativeFunction<_c_LoadFontData>>('LoadFontData');
  late final _dart_LoadFontData _LoadFontData =
      _LoadFontData_ptr.asFunction<_dart_LoadFontData>();

  Image GenImageFontAtlas(
    ffi.Pointer<GlyphInfo> chars,
    ffi.Pointer<ffi.Pointer<Rectangle>> recs,
    int glyphCount,
    int fontSize,
    int padding,
    int packMethod,
  ) {
    return _GenImageFontAtlas(
      chars,
      recs,
      glyphCount,
      fontSize,
      padding,
      packMethod,
    );
  }

  late final _GenImageFontAtlas_ptr =
      _lookup<ffi.NativeFunction<_c_GenImageFontAtlas>>('GenImageFontAtlas');
  late final _dart_GenImageFontAtlas _GenImageFontAtlas =
      _GenImageFontAtlas_ptr.asFunction<_dart_GenImageFontAtlas>();

  void UnloadFontData(
    ffi.Pointer<GlyphInfo> chars,
    int glyphCount,
  ) {
    return _UnloadFontData(
      chars,
      glyphCount,
    );
  }

  late final _UnloadFontData_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadFontData>>('UnloadFontData');
  late final _dart_UnloadFontData _UnloadFontData =
      _UnloadFontData_ptr.asFunction<_dart_UnloadFontData>();

  void UnloadFont(
    Font font,
  ) {
    return _UnloadFont(
      font,
    );
  }

  late final _UnloadFont_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadFont>>('UnloadFont');
  late final _dart_UnloadFont _UnloadFont =
      _UnloadFont_ptr.asFunction<_dart_UnloadFont>();

  /// Text drawing functions
  void DrawFPS(
    int posX,
    int posY,
  ) {
    return _DrawFPS(
      posX,
      posY,
    );
  }

  late final _DrawFPS_ptr = _lookup<ffi.NativeFunction<_c_DrawFPS>>('DrawFPS');
  late final _dart_DrawFPS _DrawFPS = _DrawFPS_ptr.asFunction<_dart_DrawFPS>();

  void DrawText(
    ffi.Pointer<ffi.Int8> text,
    int posX,
    int posY,
    int fontSize,
    Color color,
  ) {
    return _DrawText(
      text,
      posX,
      posY,
      fontSize,
      color,
    );
  }

  late final _DrawText_ptr =
      _lookup<ffi.NativeFunction<_c_DrawText>>('DrawText');
  late final _dart_DrawText _DrawText =
      _DrawText_ptr.asFunction<_dart_DrawText>();

  void DrawTextEx(
    Font font,
    ffi.Pointer<ffi.Int8> text,
    Vector2 position,
    double fontSize,
    double spacing,
    Color tint,
  ) {
    return _DrawTextEx(
      font,
      text,
      position,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _DrawTextEx_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTextEx>>('DrawTextEx');
  late final _dart_DrawTextEx _DrawTextEx =
      _DrawTextEx_ptr.asFunction<_dart_DrawTextEx>();

  void DrawTextPro(
    Font font,
    ffi.Pointer<ffi.Int8> text,
    Vector2 position,
    Vector2 origin,
    double rotation,
    double fontSize,
    double spacing,
    Color tint,
  ) {
    return _DrawTextPro(
      font,
      text,
      position,
      origin,
      rotation,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _DrawTextPro_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTextPro>>('DrawTextPro');
  late final _dart_DrawTextPro _DrawTextPro =
      _DrawTextPro_ptr.asFunction<_dart_DrawTextPro>();

  void DrawTextCodepoint(
    Font font,
    int codepoint,
    Vector2 position,
    double fontSize,
    Color tint,
  ) {
    return _DrawTextCodepoint(
      font,
      codepoint,
      position,
      fontSize,
      tint,
    );
  }

  late final _DrawTextCodepoint_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTextCodepoint>>('DrawTextCodepoint');
  late final _dart_DrawTextCodepoint _DrawTextCodepoint =
      _DrawTextCodepoint_ptr.asFunction<_dart_DrawTextCodepoint>();

  /// Text font info functions
  int MeasureText(
    ffi.Pointer<ffi.Int8> text,
    int fontSize,
  ) {
    return _MeasureText(
      text,
      fontSize,
    );
  }

  late final _MeasureText_ptr =
      _lookup<ffi.NativeFunction<_c_MeasureText>>('MeasureText');
  late final _dart_MeasureText _MeasureText =
      _MeasureText_ptr.asFunction<_dart_MeasureText>();

  Vector2 MeasureTextEx(
    Font font,
    ffi.Pointer<ffi.Int8> text,
    double fontSize,
    double spacing,
  ) {
    return _MeasureTextEx(
      font,
      text,
      fontSize,
      spacing,
    );
  }

  late final _MeasureTextEx_ptr =
      _lookup<ffi.NativeFunction<_c_MeasureTextEx>>('MeasureTextEx');
  late final _dart_MeasureTextEx _MeasureTextEx =
      _MeasureTextEx_ptr.asFunction<_dart_MeasureTextEx>();

  int GetGlyphIndex(
    Font font,
    int codepoint,
  ) {
    return _GetGlyphIndex(
      font,
      codepoint,
    );
  }

  late final _GetGlyphIndex_ptr =
      _lookup<ffi.NativeFunction<_c_GetGlyphIndex>>('GetGlyphIndex');
  late final _dart_GetGlyphIndex _GetGlyphIndex =
      _GetGlyphIndex_ptr.asFunction<_dart_GetGlyphIndex>();

  GlyphInfo GetGlyphInfo(
    Font font,
    int codepoint,
  ) {
    return _GetGlyphInfo(
      font,
      codepoint,
    );
  }

  late final _GetGlyphInfo_ptr =
      _lookup<ffi.NativeFunction<_c_GetGlyphInfo>>('GetGlyphInfo');
  late final _dart_GetGlyphInfo _GetGlyphInfo =
      _GetGlyphInfo_ptr.asFunction<_dart_GetGlyphInfo>();

  Rectangle GetGlyphAtlasRec(
    Font font,
    int codepoint,
  ) {
    return _GetGlyphAtlasRec(
      font,
      codepoint,
    );
  }

  late final _GetGlyphAtlasRec_ptr =
      _lookup<ffi.NativeFunction<_c_GetGlyphAtlasRec>>('GetGlyphAtlasRec');
  late final _dart_GetGlyphAtlasRec _GetGlyphAtlasRec =
      _GetGlyphAtlasRec_ptr.asFunction<_dart_GetGlyphAtlasRec>();

  /// Text codepoints management functions (unicode characters)
  ffi.Pointer<ffi.Int32> LoadCodepoints(
    ffi.Pointer<ffi.Int8> text,
    ffi.Pointer<ffi.Int32> count,
  ) {
    return _LoadCodepoints(
      text,
      count,
    );
  }

  late final _LoadCodepoints_ptr =
      _lookup<ffi.NativeFunction<_c_LoadCodepoints>>('LoadCodepoints');
  late final _dart_LoadCodepoints _LoadCodepoints =
      _LoadCodepoints_ptr.asFunction<_dart_LoadCodepoints>();

  void UnloadCodepoints(
    ffi.Pointer<ffi.Int32> codepoints,
  ) {
    return _UnloadCodepoints(
      codepoints,
    );
  }

  late final _UnloadCodepoints_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadCodepoints>>('UnloadCodepoints');
  late final _dart_UnloadCodepoints _UnloadCodepoints =
      _UnloadCodepoints_ptr.asFunction<_dart_UnloadCodepoints>();

  int GetCodepointCount(
    ffi.Pointer<ffi.Int8> text,
  ) {
    return _GetCodepointCount(
      text,
    );
  }

  late final _GetCodepointCount_ptr =
      _lookup<ffi.NativeFunction<_c_GetCodepointCount>>('GetCodepointCount');
  late final _dart_GetCodepointCount _GetCodepointCount =
      _GetCodepointCount_ptr.asFunction<_dart_GetCodepointCount>();

  int GetCodepoint(
    ffi.Pointer<ffi.Int8> text,
    ffi.Pointer<ffi.Int32> bytesProcessed,
  ) {
    return _GetCodepoint(
      text,
      bytesProcessed,
    );
  }

  late final _GetCodepoint_ptr =
      _lookup<ffi.NativeFunction<_c_GetCodepoint>>('GetCodepoint');
  late final _dart_GetCodepoint _GetCodepoint =
      _GetCodepoint_ptr.asFunction<_dart_GetCodepoint>();

  ffi.Pointer<ffi.Int8> CodepointToUTF8(
    int codepoint,
    ffi.Pointer<ffi.Int32> byteSize,
  ) {
    return _CodepointToUTF8(
      codepoint,
      byteSize,
    );
  }

  late final _CodepointToUTF8_ptr =
      _lookup<ffi.NativeFunction<_c_CodepointToUTF8>>('CodepointToUTF8');
  late final _dart_CodepointToUTF8 _CodepointToUTF8 =
      _CodepointToUTF8_ptr.asFunction<_dart_CodepointToUTF8>();

  ffi.Pointer<ffi.Int8> TextCodepointsToUTF8(
    ffi.Pointer<ffi.Int32> codepoints,
    int length,
  ) {
    return _TextCodepointsToUTF8(
      codepoints,
      length,
    );
  }

  late final _TextCodepointsToUTF8_ptr =
      _lookup<ffi.NativeFunction<_c_TextCodepointsToUTF8>>(
          'TextCodepointsToUTF8');
  late final _dart_TextCodepointsToUTF8 _TextCodepointsToUTF8 =
      _TextCodepointsToUTF8_ptr.asFunction<_dart_TextCodepointsToUTF8>();

  /// Text strings management functions (no UTF-8 strings, only byte chars)
  /// NOTE: Some strings allocate memory internally for returned strings, just be careful!
  int TextCopy(
    ffi.Pointer<ffi.Int8> dst,
    ffi.Pointer<ffi.Int8> src,
  ) {
    return _TextCopy(
      dst,
      src,
    );
  }

  late final _TextCopy_ptr =
      _lookup<ffi.NativeFunction<_c_TextCopy>>('TextCopy');
  late final _dart_TextCopy _TextCopy =
      _TextCopy_ptr.asFunction<_dart_TextCopy>();

  int TextIsEqual(
    ffi.Pointer<ffi.Int8> text1,
    ffi.Pointer<ffi.Int8> text2,
  ) {
    return _TextIsEqual(
      text1,
      text2,
    );
  }

  late final _TextIsEqual_ptr =
      _lookup<ffi.NativeFunction<_c_TextIsEqual>>('TextIsEqual');
  late final _dart_TextIsEqual _TextIsEqual =
      _TextIsEqual_ptr.asFunction<_dart_TextIsEqual>();

  int TextLength(
    ffi.Pointer<ffi.Int8> text,
  ) {
    return _TextLength(
      text,
    );
  }

  late final _TextLength_ptr =
      _lookup<ffi.NativeFunction<_c_TextLength>>('TextLength');
  late final _dart_TextLength _TextLength =
      _TextLength_ptr.asFunction<_dart_TextLength>();

  ffi.Pointer<ffi.Int8> TextFormat(
    ffi.Pointer<ffi.Int8> text,
  ) {
    return _TextFormat(
      text,
    );
  }

  late final _TextFormat_ptr =
      _lookup<ffi.NativeFunction<_c_TextFormat>>('TextFormat');
  late final _dart_TextFormat _TextFormat =
      _TextFormat_ptr.asFunction<_dart_TextFormat>();

  ffi.Pointer<ffi.Int8> TextSubtext(
    ffi.Pointer<ffi.Int8> text,
    int position,
    int length,
  ) {
    return _TextSubtext(
      text,
      position,
      length,
    );
  }

  late final _TextSubtext_ptr =
      _lookup<ffi.NativeFunction<_c_TextSubtext>>('TextSubtext');
  late final _dart_TextSubtext _TextSubtext =
      _TextSubtext_ptr.asFunction<_dart_TextSubtext>();

  ffi.Pointer<ffi.Int8> TextReplace(
    ffi.Pointer<ffi.Int8> text,
    ffi.Pointer<ffi.Int8> replace,
    ffi.Pointer<ffi.Int8> by,
  ) {
    return _TextReplace(
      text,
      replace,
      by,
    );
  }

  late final _TextReplace_ptr =
      _lookup<ffi.NativeFunction<_c_TextReplace>>('TextReplace');
  late final _dart_TextReplace _TextReplace =
      _TextReplace_ptr.asFunction<_dart_TextReplace>();

  ffi.Pointer<ffi.Int8> TextInsert(
    ffi.Pointer<ffi.Int8> text,
    ffi.Pointer<ffi.Int8> insert,
    int position,
  ) {
    return _TextInsert(
      text,
      insert,
      position,
    );
  }

  late final _TextInsert_ptr =
      _lookup<ffi.NativeFunction<_c_TextInsert>>('TextInsert');
  late final _dart_TextInsert _TextInsert =
      _TextInsert_ptr.asFunction<_dart_TextInsert>();

  ffi.Pointer<ffi.Int8> TextJoin(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> textList,
    int count,
    ffi.Pointer<ffi.Int8> delimiter,
  ) {
    return _TextJoin(
      textList,
      count,
      delimiter,
    );
  }

  late final _TextJoin_ptr =
      _lookup<ffi.NativeFunction<_c_TextJoin>>('TextJoin');
  late final _dart_TextJoin _TextJoin =
      _TextJoin_ptr.asFunction<_dart_TextJoin>();

  ffi.Pointer<ffi.Pointer<ffi.Int8>> TextSplit(
    ffi.Pointer<ffi.Int8> text,
    int delimiter,
    ffi.Pointer<ffi.Int32> count,
  ) {
    return _TextSplit(
      text,
      delimiter,
      count,
    );
  }

  late final _TextSplit_ptr =
      _lookup<ffi.NativeFunction<_c_TextSplit>>('TextSplit');
  late final _dart_TextSplit _TextSplit =
      _TextSplit_ptr.asFunction<_dart_TextSplit>();

  void TextAppend(
    ffi.Pointer<ffi.Int8> text,
    ffi.Pointer<ffi.Int8> append,
    ffi.Pointer<ffi.Int32> position,
  ) {
    return _TextAppend(
      text,
      append,
      position,
    );
  }

  late final _TextAppend_ptr =
      _lookup<ffi.NativeFunction<_c_TextAppend>>('TextAppend');
  late final _dart_TextAppend _TextAppend =
      _TextAppend_ptr.asFunction<_dart_TextAppend>();

  int TextFindIndex(
    ffi.Pointer<ffi.Int8> text,
    ffi.Pointer<ffi.Int8> find,
  ) {
    return _TextFindIndex(
      text,
      find,
    );
  }

  late final _TextFindIndex_ptr =
      _lookup<ffi.NativeFunction<_c_TextFindIndex>>('TextFindIndex');
  late final _dart_TextFindIndex _TextFindIndex =
      _TextFindIndex_ptr.asFunction<_dart_TextFindIndex>();

  ffi.Pointer<ffi.Int8> TextToUpper(
    ffi.Pointer<ffi.Int8> text,
  ) {
    return _TextToUpper(
      text,
    );
  }

  late final _TextToUpper_ptr =
      _lookup<ffi.NativeFunction<_c_TextToUpper>>('TextToUpper');
  late final _dart_TextToUpper _TextToUpper =
      _TextToUpper_ptr.asFunction<_dart_TextToUpper>();

  ffi.Pointer<ffi.Int8> TextToLower(
    ffi.Pointer<ffi.Int8> text,
  ) {
    return _TextToLower(
      text,
    );
  }

  late final _TextToLower_ptr =
      _lookup<ffi.NativeFunction<_c_TextToLower>>('TextToLower');
  late final _dart_TextToLower _TextToLower =
      _TextToLower_ptr.asFunction<_dart_TextToLower>();

  ffi.Pointer<ffi.Int8> TextToPascal(
    ffi.Pointer<ffi.Int8> text,
  ) {
    return _TextToPascal(
      text,
    );
  }

  late final _TextToPascal_ptr =
      _lookup<ffi.NativeFunction<_c_TextToPascal>>('TextToPascal');
  late final _dart_TextToPascal _TextToPascal =
      _TextToPascal_ptr.asFunction<_dart_TextToPascal>();

  int TextToInteger(
    ffi.Pointer<ffi.Int8> text,
  ) {
    return _TextToInteger(
      text,
    );
  }

  late final _TextToInteger_ptr =
      _lookup<ffi.NativeFunction<_c_TextToInteger>>('TextToInteger');
  late final _dart_TextToInteger _TextToInteger =
      _TextToInteger_ptr.asFunction<_dart_TextToInteger>();

  /// Basic geometric 3D shapes drawing functions
  void DrawLine3D(
    Vector3 startPos,
    Vector3 endPos,
    Color color,
  ) {
    return _DrawLine3D(
      startPos,
      endPos,
      color,
    );
  }

  late final _DrawLine3D_ptr =
      _lookup<ffi.NativeFunction<_c_DrawLine3D>>('DrawLine3D');
  late final _dart_DrawLine3D _DrawLine3D =
      _DrawLine3D_ptr.asFunction<_dart_DrawLine3D>();

  void DrawPoint3D(
    Vector3 position,
    Color color,
  ) {
    return _DrawPoint3D(
      position,
      color,
    );
  }

  late final _DrawPoint3D_ptr =
      _lookup<ffi.NativeFunction<_c_DrawPoint3D>>('DrawPoint3D');
  late final _dart_DrawPoint3D _DrawPoint3D =
      _DrawPoint3D_ptr.asFunction<_dart_DrawPoint3D>();

  void DrawCircle3D(
    Vector3 center,
    double radius,
    Vector3 rotationAxis,
    double rotationAngle,
    Color color,
  ) {
    return _DrawCircle3D(
      center,
      radius,
      rotationAxis,
      rotationAngle,
      color,
    );
  }

  late final _DrawCircle3D_ptr =
      _lookup<ffi.NativeFunction<_c_DrawCircle3D>>('DrawCircle3D');
  late final _dart_DrawCircle3D _DrawCircle3D =
      _DrawCircle3D_ptr.asFunction<_dart_DrawCircle3D>();

  void DrawTriangle3D(
    Vector3 v1,
    Vector3 v2,
    Vector3 v3,
    Color color,
  ) {
    return _DrawTriangle3D(
      v1,
      v2,
      v3,
      color,
    );
  }

  late final _DrawTriangle3D_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTriangle3D>>('DrawTriangle3D');
  late final _dart_DrawTriangle3D _DrawTriangle3D =
      _DrawTriangle3D_ptr.asFunction<_dart_DrawTriangle3D>();

  void DrawTriangleStrip3D(
    ffi.Pointer<Vector3> points,
    int pointCount,
    Color color,
  ) {
    return _DrawTriangleStrip3D(
      points,
      pointCount,
      color,
    );
  }

  late final _DrawTriangleStrip3D_ptr =
      _lookup<ffi.NativeFunction<_c_DrawTriangleStrip3D>>(
          'DrawTriangleStrip3D');
  late final _dart_DrawTriangleStrip3D _DrawTriangleStrip3D =
      _DrawTriangleStrip3D_ptr.asFunction<_dart_DrawTriangleStrip3D>();

  void DrawCube(
    Vector3 position,
    double width,
    double height,
    double length,
    Color color,
  ) {
    return _DrawCube(
      position,
      width,
      height,
      length,
      color,
    );
  }

  late final _DrawCube_ptr =
      _lookup<ffi.NativeFunction<_c_DrawCube>>('DrawCube');
  late final _dart_DrawCube _DrawCube =
      _DrawCube_ptr.asFunction<_dart_DrawCube>();

  void DrawCubeV(
    Vector3 position,
    Vector3 size,
    Color color,
  ) {
    return _DrawCubeV(
      position,
      size,
      color,
    );
  }

  late final _DrawCubeV_ptr =
      _lookup<ffi.NativeFunction<_c_DrawCubeV>>('DrawCubeV');
  late final _dart_DrawCubeV _DrawCubeV =
      _DrawCubeV_ptr.asFunction<_dart_DrawCubeV>();

  void DrawCubeWires(
    Vector3 position,
    double width,
    double height,
    double length,
    Color color,
  ) {
    return _DrawCubeWires(
      position,
      width,
      height,
      length,
      color,
    );
  }

  late final _DrawCubeWires_ptr =
      _lookup<ffi.NativeFunction<_c_DrawCubeWires>>('DrawCubeWires');
  late final _dart_DrawCubeWires _DrawCubeWires =
      _DrawCubeWires_ptr.asFunction<_dart_DrawCubeWires>();

  void DrawCubeWiresV(
    Vector3 position,
    Vector3 size,
    Color color,
  ) {
    return _DrawCubeWiresV(
      position,
      size,
      color,
    );
  }

  late final _DrawCubeWiresV_ptr =
      _lookup<ffi.NativeFunction<_c_DrawCubeWiresV>>('DrawCubeWiresV');
  late final _dart_DrawCubeWiresV _DrawCubeWiresV =
      _DrawCubeWiresV_ptr.asFunction<_dart_DrawCubeWiresV>();

  void DrawCubeTexture(
    Texture texture,
    Vector3 position,
    double width,
    double height,
    double length,
    Color color,
  ) {
    return _DrawCubeTexture(
      texture,
      position,
      width,
      height,
      length,
      color,
    );
  }

  late final _DrawCubeTexture_ptr =
      _lookup<ffi.NativeFunction<_c_DrawCubeTexture>>('DrawCubeTexture');
  late final _dart_DrawCubeTexture _DrawCubeTexture =
      _DrawCubeTexture_ptr.asFunction<_dart_DrawCubeTexture>();

  void DrawCubeTextureRec(
    Texture texture,
    Rectangle source,
    Vector3 position,
    double width,
    double height,
    double length,
    Color color,
  ) {
    return _DrawCubeTextureRec(
      texture,
      source,
      position,
      width,
      height,
      length,
      color,
    );
  }

  late final _DrawCubeTextureRec_ptr =
      _lookup<ffi.NativeFunction<_c_DrawCubeTextureRec>>('DrawCubeTextureRec');
  late final _dart_DrawCubeTextureRec _DrawCubeTextureRec =
      _DrawCubeTextureRec_ptr.asFunction<_dart_DrawCubeTextureRec>();

  void DrawSphere(
    Vector3 centerPos,
    double radius,
    Color color,
  ) {
    return _DrawSphere(
      centerPos,
      radius,
      color,
    );
  }

  late final _DrawSphere_ptr =
      _lookup<ffi.NativeFunction<_c_DrawSphere>>('DrawSphere');
  late final _dart_DrawSphere _DrawSphere =
      _DrawSphere_ptr.asFunction<_dart_DrawSphere>();

  void DrawSphereEx(
    Vector3 centerPos,
    double radius,
    int rings,
    int slices,
    Color color,
  ) {
    return _DrawSphereEx(
      centerPos,
      radius,
      rings,
      slices,
      color,
    );
  }

  late final _DrawSphereEx_ptr =
      _lookup<ffi.NativeFunction<_c_DrawSphereEx>>('DrawSphereEx');
  late final _dart_DrawSphereEx _DrawSphereEx =
      _DrawSphereEx_ptr.asFunction<_dart_DrawSphereEx>();

  void DrawSphereWires(
    Vector3 centerPos,
    double radius,
    int rings,
    int slices,
    Color color,
  ) {
    return _DrawSphereWires(
      centerPos,
      radius,
      rings,
      slices,
      color,
    );
  }

  late final _DrawSphereWires_ptr =
      _lookup<ffi.NativeFunction<_c_DrawSphereWires>>('DrawSphereWires');
  late final _dart_DrawSphereWires _DrawSphereWires =
      _DrawSphereWires_ptr.asFunction<_dart_DrawSphereWires>();

  void DrawCylinder(
    Vector3 position,
    double radiusTop,
    double radiusBottom,
    double height,
    int slices,
    Color color,
  ) {
    return _DrawCylinder(
      position,
      radiusTop,
      radiusBottom,
      height,
      slices,
      color,
    );
  }

  late final _DrawCylinder_ptr =
      _lookup<ffi.NativeFunction<_c_DrawCylinder>>('DrawCylinder');
  late final _dart_DrawCylinder _DrawCylinder =
      _DrawCylinder_ptr.asFunction<_dart_DrawCylinder>();

  void DrawCylinderEx(
    Vector3 startPos,
    Vector3 endPos,
    double startRadius,
    double endRadius,
    int sides,
    Color color,
  ) {
    return _DrawCylinderEx(
      startPos,
      endPos,
      startRadius,
      endRadius,
      sides,
      color,
    );
  }

  late final _DrawCylinderEx_ptr =
      _lookup<ffi.NativeFunction<_c_DrawCylinderEx>>('DrawCylinderEx');
  late final _dart_DrawCylinderEx _DrawCylinderEx =
      _DrawCylinderEx_ptr.asFunction<_dart_DrawCylinderEx>();

  void DrawCylinderWires(
    Vector3 position,
    double radiusTop,
    double radiusBottom,
    double height,
    int slices,
    Color color,
  ) {
    return _DrawCylinderWires(
      position,
      radiusTop,
      radiusBottom,
      height,
      slices,
      color,
    );
  }

  late final _DrawCylinderWires_ptr =
      _lookup<ffi.NativeFunction<_c_DrawCylinderWires>>('DrawCylinderWires');
  late final _dart_DrawCylinderWires _DrawCylinderWires =
      _DrawCylinderWires_ptr.asFunction<_dart_DrawCylinderWires>();

  void DrawCylinderWiresEx(
    Vector3 startPos,
    Vector3 endPos,
    double startRadius,
    double endRadius,
    int sides,
    Color color,
  ) {
    return _DrawCylinderWiresEx(
      startPos,
      endPos,
      startRadius,
      endRadius,
      sides,
      color,
    );
  }

  late final _DrawCylinderWiresEx_ptr =
      _lookup<ffi.NativeFunction<_c_DrawCylinderWiresEx>>(
          'DrawCylinderWiresEx');
  late final _dart_DrawCylinderWiresEx _DrawCylinderWiresEx =
      _DrawCylinderWiresEx_ptr.asFunction<_dart_DrawCylinderWiresEx>();

  void DrawPlane(
    Vector3 centerPos,
    Vector2 size,
    Color color,
  ) {
    return _DrawPlane(
      centerPos,
      size,
      color,
    );
  }

  late final _DrawPlane_ptr =
      _lookup<ffi.NativeFunction<_c_DrawPlane>>('DrawPlane');
  late final _dart_DrawPlane _DrawPlane =
      _DrawPlane_ptr.asFunction<_dart_DrawPlane>();

  void DrawRay(
    Ray ray,
    Color color,
  ) {
    return _DrawRay(
      ray,
      color,
    );
  }

  late final _DrawRay_ptr = _lookup<ffi.NativeFunction<_c_DrawRay>>('DrawRay');
  late final _dart_DrawRay _DrawRay = _DrawRay_ptr.asFunction<_dart_DrawRay>();

  void DrawGrid(
    int slices,
    double spacing,
  ) {
    return _DrawGrid(
      slices,
      spacing,
    );
  }

  late final _DrawGrid_ptr =
      _lookup<ffi.NativeFunction<_c_DrawGrid>>('DrawGrid');
  late final _dart_DrawGrid _DrawGrid =
      _DrawGrid_ptr.asFunction<_dart_DrawGrid>();

  /// Model management functions
  Model LoadModel(
    ffi.Pointer<ffi.Int8> fileName,
  ) {
    return _LoadModel(
      fileName,
    );
  }

  late final _LoadModel_ptr =
      _lookup<ffi.NativeFunction<_c_LoadModel>>('LoadModel');
  late final _dart_LoadModel _LoadModel =
      _LoadModel_ptr.asFunction<_dart_LoadModel>();

  Model LoadModelFromMesh(
    Mesh mesh,
  ) {
    return _LoadModelFromMesh(
      mesh,
    );
  }

  late final _LoadModelFromMesh_ptr =
      _lookup<ffi.NativeFunction<_c_LoadModelFromMesh>>('LoadModelFromMesh');
  late final _dart_LoadModelFromMesh _LoadModelFromMesh =
      _LoadModelFromMesh_ptr.asFunction<_dart_LoadModelFromMesh>();

  void UnloadModel(
    Model model,
  ) {
    return _UnloadModel(
      model,
    );
  }

  late final _UnloadModel_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadModel>>('UnloadModel');
  late final _dart_UnloadModel _UnloadModel =
      _UnloadModel_ptr.asFunction<_dart_UnloadModel>();

  void UnloadModelKeepMeshes(
    Model model,
  ) {
    return _UnloadModelKeepMeshes(
      model,
    );
  }

  late final _UnloadModelKeepMeshes_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadModelKeepMeshes>>(
          'UnloadModelKeepMeshes');
  late final _dart_UnloadModelKeepMeshes _UnloadModelKeepMeshes =
      _UnloadModelKeepMeshes_ptr.asFunction<_dart_UnloadModelKeepMeshes>();

  BoundingBox GetModelBoundingBox(
    Model model,
  ) {
    return _GetModelBoundingBox(
      model,
    );
  }

  late final _GetModelBoundingBox_ptr =
      _lookup<ffi.NativeFunction<_c_GetModelBoundingBox>>(
          'GetModelBoundingBox');
  late final _dart_GetModelBoundingBox _GetModelBoundingBox =
      _GetModelBoundingBox_ptr.asFunction<_dart_GetModelBoundingBox>();

  /// Model drawing functions
  void DrawModel(
    Model model,
    Vector3 position,
    double scale,
    Color tint,
  ) {
    return _DrawModel(
      model,
      position,
      scale,
      tint,
    );
  }

  late final _DrawModel_ptr =
      _lookup<ffi.NativeFunction<_c_DrawModel>>('DrawModel');
  late final _dart_DrawModel _DrawModel =
      _DrawModel_ptr.asFunction<_dart_DrawModel>();

  void DrawModelEx(
    Model model,
    Vector3 position,
    Vector3 rotationAxis,
    double rotationAngle,
    Vector3 scale,
    Color tint,
  ) {
    return _DrawModelEx(
      model,
      position,
      rotationAxis,
      rotationAngle,
      scale,
      tint,
    );
  }

  late final _DrawModelEx_ptr =
      _lookup<ffi.NativeFunction<_c_DrawModelEx>>('DrawModelEx');
  late final _dart_DrawModelEx _DrawModelEx =
      _DrawModelEx_ptr.asFunction<_dart_DrawModelEx>();

  void DrawModelWires(
    Model model,
    Vector3 position,
    double scale,
    Color tint,
  ) {
    return _DrawModelWires(
      model,
      position,
      scale,
      tint,
    );
  }

  late final _DrawModelWires_ptr =
      _lookup<ffi.NativeFunction<_c_DrawModelWires>>('DrawModelWires');
  late final _dart_DrawModelWires _DrawModelWires =
      _DrawModelWires_ptr.asFunction<_dart_DrawModelWires>();

  void DrawModelWiresEx(
    Model model,
    Vector3 position,
    Vector3 rotationAxis,
    double rotationAngle,
    Vector3 scale,
    Color tint,
  ) {
    return _DrawModelWiresEx(
      model,
      position,
      rotationAxis,
      rotationAngle,
      scale,
      tint,
    );
  }

  late final _DrawModelWiresEx_ptr =
      _lookup<ffi.NativeFunction<_c_DrawModelWiresEx>>('DrawModelWiresEx');
  late final _dart_DrawModelWiresEx _DrawModelWiresEx =
      _DrawModelWiresEx_ptr.asFunction<_dart_DrawModelWiresEx>();

  void DrawBoundingBox(
    BoundingBox box,
    Color color,
  ) {
    return _DrawBoundingBox(
      box,
      color,
    );
  }

  late final _DrawBoundingBox_ptr =
      _lookup<ffi.NativeFunction<_c_DrawBoundingBox>>('DrawBoundingBox');
  late final _dart_DrawBoundingBox _DrawBoundingBox =
      _DrawBoundingBox_ptr.asFunction<_dart_DrawBoundingBox>();

  void DrawBillboard(
    Camera3D camera,
    Texture texture,
    Vector3 position,
    double size,
    Color tint,
  ) {
    return _DrawBillboard(
      camera,
      texture,
      position,
      size,
      tint,
    );
  }

  late final _DrawBillboard_ptr =
      _lookup<ffi.NativeFunction<_c_DrawBillboard>>('DrawBillboard');
  late final _dart_DrawBillboard _DrawBillboard =
      _DrawBillboard_ptr.asFunction<_dart_DrawBillboard>();

  void DrawBillboardRec(
    Camera3D camera,
    Texture texture,
    Rectangle source,
    Vector3 position,
    Vector2 size,
    Color tint,
  ) {
    return _DrawBillboardRec(
      camera,
      texture,
      source,
      position,
      size,
      tint,
    );
  }

  late final _DrawBillboardRec_ptr =
      _lookup<ffi.NativeFunction<_c_DrawBillboardRec>>('DrawBillboardRec');
  late final _dart_DrawBillboardRec _DrawBillboardRec =
      _DrawBillboardRec_ptr.asFunction<_dart_DrawBillboardRec>();

  void DrawBillboardPro(
    Camera3D camera,
    Texture texture,
    Rectangle source,
    Vector3 position,
    Vector3 up,
    Vector2 size,
    Vector2 origin,
    double rotation,
    Color tint,
  ) {
    return _DrawBillboardPro(
      camera,
      texture,
      source,
      position,
      up,
      size,
      origin,
      rotation,
      tint,
    );
  }

  late final _DrawBillboardPro_ptr =
      _lookup<ffi.NativeFunction<_c_DrawBillboardPro>>('DrawBillboardPro');
  late final _dart_DrawBillboardPro _DrawBillboardPro =
      _DrawBillboardPro_ptr.asFunction<_dart_DrawBillboardPro>();

  /// Mesh management functions
  void UploadMesh(
    ffi.Pointer<Mesh> mesh,
    int dynamic_1,
  ) {
    return _UploadMesh(
      mesh,
      dynamic_1,
    );
  }

  late final _UploadMesh_ptr =
      _lookup<ffi.NativeFunction<_c_UploadMesh>>('UploadMesh');
  late final _dart_UploadMesh _UploadMesh =
      _UploadMesh_ptr.asFunction<_dart_UploadMesh>();

  void UpdateMeshBuffer(
    Mesh mesh,
    int index,
    ffi.Pointer<ffi.Void> data,
    int dataSize,
    int offset,
  ) {
    return _UpdateMeshBuffer(
      mesh,
      index,
      data,
      dataSize,
      offset,
    );
  }

  late final _UpdateMeshBuffer_ptr =
      _lookup<ffi.NativeFunction<_c_UpdateMeshBuffer>>('UpdateMeshBuffer');
  late final _dart_UpdateMeshBuffer _UpdateMeshBuffer =
      _UpdateMeshBuffer_ptr.asFunction<_dart_UpdateMeshBuffer>();

  void UnloadMesh(
    Mesh mesh,
  ) {
    return _UnloadMesh(
      mesh,
    );
  }

  late final _UnloadMesh_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadMesh>>('UnloadMesh');
  late final _dart_UnloadMesh _UnloadMesh =
      _UnloadMesh_ptr.asFunction<_dart_UnloadMesh>();

  void DrawMesh(
    Mesh mesh,
    Material material,
    Matrix transform,
  ) {
    return _DrawMesh(
      mesh,
      material,
      transform,
    );
  }

  late final _DrawMesh_ptr =
      _lookup<ffi.NativeFunction<_c_DrawMesh>>('DrawMesh');
  late final _dart_DrawMesh _DrawMesh =
      _DrawMesh_ptr.asFunction<_dart_DrawMesh>();

  void DrawMeshInstanced(
    Mesh mesh,
    Material material,
    ffi.Pointer<Matrix> transforms,
    int instances,
  ) {
    return _DrawMeshInstanced(
      mesh,
      material,
      transforms,
      instances,
    );
  }

  late final _DrawMeshInstanced_ptr =
      _lookup<ffi.NativeFunction<_c_DrawMeshInstanced>>('DrawMeshInstanced');
  late final _dart_DrawMeshInstanced _DrawMeshInstanced =
      _DrawMeshInstanced_ptr.asFunction<_dart_DrawMeshInstanced>();

  int ExportMesh(
    Mesh mesh,
    ffi.Pointer<ffi.Int8> fileName,
  ) {
    return _ExportMesh(
      mesh,
      fileName,
    );
  }

  late final _ExportMesh_ptr =
      _lookup<ffi.NativeFunction<_c_ExportMesh>>('ExportMesh');
  late final _dart_ExportMesh _ExportMesh =
      _ExportMesh_ptr.asFunction<_dart_ExportMesh>();

  BoundingBox GetMeshBoundingBox(
    Mesh mesh,
  ) {
    return _GetMeshBoundingBox(
      mesh,
    );
  }

  late final _GetMeshBoundingBox_ptr =
      _lookup<ffi.NativeFunction<_c_GetMeshBoundingBox>>('GetMeshBoundingBox');
  late final _dart_GetMeshBoundingBox _GetMeshBoundingBox =
      _GetMeshBoundingBox_ptr.asFunction<_dart_GetMeshBoundingBox>();

  void GenMeshTangents(
    ffi.Pointer<Mesh> mesh,
  ) {
    return _GenMeshTangents(
      mesh,
    );
  }

  late final _GenMeshTangents_ptr =
      _lookup<ffi.NativeFunction<_c_GenMeshTangents>>('GenMeshTangents');
  late final _dart_GenMeshTangents _GenMeshTangents =
      _GenMeshTangents_ptr.asFunction<_dart_GenMeshTangents>();

  void GenMeshBinormals(
    ffi.Pointer<Mesh> mesh,
  ) {
    return _GenMeshBinormals(
      mesh,
    );
  }

  late final _GenMeshBinormals_ptr =
      _lookup<ffi.NativeFunction<_c_GenMeshBinormals>>('GenMeshBinormals');
  late final _dart_GenMeshBinormals _GenMeshBinormals =
      _GenMeshBinormals_ptr.asFunction<_dart_GenMeshBinormals>();

  /// Mesh generation functions
  Mesh GenMeshPoly(
    int sides,
    double radius,
  ) {
    return _GenMeshPoly(
      sides,
      radius,
    );
  }

  late final _GenMeshPoly_ptr =
      _lookup<ffi.NativeFunction<_c_GenMeshPoly>>('GenMeshPoly');
  late final _dart_GenMeshPoly _GenMeshPoly =
      _GenMeshPoly_ptr.asFunction<_dart_GenMeshPoly>();

  Mesh GenMeshPlane(
    double width,
    double length,
    int resX,
    int resZ,
  ) {
    return _GenMeshPlane(
      width,
      length,
      resX,
      resZ,
    );
  }

  late final _GenMeshPlane_ptr =
      _lookup<ffi.NativeFunction<_c_GenMeshPlane>>('GenMeshPlane');
  late final _dart_GenMeshPlane _GenMeshPlane =
      _GenMeshPlane_ptr.asFunction<_dart_GenMeshPlane>();

  Mesh GenMeshCube(
    double width,
    double height,
    double length,
  ) {
    return _GenMeshCube(
      width,
      height,
      length,
    );
  }

  late final _GenMeshCube_ptr =
      _lookup<ffi.NativeFunction<_c_GenMeshCube>>('GenMeshCube');
  late final _dart_GenMeshCube _GenMeshCube =
      _GenMeshCube_ptr.asFunction<_dart_GenMeshCube>();

  Mesh GenMeshSphere(
    double radius,
    int rings,
    int slices,
  ) {
    return _GenMeshSphere(
      radius,
      rings,
      slices,
    );
  }

  late final _GenMeshSphere_ptr =
      _lookup<ffi.NativeFunction<_c_GenMeshSphere>>('GenMeshSphere');
  late final _dart_GenMeshSphere _GenMeshSphere =
      _GenMeshSphere_ptr.asFunction<_dart_GenMeshSphere>();

  Mesh GenMeshHemiSphere(
    double radius,
    int rings,
    int slices,
  ) {
    return _GenMeshHemiSphere(
      radius,
      rings,
      slices,
    );
  }

  late final _GenMeshHemiSphere_ptr =
      _lookup<ffi.NativeFunction<_c_GenMeshHemiSphere>>('GenMeshHemiSphere');
  late final _dart_GenMeshHemiSphere _GenMeshHemiSphere =
      _GenMeshHemiSphere_ptr.asFunction<_dart_GenMeshHemiSphere>();

  Mesh GenMeshCylinder(
    double radius,
    double height,
    int slices,
  ) {
    return _GenMeshCylinder(
      radius,
      height,
      slices,
    );
  }

  late final _GenMeshCylinder_ptr =
      _lookup<ffi.NativeFunction<_c_GenMeshCylinder>>('GenMeshCylinder');
  late final _dart_GenMeshCylinder _GenMeshCylinder =
      _GenMeshCylinder_ptr.asFunction<_dart_GenMeshCylinder>();

  Mesh GenMeshCone(
    double radius,
    double height,
    int slices,
  ) {
    return _GenMeshCone(
      radius,
      height,
      slices,
    );
  }

  late final _GenMeshCone_ptr =
      _lookup<ffi.NativeFunction<_c_GenMeshCone>>('GenMeshCone');
  late final _dart_GenMeshCone _GenMeshCone =
      _GenMeshCone_ptr.asFunction<_dart_GenMeshCone>();

  Mesh GenMeshTorus(
    double radius,
    double size,
    int radSeg,
    int sides,
  ) {
    return _GenMeshTorus(
      radius,
      size,
      radSeg,
      sides,
    );
  }

  late final _GenMeshTorus_ptr =
      _lookup<ffi.NativeFunction<_c_GenMeshTorus>>('GenMeshTorus');
  late final _dart_GenMeshTorus _GenMeshTorus =
      _GenMeshTorus_ptr.asFunction<_dart_GenMeshTorus>();

  Mesh GenMeshKnot(
    double radius,
    double size,
    int radSeg,
    int sides,
  ) {
    return _GenMeshKnot(
      radius,
      size,
      radSeg,
      sides,
    );
  }

  late final _GenMeshKnot_ptr =
      _lookup<ffi.NativeFunction<_c_GenMeshKnot>>('GenMeshKnot');
  late final _dart_GenMeshKnot _GenMeshKnot =
      _GenMeshKnot_ptr.asFunction<_dart_GenMeshKnot>();

  Mesh GenMeshHeightmap(
    Image heightmap,
    Vector3 size,
  ) {
    return _GenMeshHeightmap(
      heightmap,
      size,
    );
  }

  late final _GenMeshHeightmap_ptr =
      _lookup<ffi.NativeFunction<_c_GenMeshHeightmap>>('GenMeshHeightmap');
  late final _dart_GenMeshHeightmap _GenMeshHeightmap =
      _GenMeshHeightmap_ptr.asFunction<_dart_GenMeshHeightmap>();

  Mesh GenMeshCubicmap(
    Image cubicmap,
    Vector3 cubeSize,
  ) {
    return _GenMeshCubicmap(
      cubicmap,
      cubeSize,
    );
  }

  late final _GenMeshCubicmap_ptr =
      _lookup<ffi.NativeFunction<_c_GenMeshCubicmap>>('GenMeshCubicmap');
  late final _dart_GenMeshCubicmap _GenMeshCubicmap =
      _GenMeshCubicmap_ptr.asFunction<_dart_GenMeshCubicmap>();

  /// Material loading/unloading functions
  ffi.Pointer<Material> LoadMaterials(
    ffi.Pointer<ffi.Int8> fileName,
    ffi.Pointer<ffi.Int32> materialCount,
  ) {
    return _LoadMaterials(
      fileName,
      materialCount,
    );
  }

  late final _LoadMaterials_ptr =
      _lookup<ffi.NativeFunction<_c_LoadMaterials>>('LoadMaterials');
  late final _dart_LoadMaterials _LoadMaterials =
      _LoadMaterials_ptr.asFunction<_dart_LoadMaterials>();

  Material LoadMaterialDefault() {
    return _LoadMaterialDefault();
  }

  late final _LoadMaterialDefault_ptr =
      _lookup<ffi.NativeFunction<_c_LoadMaterialDefault>>(
          'LoadMaterialDefault');
  late final _dart_LoadMaterialDefault _LoadMaterialDefault =
      _LoadMaterialDefault_ptr.asFunction<_dart_LoadMaterialDefault>();

  void UnloadMaterial(
    Material material,
  ) {
    return _UnloadMaterial(
      material,
    );
  }

  late final _UnloadMaterial_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadMaterial>>('UnloadMaterial');
  late final _dart_UnloadMaterial _UnloadMaterial =
      _UnloadMaterial_ptr.asFunction<_dart_UnloadMaterial>();

  void SetMaterialTexture(
    ffi.Pointer<Material> material,
    int mapType,
    Texture texture,
  ) {
    return _SetMaterialTexture(
      material,
      mapType,
      texture,
    );
  }

  late final _SetMaterialTexture_ptr =
      _lookup<ffi.NativeFunction<_c_SetMaterialTexture>>('SetMaterialTexture');
  late final _dart_SetMaterialTexture _SetMaterialTexture =
      _SetMaterialTexture_ptr.asFunction<_dart_SetMaterialTexture>();

  void SetModelMeshMaterial(
    ffi.Pointer<Model> model,
    int meshId,
    int materialId,
  ) {
    return _SetModelMeshMaterial(
      model,
      meshId,
      materialId,
    );
  }

  late final _SetModelMeshMaterial_ptr =
      _lookup<ffi.NativeFunction<_c_SetModelMeshMaterial>>(
          'SetModelMeshMaterial');
  late final _dart_SetModelMeshMaterial _SetModelMeshMaterial =
      _SetModelMeshMaterial_ptr.asFunction<_dart_SetModelMeshMaterial>();

  /// Model animations loading/unloading functions
  ffi.Pointer<ModelAnimation> LoadModelAnimations(
    ffi.Pointer<ffi.Int8> fileName,
    ffi.Pointer<ffi.Uint32> animCount,
  ) {
    return _LoadModelAnimations(
      fileName,
      animCount,
    );
  }

  late final _LoadModelAnimations_ptr =
      _lookup<ffi.NativeFunction<_c_LoadModelAnimations>>(
          'LoadModelAnimations');
  late final _dart_LoadModelAnimations _LoadModelAnimations =
      _LoadModelAnimations_ptr.asFunction<_dart_LoadModelAnimations>();

  void UpdateModelAnimation(
    Model model,
    ModelAnimation anim,
    int frame,
  ) {
    return _UpdateModelAnimation(
      model,
      anim,
      frame,
    );
  }

  late final _UpdateModelAnimation_ptr =
      _lookup<ffi.NativeFunction<_c_UpdateModelAnimation>>(
          'UpdateModelAnimation');
  late final _dart_UpdateModelAnimation _UpdateModelAnimation =
      _UpdateModelAnimation_ptr.asFunction<_dart_UpdateModelAnimation>();

  void UnloadModelAnimation(
    ModelAnimation anim,
  ) {
    return _UnloadModelAnimation(
      anim,
    );
  }

  late final _UnloadModelAnimation_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadModelAnimation>>(
          'UnloadModelAnimation');
  late final _dart_UnloadModelAnimation _UnloadModelAnimation =
      _UnloadModelAnimation_ptr.asFunction<_dart_UnloadModelAnimation>();

  void UnloadModelAnimations(
    ffi.Pointer<ModelAnimation> animations,
    int count,
  ) {
    return _UnloadModelAnimations(
      animations,
      count,
    );
  }

  late final _UnloadModelAnimations_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadModelAnimations>>(
          'UnloadModelAnimations');
  late final _dart_UnloadModelAnimations _UnloadModelAnimations =
      _UnloadModelAnimations_ptr.asFunction<_dart_UnloadModelAnimations>();

  int IsModelAnimationValid(
    Model model,
    ModelAnimation anim,
  ) {
    return _IsModelAnimationValid(
      model,
      anim,
    );
  }

  late final _IsModelAnimationValid_ptr =
      _lookup<ffi.NativeFunction<_c_IsModelAnimationValid>>(
          'IsModelAnimationValid');
  late final _dart_IsModelAnimationValid _IsModelAnimationValid =
      _IsModelAnimationValid_ptr.asFunction<_dart_IsModelAnimationValid>();

  /// Collision detection functions
  int CheckCollisionSpheres(
    Vector3 center1,
    double radius1,
    Vector3 center2,
    double radius2,
  ) {
    return _CheckCollisionSpheres(
      center1,
      radius1,
      center2,
      radius2,
    );
  }

  late final _CheckCollisionSpheres_ptr =
      _lookup<ffi.NativeFunction<_c_CheckCollisionSpheres>>(
          'CheckCollisionSpheres');
  late final _dart_CheckCollisionSpheres _CheckCollisionSpheres =
      _CheckCollisionSpheres_ptr.asFunction<_dart_CheckCollisionSpheres>();

  int CheckCollisionBoxes(
    BoundingBox box1,
    BoundingBox box2,
  ) {
    return _CheckCollisionBoxes(
      box1,
      box2,
    );
  }

  late final _CheckCollisionBoxes_ptr =
      _lookup<ffi.NativeFunction<_c_CheckCollisionBoxes>>(
          'CheckCollisionBoxes');
  late final _dart_CheckCollisionBoxes _CheckCollisionBoxes =
      _CheckCollisionBoxes_ptr.asFunction<_dart_CheckCollisionBoxes>();

  int CheckCollisionBoxSphere(
    BoundingBox box,
    Vector3 center,
    double radius,
  ) {
    return _CheckCollisionBoxSphere(
      box,
      center,
      radius,
    );
  }

  late final _CheckCollisionBoxSphere_ptr =
      _lookup<ffi.NativeFunction<_c_CheckCollisionBoxSphere>>(
          'CheckCollisionBoxSphere');
  late final _dart_CheckCollisionBoxSphere _CheckCollisionBoxSphere =
      _CheckCollisionBoxSphere_ptr.asFunction<_dart_CheckCollisionBoxSphere>();

  RayCollision GetRayCollisionSphere(
    Ray ray,
    Vector3 center,
    double radius,
  ) {
    return _GetRayCollisionSphere(
      ray,
      center,
      radius,
    );
  }

  late final _GetRayCollisionSphere_ptr =
      _lookup<ffi.NativeFunction<_c_GetRayCollisionSphere>>(
          'GetRayCollisionSphere');
  late final _dart_GetRayCollisionSphere _GetRayCollisionSphere =
      _GetRayCollisionSphere_ptr.asFunction<_dart_GetRayCollisionSphere>();

  RayCollision GetRayCollisionBox(
    Ray ray,
    BoundingBox box,
  ) {
    return _GetRayCollisionBox(
      ray,
      box,
    );
  }

  late final _GetRayCollisionBox_ptr =
      _lookup<ffi.NativeFunction<_c_GetRayCollisionBox>>('GetRayCollisionBox');
  late final _dart_GetRayCollisionBox _GetRayCollisionBox =
      _GetRayCollisionBox_ptr.asFunction<_dart_GetRayCollisionBox>();

  RayCollision GetRayCollisionModel(
    Ray ray,
    Model model,
  ) {
    return _GetRayCollisionModel(
      ray,
      model,
    );
  }

  late final _GetRayCollisionModel_ptr =
      _lookup<ffi.NativeFunction<_c_GetRayCollisionModel>>(
          'GetRayCollisionModel');
  late final _dart_GetRayCollisionModel _GetRayCollisionModel =
      _GetRayCollisionModel_ptr.asFunction<_dart_GetRayCollisionModel>();

  RayCollision GetRayCollisionMesh(
    Ray ray,
    Mesh mesh,
    Matrix transform,
  ) {
    return _GetRayCollisionMesh(
      ray,
      mesh,
      transform,
    );
  }

  late final _GetRayCollisionMesh_ptr =
      _lookup<ffi.NativeFunction<_c_GetRayCollisionMesh>>(
          'GetRayCollisionMesh');
  late final _dart_GetRayCollisionMesh _GetRayCollisionMesh =
      _GetRayCollisionMesh_ptr.asFunction<_dart_GetRayCollisionMesh>();

  RayCollision GetRayCollisionTriangle(
    Ray ray,
    Vector3 p1,
    Vector3 p2,
    Vector3 p3,
  ) {
    return _GetRayCollisionTriangle(
      ray,
      p1,
      p2,
      p3,
    );
  }

  late final _GetRayCollisionTriangle_ptr =
      _lookup<ffi.NativeFunction<_c_GetRayCollisionTriangle>>(
          'GetRayCollisionTriangle');
  late final _dart_GetRayCollisionTriangle _GetRayCollisionTriangle =
      _GetRayCollisionTriangle_ptr.asFunction<_dart_GetRayCollisionTriangle>();

  RayCollision GetRayCollisionQuad(
    Ray ray,
    Vector3 p1,
    Vector3 p2,
    Vector3 p3,
    Vector3 p4,
  ) {
    return _GetRayCollisionQuad(
      ray,
      p1,
      p2,
      p3,
      p4,
    );
  }

  late final _GetRayCollisionQuad_ptr =
      _lookup<ffi.NativeFunction<_c_GetRayCollisionQuad>>(
          'GetRayCollisionQuad');
  late final _dart_GetRayCollisionQuad _GetRayCollisionQuad =
      _GetRayCollisionQuad_ptr.asFunction<_dart_GetRayCollisionQuad>();

  /// Audio device management functions
  void InitAudioDevice() {
    return _InitAudioDevice();
  }

  late final _InitAudioDevice_ptr =
      _lookup<ffi.NativeFunction<_c_InitAudioDevice>>('InitAudioDevice');
  late final _dart_InitAudioDevice _InitAudioDevice =
      _InitAudioDevice_ptr.asFunction<_dart_InitAudioDevice>();

  void CloseAudioDevice() {
    return _CloseAudioDevice();
  }

  late final _CloseAudioDevice_ptr =
      _lookup<ffi.NativeFunction<_c_CloseAudioDevice>>('CloseAudioDevice');
  late final _dart_CloseAudioDevice _CloseAudioDevice =
      _CloseAudioDevice_ptr.asFunction<_dart_CloseAudioDevice>();

  int IsAudioDeviceReady() {
    return _IsAudioDeviceReady();
  }

  late final _IsAudioDeviceReady_ptr =
      _lookup<ffi.NativeFunction<_c_IsAudioDeviceReady>>('IsAudioDeviceReady');
  late final _dart_IsAudioDeviceReady _IsAudioDeviceReady =
      _IsAudioDeviceReady_ptr.asFunction<_dart_IsAudioDeviceReady>();

  void SetMasterVolume(
    double volume,
  ) {
    return _SetMasterVolume(
      volume,
    );
  }

  late final _SetMasterVolume_ptr =
      _lookup<ffi.NativeFunction<_c_SetMasterVolume>>('SetMasterVolume');
  late final _dart_SetMasterVolume _SetMasterVolume =
      _SetMasterVolume_ptr.asFunction<_dart_SetMasterVolume>();

  /// Wave/Sound loading/unloading functions
  Wave LoadWave(
    ffi.Pointer<ffi.Int8> fileName,
  ) {
    return _LoadWave(
      fileName,
    );
  }

  late final _LoadWave_ptr =
      _lookup<ffi.NativeFunction<_c_LoadWave>>('LoadWave');
  late final _dart_LoadWave _LoadWave =
      _LoadWave_ptr.asFunction<_dart_LoadWave>();

  Wave LoadWaveFromMemory(
    ffi.Pointer<ffi.Int8> fileType,
    ffi.Pointer<ffi.Uint8> fileData,
    int dataSize,
  ) {
    return _LoadWaveFromMemory(
      fileType,
      fileData,
      dataSize,
    );
  }

  late final _LoadWaveFromMemory_ptr =
      _lookup<ffi.NativeFunction<_c_LoadWaveFromMemory>>('LoadWaveFromMemory');
  late final _dart_LoadWaveFromMemory _LoadWaveFromMemory =
      _LoadWaveFromMemory_ptr.asFunction<_dart_LoadWaveFromMemory>();

  Sound LoadSound(
    ffi.Pointer<ffi.Int8> fileName,
  ) {
    return _LoadSound(
      fileName,
    );
  }

  late final _LoadSound_ptr =
      _lookup<ffi.NativeFunction<_c_LoadSound>>('LoadSound');
  late final _dart_LoadSound _LoadSound =
      _LoadSound_ptr.asFunction<_dart_LoadSound>();

  Sound LoadSoundFromWave(
    Wave wave,
  ) {
    return _LoadSoundFromWave(
      wave,
    );
  }

  late final _LoadSoundFromWave_ptr =
      _lookup<ffi.NativeFunction<_c_LoadSoundFromWave>>('LoadSoundFromWave');
  late final _dart_LoadSoundFromWave _LoadSoundFromWave =
      _LoadSoundFromWave_ptr.asFunction<_dart_LoadSoundFromWave>();

  void UpdateSound(
    Sound sound,
    ffi.Pointer<ffi.Void> data,
    int sampleCount,
  ) {
    return _UpdateSound(
      sound,
      data,
      sampleCount,
    );
  }

  late final _UpdateSound_ptr =
      _lookup<ffi.NativeFunction<_c_UpdateSound>>('UpdateSound');
  late final _dart_UpdateSound _UpdateSound =
      _UpdateSound_ptr.asFunction<_dart_UpdateSound>();

  void UnloadWave(
    Wave wave,
  ) {
    return _UnloadWave(
      wave,
    );
  }

  late final _UnloadWave_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadWave>>('UnloadWave');
  late final _dart_UnloadWave _UnloadWave =
      _UnloadWave_ptr.asFunction<_dart_UnloadWave>();

  void UnloadSound(
    Sound sound,
  ) {
    return _UnloadSound(
      sound,
    );
  }

  late final _UnloadSound_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadSound>>('UnloadSound');
  late final _dart_UnloadSound _UnloadSound =
      _UnloadSound_ptr.asFunction<_dart_UnloadSound>();

  int ExportWave(
    Wave wave,
    ffi.Pointer<ffi.Int8> fileName,
  ) {
    return _ExportWave(
      wave,
      fileName,
    );
  }

  late final _ExportWave_ptr =
      _lookup<ffi.NativeFunction<_c_ExportWave>>('ExportWave');
  late final _dart_ExportWave _ExportWave =
      _ExportWave_ptr.asFunction<_dart_ExportWave>();

  int ExportWaveAsCode(
    Wave wave,
    ffi.Pointer<ffi.Int8> fileName,
  ) {
    return _ExportWaveAsCode(
      wave,
      fileName,
    );
  }

  late final _ExportWaveAsCode_ptr =
      _lookup<ffi.NativeFunction<_c_ExportWaveAsCode>>('ExportWaveAsCode');
  late final _dart_ExportWaveAsCode _ExportWaveAsCode =
      _ExportWaveAsCode_ptr.asFunction<_dart_ExportWaveAsCode>();

  /// Wave/Sound management functions
  void PlaySound(
    Sound sound,
  ) {
    return _PlaySound(
      sound,
    );
  }

  late final _PlaySound_ptr =
      _lookup<ffi.NativeFunction<_c_PlaySound>>('PlaySound');
  late final _dart_PlaySound _PlaySound =
      _PlaySound_ptr.asFunction<_dart_PlaySound>();

  void StopSound(
    Sound sound,
  ) {
    return _StopSound(
      sound,
    );
  }

  late final _StopSound_ptr =
      _lookup<ffi.NativeFunction<_c_StopSound>>('StopSound');
  late final _dart_StopSound _StopSound =
      _StopSound_ptr.asFunction<_dart_StopSound>();

  void PauseSound(
    Sound sound,
  ) {
    return _PauseSound(
      sound,
    );
  }

  late final _PauseSound_ptr =
      _lookup<ffi.NativeFunction<_c_PauseSound>>('PauseSound');
  late final _dart_PauseSound _PauseSound =
      _PauseSound_ptr.asFunction<_dart_PauseSound>();

  void ResumeSound(
    Sound sound,
  ) {
    return _ResumeSound(
      sound,
    );
  }

  late final _ResumeSound_ptr =
      _lookup<ffi.NativeFunction<_c_ResumeSound>>('ResumeSound');
  late final _dart_ResumeSound _ResumeSound =
      _ResumeSound_ptr.asFunction<_dart_ResumeSound>();

  void PlaySoundMulti(
    Sound sound,
  ) {
    return _PlaySoundMulti(
      sound,
    );
  }

  late final _PlaySoundMulti_ptr =
      _lookup<ffi.NativeFunction<_c_PlaySoundMulti>>('PlaySoundMulti');
  late final _dart_PlaySoundMulti _PlaySoundMulti =
      _PlaySoundMulti_ptr.asFunction<_dart_PlaySoundMulti>();

  void StopSoundMulti() {
    return _StopSoundMulti();
  }

  late final _StopSoundMulti_ptr =
      _lookup<ffi.NativeFunction<_c_StopSoundMulti>>('StopSoundMulti');
  late final _dart_StopSoundMulti _StopSoundMulti =
      _StopSoundMulti_ptr.asFunction<_dart_StopSoundMulti>();

  int GetSoundsPlaying() {
    return _GetSoundsPlaying();
  }

  late final _GetSoundsPlaying_ptr =
      _lookup<ffi.NativeFunction<_c_GetSoundsPlaying>>('GetSoundsPlaying');
  late final _dart_GetSoundsPlaying _GetSoundsPlaying =
      _GetSoundsPlaying_ptr.asFunction<_dart_GetSoundsPlaying>();

  int IsSoundPlaying(
    Sound sound,
  ) {
    return _IsSoundPlaying(
      sound,
    );
  }

  late final _IsSoundPlaying_ptr =
      _lookup<ffi.NativeFunction<_c_IsSoundPlaying>>('IsSoundPlaying');
  late final _dart_IsSoundPlaying _IsSoundPlaying =
      _IsSoundPlaying_ptr.asFunction<_dart_IsSoundPlaying>();

  void SetSoundVolume(
    Sound sound,
    double volume,
  ) {
    return _SetSoundVolume(
      sound,
      volume,
    );
  }

  late final _SetSoundVolume_ptr =
      _lookup<ffi.NativeFunction<_c_SetSoundVolume>>('SetSoundVolume');
  late final _dart_SetSoundVolume _SetSoundVolume =
      _SetSoundVolume_ptr.asFunction<_dart_SetSoundVolume>();

  void SetSoundPitch(
    Sound sound,
    double pitch,
  ) {
    return _SetSoundPitch(
      sound,
      pitch,
    );
  }

  late final _SetSoundPitch_ptr =
      _lookup<ffi.NativeFunction<_c_SetSoundPitch>>('SetSoundPitch');
  late final _dart_SetSoundPitch _SetSoundPitch =
      _SetSoundPitch_ptr.asFunction<_dart_SetSoundPitch>();

  void WaveFormat(
    ffi.Pointer<Wave> wave,
    int sampleRate,
    int sampleSize,
    int channels,
  ) {
    return _WaveFormat(
      wave,
      sampleRate,
      sampleSize,
      channels,
    );
  }

  late final _WaveFormat_ptr =
      _lookup<ffi.NativeFunction<_c_WaveFormat>>('WaveFormat');
  late final _dart_WaveFormat _WaveFormat =
      _WaveFormat_ptr.asFunction<_dart_WaveFormat>();

  Wave WaveCopy(
    Wave wave,
  ) {
    return _WaveCopy(
      wave,
    );
  }

  late final _WaveCopy_ptr =
      _lookup<ffi.NativeFunction<_c_WaveCopy>>('WaveCopy');
  late final _dart_WaveCopy _WaveCopy =
      _WaveCopy_ptr.asFunction<_dart_WaveCopy>();

  void WaveCrop(
    ffi.Pointer<Wave> wave,
    int initSample,
    int finalSample,
  ) {
    return _WaveCrop(
      wave,
      initSample,
      finalSample,
    );
  }

  late final _WaveCrop_ptr =
      _lookup<ffi.NativeFunction<_c_WaveCrop>>('WaveCrop');
  late final _dart_WaveCrop _WaveCrop =
      _WaveCrop_ptr.asFunction<_dart_WaveCrop>();

  ffi.Pointer<ffi.Float> LoadWaveSamples(
    Wave wave,
  ) {
    return _LoadWaveSamples(
      wave,
    );
  }

  late final _LoadWaveSamples_ptr =
      _lookup<ffi.NativeFunction<_c_LoadWaveSamples>>('LoadWaveSamples');
  late final _dart_LoadWaveSamples _LoadWaveSamples =
      _LoadWaveSamples_ptr.asFunction<_dart_LoadWaveSamples>();

  void UnloadWaveSamples(
    ffi.Pointer<ffi.Float> samples,
  ) {
    return _UnloadWaveSamples(
      samples,
    );
  }

  late final _UnloadWaveSamples_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadWaveSamples>>('UnloadWaveSamples');
  late final _dart_UnloadWaveSamples _UnloadWaveSamples =
      _UnloadWaveSamples_ptr.asFunction<_dart_UnloadWaveSamples>();

  /// Music management functions
  Music LoadMusicStream(
    ffi.Pointer<ffi.Int8> fileName,
  ) {
    return _LoadMusicStream(
      fileName,
    );
  }

  late final _LoadMusicStream_ptr =
      _lookup<ffi.NativeFunction<_c_LoadMusicStream>>('LoadMusicStream');
  late final _dart_LoadMusicStream _LoadMusicStream =
      _LoadMusicStream_ptr.asFunction<_dart_LoadMusicStream>();

  Music LoadMusicStreamFromMemory(
    ffi.Pointer<ffi.Int8> fileType,
    ffi.Pointer<ffi.Uint8> data,
    int dataSize,
  ) {
    return _LoadMusicStreamFromMemory(
      fileType,
      data,
      dataSize,
    );
  }

  late final _LoadMusicStreamFromMemory_ptr =
      _lookup<ffi.NativeFunction<_c_LoadMusicStreamFromMemory>>(
          'LoadMusicStreamFromMemory');
  late final _dart_LoadMusicStreamFromMemory _LoadMusicStreamFromMemory =
      _LoadMusicStreamFromMemory_ptr.asFunction<
          _dart_LoadMusicStreamFromMemory>();

  void UnloadMusicStream(
    Music music,
  ) {
    return _UnloadMusicStream(
      music,
    );
  }

  late final _UnloadMusicStream_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadMusicStream>>('UnloadMusicStream');
  late final _dart_UnloadMusicStream _UnloadMusicStream =
      _UnloadMusicStream_ptr.asFunction<_dart_UnloadMusicStream>();

  void PlayMusicStream(
    Music music,
  ) {
    return _PlayMusicStream(
      music,
    );
  }

  late final _PlayMusicStream_ptr =
      _lookup<ffi.NativeFunction<_c_PlayMusicStream>>('PlayMusicStream');
  late final _dart_PlayMusicStream _PlayMusicStream =
      _PlayMusicStream_ptr.asFunction<_dart_PlayMusicStream>();

  int IsMusicStreamPlaying(
    Music music,
  ) {
    return _IsMusicStreamPlaying(
      music,
    );
  }

  late final _IsMusicStreamPlaying_ptr =
      _lookup<ffi.NativeFunction<_c_IsMusicStreamPlaying>>(
          'IsMusicStreamPlaying');
  late final _dart_IsMusicStreamPlaying _IsMusicStreamPlaying =
      _IsMusicStreamPlaying_ptr.asFunction<_dart_IsMusicStreamPlaying>();

  void UpdateMusicStream(
    Music music,
  ) {
    return _UpdateMusicStream(
      music,
    );
  }

  late final _UpdateMusicStream_ptr =
      _lookup<ffi.NativeFunction<_c_UpdateMusicStream>>('UpdateMusicStream');
  late final _dart_UpdateMusicStream _UpdateMusicStream =
      _UpdateMusicStream_ptr.asFunction<_dart_UpdateMusicStream>();

  void StopMusicStream(
    Music music,
  ) {
    return _StopMusicStream(
      music,
    );
  }

  late final _StopMusicStream_ptr =
      _lookup<ffi.NativeFunction<_c_StopMusicStream>>('StopMusicStream');
  late final _dart_StopMusicStream _StopMusicStream =
      _StopMusicStream_ptr.asFunction<_dart_StopMusicStream>();

  void PauseMusicStream(
    Music music,
  ) {
    return _PauseMusicStream(
      music,
    );
  }

  late final _PauseMusicStream_ptr =
      _lookup<ffi.NativeFunction<_c_PauseMusicStream>>('PauseMusicStream');
  late final _dart_PauseMusicStream _PauseMusicStream =
      _PauseMusicStream_ptr.asFunction<_dart_PauseMusicStream>();

  void ResumeMusicStream(
    Music music,
  ) {
    return _ResumeMusicStream(
      music,
    );
  }

  late final _ResumeMusicStream_ptr =
      _lookup<ffi.NativeFunction<_c_ResumeMusicStream>>('ResumeMusicStream');
  late final _dart_ResumeMusicStream _ResumeMusicStream =
      _ResumeMusicStream_ptr.asFunction<_dart_ResumeMusicStream>();

  void SeekMusicStream(
    Music music,
    double position,
  ) {
    return _SeekMusicStream(
      music,
      position,
    );
  }

  late final _SeekMusicStream_ptr =
      _lookup<ffi.NativeFunction<_c_SeekMusicStream>>('SeekMusicStream');
  late final _dart_SeekMusicStream _SeekMusicStream =
      _SeekMusicStream_ptr.asFunction<_dart_SeekMusicStream>();

  void SetMusicVolume(
    Music music,
    double volume,
  ) {
    return _SetMusicVolume(
      music,
      volume,
    );
  }

  late final _SetMusicVolume_ptr =
      _lookup<ffi.NativeFunction<_c_SetMusicVolume>>('SetMusicVolume');
  late final _dart_SetMusicVolume _SetMusicVolume =
      _SetMusicVolume_ptr.asFunction<_dart_SetMusicVolume>();

  void SetMusicPitch(
    Music music,
    double pitch,
  ) {
    return _SetMusicPitch(
      music,
      pitch,
    );
  }

  late final _SetMusicPitch_ptr =
      _lookup<ffi.NativeFunction<_c_SetMusicPitch>>('SetMusicPitch');
  late final _dart_SetMusicPitch _SetMusicPitch =
      _SetMusicPitch_ptr.asFunction<_dart_SetMusicPitch>();

  double GetMusicTimeLength(
    Music music,
  ) {
    return _GetMusicTimeLength(
      music,
    );
  }

  late final _GetMusicTimeLength_ptr =
      _lookup<ffi.NativeFunction<_c_GetMusicTimeLength>>('GetMusicTimeLength');
  late final _dart_GetMusicTimeLength _GetMusicTimeLength =
      _GetMusicTimeLength_ptr.asFunction<_dart_GetMusicTimeLength>();

  double GetMusicTimePlayed(
    Music music,
  ) {
    return _GetMusicTimePlayed(
      music,
    );
  }

  late final _GetMusicTimePlayed_ptr =
      _lookup<ffi.NativeFunction<_c_GetMusicTimePlayed>>('GetMusicTimePlayed');
  late final _dart_GetMusicTimePlayed _GetMusicTimePlayed =
      _GetMusicTimePlayed_ptr.asFunction<_dart_GetMusicTimePlayed>();

  /// AudioStream management functions
  AudioStream LoadAudioStream(
    int sampleRate,
    int sampleSize,
    int channels,
  ) {
    return _LoadAudioStream(
      sampleRate,
      sampleSize,
      channels,
    );
  }

  late final _LoadAudioStream_ptr =
      _lookup<ffi.NativeFunction<_c_LoadAudioStream>>('LoadAudioStream');
  late final _dart_LoadAudioStream _LoadAudioStream =
      _LoadAudioStream_ptr.asFunction<_dart_LoadAudioStream>();

  void UnloadAudioStream(
    AudioStream stream,
  ) {
    return _UnloadAudioStream(
      stream,
    );
  }

  late final _UnloadAudioStream_ptr =
      _lookup<ffi.NativeFunction<_c_UnloadAudioStream>>('UnloadAudioStream');
  late final _dart_UnloadAudioStream _UnloadAudioStream =
      _UnloadAudioStream_ptr.asFunction<_dart_UnloadAudioStream>();

  void UpdateAudioStream(
    AudioStream stream,
    ffi.Pointer<ffi.Void> data,
    int frameCount,
  ) {
    return _UpdateAudioStream(
      stream,
      data,
      frameCount,
    );
  }

  late final _UpdateAudioStream_ptr =
      _lookup<ffi.NativeFunction<_c_UpdateAudioStream>>('UpdateAudioStream');
  late final _dart_UpdateAudioStream _UpdateAudioStream =
      _UpdateAudioStream_ptr.asFunction<_dart_UpdateAudioStream>();

  int IsAudioStreamProcessed(
    AudioStream stream,
  ) {
    return _IsAudioStreamProcessed(
      stream,
    );
  }

  late final _IsAudioStreamProcessed_ptr =
      _lookup<ffi.NativeFunction<_c_IsAudioStreamProcessed>>(
          'IsAudioStreamProcessed');
  late final _dart_IsAudioStreamProcessed _IsAudioStreamProcessed =
      _IsAudioStreamProcessed_ptr.asFunction<_dart_IsAudioStreamProcessed>();

  void PlayAudioStream(
    AudioStream stream,
  ) {
    return _PlayAudioStream(
      stream,
    );
  }

  late final _PlayAudioStream_ptr =
      _lookup<ffi.NativeFunction<_c_PlayAudioStream>>('PlayAudioStream');
  late final _dart_PlayAudioStream _PlayAudioStream =
      _PlayAudioStream_ptr.asFunction<_dart_PlayAudioStream>();

  void PauseAudioStream(
    AudioStream stream,
  ) {
    return _PauseAudioStream(
      stream,
    );
  }

  late final _PauseAudioStream_ptr =
      _lookup<ffi.NativeFunction<_c_PauseAudioStream>>('PauseAudioStream');
  late final _dart_PauseAudioStream _PauseAudioStream =
      _PauseAudioStream_ptr.asFunction<_dart_PauseAudioStream>();

  void ResumeAudioStream(
    AudioStream stream,
  ) {
    return _ResumeAudioStream(
      stream,
    );
  }

  late final _ResumeAudioStream_ptr =
      _lookup<ffi.NativeFunction<_c_ResumeAudioStream>>('ResumeAudioStream');
  late final _dart_ResumeAudioStream _ResumeAudioStream =
      _ResumeAudioStream_ptr.asFunction<_dart_ResumeAudioStream>();

  int IsAudioStreamPlaying(
    AudioStream stream,
  ) {
    return _IsAudioStreamPlaying(
      stream,
    );
  }

  late final _IsAudioStreamPlaying_ptr =
      _lookup<ffi.NativeFunction<_c_IsAudioStreamPlaying>>(
          'IsAudioStreamPlaying');
  late final _dart_IsAudioStreamPlaying _IsAudioStreamPlaying =
      _IsAudioStreamPlaying_ptr.asFunction<_dart_IsAudioStreamPlaying>();

  void StopAudioStream(
    AudioStream stream,
  ) {
    return _StopAudioStream(
      stream,
    );
  }

  late final _StopAudioStream_ptr =
      _lookup<ffi.NativeFunction<_c_StopAudioStream>>('StopAudioStream');
  late final _dart_StopAudioStream _StopAudioStream =
      _StopAudioStream_ptr.asFunction<_dart_StopAudioStream>();

  void SetAudioStreamVolume(
    AudioStream stream,
    double volume,
  ) {
    return _SetAudioStreamVolume(
      stream,
      volume,
    );
  }

  late final _SetAudioStreamVolume_ptr =
      _lookup<ffi.NativeFunction<_c_SetAudioStreamVolume>>(
          'SetAudioStreamVolume');
  late final _dart_SetAudioStreamVolume _SetAudioStreamVolume =
      _SetAudioStreamVolume_ptr.asFunction<_dart_SetAudioStreamVolume>();

  void SetAudioStreamPitch(
    AudioStream stream,
    double pitch,
  ) {
    return _SetAudioStreamPitch(
      stream,
      pitch,
    );
  }

  late final _SetAudioStreamPitch_ptr =
      _lookup<ffi.NativeFunction<_c_SetAudioStreamPitch>>(
          'SetAudioStreamPitch');
  late final _dart_SetAudioStreamPitch _SetAudioStreamPitch =
      _SetAudioStreamPitch_ptr.asFunction<_dart_SetAudioStreamPitch>();

  void SetAudioStreamBufferSizeDefault(
    int size,
  ) {
    return _SetAudioStreamBufferSizeDefault(
      size,
    );
  }

  late final _SetAudioStreamBufferSizeDefault_ptr =
      _lookup<ffi.NativeFunction<_c_SetAudioStreamBufferSizeDefault>>(
          'SetAudioStreamBufferSizeDefault');
  late final _dart_SetAudioStreamBufferSizeDefault
      _SetAudioStreamBufferSizeDefault = _SetAudioStreamBufferSizeDefault_ptr
          .asFunction<_dart_SetAudioStreamBufferSizeDefault>();

  /// Creates an object of Vector2
  Vector2 CreateVector2(
    double x,
    double y,
  ) {
    return _CreateVector2(
      x,
      y,
    );
  }

  late final _CreateVector2_ptr =
      _lookup<ffi.NativeFunction<_c_CreateVector2>>('CreateVector2');
  late final _dart_CreateVector2 _CreateVector2 =
      _CreateVector2_ptr.asFunction<_dart_CreateVector2>();

  /// Creates an object of Color
  Color CreateColor(
    int r,
    int g,
    int b,
    int a,
  ) {
    return _CreateColor(
      r,
      g,
      b,
      a,
    );
  }

  late final _CreateColor_ptr =
      _lookup<ffi.NativeFunction<_c_CreateColor>>('CreateColor');
  late final _dart_CreateColor _CreateColor =
      _CreateColor_ptr.asFunction<_dart_CreateColor>();

  /// Creates an object of Image
  Image CreateImage(
    ffi.Pointer<ffi.Void> data,
    int width,
    int height,
    int mipmaps,
    int format,
  ) {
    return _CreateImage(
      data,
      width,
      height,
      mipmaps,
      format,
    );
  }

  late final _CreateImage_ptr =
      _lookup<ffi.NativeFunction<_c_CreateImage>>('CreateImage');
  late final _dart_CreateImage _CreateImage =
      _CreateImage_ptr.asFunction<_dart_CreateImage>();

  /// Creates an object of Camera2D
  Camera2D CreateCamera2D(
    Vector2 offset,
    Vector2 target,
    double rotation,
    double zoom,
  ) {
    return _CreateCamera2D(
      offset,
      target,
      rotation,
      zoom,
    );
  }

  late final _CreateCamera2D_ptr =
      _lookup<ffi.NativeFunction<_c_CreateCamera2D>>('CreateCamera2D');
  late final _dart_CreateCamera2D _CreateCamera2D =
      _CreateCamera2D_ptr.asFunction<_dart_CreateCamera2D>();
}

abstract class bool {
  static const int false_1 = 0;
  static const int true_1 = 1;
}

/// Vector2, 2 components
class Vector2 extends ffi.Struct {
  /// Vector x component
  @ffi.Float()
  external double x;

  /// Vector y component
  @ffi.Float()
  external double y;
}

/// Vector3, 3 components
class Vector3 extends ffi.Struct {
  /// Vector x component
  @ffi.Float()
  external double x;

  /// Vector y component
  @ffi.Float()
  external double y;

  /// Vector z component
  @ffi.Float()
  external double z;
}

/// Vector4, 4 components
class Vector4 extends ffi.Struct {
  /// Vector x component
  @ffi.Float()
  external double x;

  /// Vector y component
  @ffi.Float()
  external double y;

  /// Vector z component
  @ffi.Float()
  external double z;

  /// Vector w component
  @ffi.Float()
  external double w;
}

/// Matrix, 4x4 components, column major, OpenGL style, right handed
class Matrix extends ffi.Struct {
  /// Matrix first row (4 components)
  @ffi.Float()
  external double m0;

  @ffi.Float()
  external double m4;

  @ffi.Float()
  external double m8;

  @ffi.Float()
  external double m12;

  /// Matrix second row (4 components)
  @ffi.Float()
  external double m1;

  @ffi.Float()
  external double m5;

  @ffi.Float()
  external double m9;

  @ffi.Float()
  external double m13;

  /// Matrix third row (4 components)
  @ffi.Float()
  external double m2;

  @ffi.Float()
  external double m6;

  @ffi.Float()
  external double m10;

  @ffi.Float()
  external double m14;

  /// Matrix fourth row (4 components)
  @ffi.Float()
  external double m3;

  @ffi.Float()
  external double m7;

  @ffi.Float()
  external double m11;

  @ffi.Float()
  external double m15;
}

/// Color, 4 components, R8G8B8A8 (32bit)
class Color extends ffi.Struct {
  /// Color red value
  @ffi.Uint8()
  external int r;

  /// Color green value
  @ffi.Uint8()
  external int g;

  /// Color blue value
  @ffi.Uint8()
  external int b;

  /// Color alpha value
  @ffi.Uint8()
  external int a;
}

/// Rectangle, 4 components
class Rectangle extends ffi.Struct {
  /// Rectangle top-left corner position x
  @ffi.Float()
  external double x;

  /// Rectangle top-left corner position y
  @ffi.Float()
  external double y;

  /// Rectangle width
  @ffi.Float()
  external double width;

  /// Rectangle height
  @ffi.Float()
  external double height;
}

/// Image, pixel data stored in CPU memory (RAM)
class Image extends ffi.Struct {
  /// Image raw data
  external ffi.Pointer<ffi.Void> data;

  /// Image base width
  @ffi.Int32()
  external int width;

  /// Image base height
  @ffi.Int32()
  external int height;

  /// Mipmap levels, 1 by default
  @ffi.Int32()
  external int mipmaps;

  /// Data format (PixelFormat type)
  @ffi.Int32()
  external int format;
}

/// Texture, tex data stored in GPU memory (VRAM)
class Texture extends ffi.Struct {
  /// OpenGL texture id
  @ffi.Uint32()
  external int id;

  /// Texture base width
  @ffi.Int32()
  external int width;

  /// Texture base height
  @ffi.Int32()
  external int height;

  /// Mipmap levels, 1 by default
  @ffi.Int32()
  external int mipmaps;

  /// Data format (PixelFormat type)
  @ffi.Int32()
  external int format;
}

/// RenderTexture, fbo for texture rendering
class RenderTexture extends ffi.Struct {
  /// OpenGL framebuffer object id
  @ffi.Uint32()
  external int id;

  /// Color buffer attachment texture
  external Texture texture;

  /// Depth buffer attachment texture
  external Texture depth;
}

/// NPatchInfo, n-patch layout info
class NPatchInfo extends ffi.Struct {
  /// Texture source rectangle
  external Rectangle source;

  /// Left border offset
  @ffi.Int32()
  external int left;

  /// Top border offset
  @ffi.Int32()
  external int top;

  /// Right border offset
  @ffi.Int32()
  external int right;

  /// Bottom border offset
  @ffi.Int32()
  external int bottom;

  /// Layout of the n-patch: 3x3, 1x3 or 3x1
  @ffi.Int32()
  external int layout;
}

/// GlyphInfo, font characters glyphs info
class GlyphInfo extends ffi.Struct {
  /// Character value (Unicode)
  @ffi.Int32()
  external int value;

  /// Character offset X when drawing
  @ffi.Int32()
  external int offsetX;

  /// Character offset Y when drawing
  @ffi.Int32()
  external int offsetY;

  /// Character advance position X
  @ffi.Int32()
  external int advanceX;

  /// Character image data
  external Image image;
}

/// Font, font texture and GlyphInfo array data
class Font extends ffi.Struct {
  /// Base size (default chars height)
  @ffi.Int32()
  external int baseSize;

  /// Number of glyph characters
  @ffi.Int32()
  external int glyphCount;

  /// Padding around the glyph characters
  @ffi.Int32()
  external int glyphPadding;

  /// Texture atlas containing the glyphs
  external Texture texture;

  /// Rectangles in texture for the glyphs
  external ffi.Pointer<Rectangle> recs;

  /// Glyphs info data
  external ffi.Pointer<GlyphInfo> glyphs;
}

/// Camera, defines position/orientation in 3d space
class Camera3D extends ffi.Struct {
  /// Camera position
  external Vector3 position;

  /// Camera target it looks-at
  external Vector3 target;

  /// Camera up vector (rotation over its axis)
  external Vector3 up;

  /// Camera field-of-view apperture in Y (degrees) in perspective, used as near plane width in orthographic
  @ffi.Float()
  external double fovy;

  /// Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC
  @ffi.Int32()
  external int projection;
}

/// Camera2D, defines position/orientation in 2d space
class Camera2D extends ffi.Struct {
  /// Camera offset (displacement from target)
  external Vector2 offset;

  /// Camera target (rotation and zoom origin)
  external Vector2 target;

  /// Camera rotation in degrees
  @ffi.Float()
  external double rotation;

  /// Camera zoom (scaling), should be 1.0f by default
  @ffi.Float()
  external double zoom;
}

/// Mesh, vertex data and vao/vbo
class Mesh extends ffi.Struct {
  /// Number of vertices stored in arrays
  @ffi.Int32()
  external int vertexCount;

  /// Number of triangles stored (indexed or not)
  @ffi.Int32()
  external int triangleCount;

  /// Vertex position (XYZ - 3 components per vertex) (shader-location = 0)
  external ffi.Pointer<ffi.Float> vertices;

  /// Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)
  external ffi.Pointer<ffi.Float> texcoords;

  /// Vertex second texture coordinates (useful for lightmaps) (shader-location = 5)
  external ffi.Pointer<ffi.Float> texcoords2;

  /// Vertex normals (XYZ - 3 components per vertex) (shader-location = 2)
  external ffi.Pointer<ffi.Float> normals;

  /// Vertex tangents (XYZW - 4 components per vertex) (shader-location = 4)
  external ffi.Pointer<ffi.Float> tangents;

  /// Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)
  external ffi.Pointer<ffi.Uint8> colors;

  /// Vertex indices (in case vertex data comes indexed)
  external ffi.Pointer<ffi.Uint16> indices;

  /// Animated vertex positions (after bones transformations)
  external ffi.Pointer<ffi.Float> animVertices;

  /// Animated normals (after bones transformations)
  external ffi.Pointer<ffi.Float> animNormals;

  /// Vertex bone ids, max 255 bone ids, up to 4 bones influence by vertex (skinning)
  external ffi.Pointer<ffi.Uint8> boneIds;

  /// Vertex bone weight, up to 4 bones influence by vertex (skinning)
  external ffi.Pointer<ffi.Float> boneWeights;

  /// OpenGL Vertex Array Object id
  @ffi.Uint32()
  external int vaoId;

  /// OpenGL Vertex Buffer Objects id (default vertex data)
  external ffi.Pointer<ffi.Uint32> vboId;
}

/// Shader
class Shader extends ffi.Struct {
  /// Shader program id
  @ffi.Uint32()
  external int id;

  /// Shader locations array (RL_MAX_SHADER_LOCATIONS)
  external ffi.Pointer<ffi.Int32> locs;
}

/// MaterialMap
class MaterialMap extends ffi.Struct {
  /// Material map texture
  external Texture texture;

  /// Material map color
  external Color color;

  /// Material map value
  @ffi.Float()
  external double value;
}

/// Material, includes shader and maps
class Material extends ffi.Struct {
  /// Material shader
  external Shader shader;

  /// Material maps array (MAX_MATERIAL_MAPS)
  external ffi.Pointer<MaterialMap> maps;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> params;
}

/// Transform, vectex transformation data
class Transform extends ffi.Struct {
  /// Translation
  external Vector3 translation;

  /// Rotation
  external Vector4 rotation;

  /// Scale
  external Vector3 scale;
}

/// Bone, skeletal animation bone
class BoneInfo extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> name;

  /// Bone parent
  @ffi.Int32()
  external int parent;
}

/// Model, meshes, materials and animation data
class Model extends ffi.Struct {
  /// Local transform matrix
  external Matrix transform;

  /// Number of meshes
  @ffi.Int32()
  external int meshCount;

  /// Number of materials
  @ffi.Int32()
  external int materialCount;

  /// Meshes array
  external ffi.Pointer<Mesh> meshes;

  /// Materials array
  external ffi.Pointer<Material> materials;

  /// Mesh material number
  external ffi.Pointer<ffi.Int32> meshMaterial;

  /// Number of bones
  @ffi.Int32()
  external int boneCount;

  /// Bones information (skeleton)
  external ffi.Pointer<BoneInfo> bones;

  /// Bones base transformation (pose)
  external ffi.Pointer<Transform> bindPose;
}

/// ModelAnimation
class ModelAnimation extends ffi.Struct {
  /// Number of bones
  @ffi.Int32()
  external int boneCount;

  /// Number of animation frames
  @ffi.Int32()
  external int frameCount;

  /// Bones information (skeleton)
  external ffi.Pointer<BoneInfo> bones;

  /// Poses array by frame
  external ffi.Pointer<ffi.Pointer<Transform>> framePoses;
}

/// Ray, ray for raycasting
class Ray extends ffi.Struct {
  /// Ray position (origin)
  external Vector3 position;

  /// Ray direction
  external Vector3 direction;
}

/// RayCollision, ray hit information
class RayCollision extends ffi.Struct {
  /// Did the ray hit something?
  @ffi.Int32()
  external int hit;

  /// Distance to nearest hit
  @ffi.Float()
  external double distance;

  /// Point of nearest hit
  external Vector3 point;

  /// Surface normal of hit
  external Vector3 normal;
}

/// BoundingBox
class BoundingBox extends ffi.Struct {
  /// Minimum vertex box-corner
  external Vector3 min;

  /// Maximum vertex box-corner
  external Vector3 max;
}

/// Wave, audio wave data
class Wave extends ffi.Struct {
  /// Total number of frames (considering channels)
  @ffi.Uint32()
  external int frameCount;

  /// Frequency (samples per second)
  @ffi.Uint32()
  external int sampleRate;

  /// Bit depth (bits per sample): 8, 16, 32 (24 not supported)
  @ffi.Uint32()
  external int sampleSize;

  /// Number of channels (1-mono, 2-stereo, ...)
  @ffi.Uint32()
  external int channels;

  /// Buffer data pointer
  external ffi.Pointer<ffi.Void> data;
}

class rAudioBuffer extends ffi.Opaque {}

/// AudioStream, custom audio stream
class AudioStream extends ffi.Struct {
  /// Pointer to internal data used by the audio system
  external ffi.Pointer<rAudioBuffer> buffer;

  /// Frequency (samples per second)
  @ffi.Uint32()
  external int sampleRate;

  /// Bit depth (bits per sample): 8, 16, 32 (24 not supported)
  @ffi.Uint32()
  external int sampleSize;

  /// Number of channels (1-mono, 2-stereo, ...)
  @ffi.Uint32()
  external int channels;
}

/// Sound
class Sound extends ffi.Struct {
  /// Audio stream
  external AudioStream stream;

  /// Total number of frames (considering channels)
  @ffi.Uint32()
  external int frameCount;
}

/// Music, audio stream, anything longer than ~10 seconds should be streamed
class Music extends ffi.Struct {
  /// Audio stream
  external AudioStream stream;

  /// Total number of frames (considering channels)
  @ffi.Uint32()
  external int frameCount;

  /// Music looping enable
  @ffi.Int32()
  external int looping;

  /// Type of music context (audio filetype)
  @ffi.Int32()
  external int ctxType;

  /// Audio context data, depends on type
  external ffi.Pointer<ffi.Void> ctxData;
}

/// VrDeviceInfo, Head-Mounted-Display device parameters
class VrDeviceInfo extends ffi.Struct {
  /// Horizontal resolution in pixels
  @ffi.Int32()
  external int hResolution;

  /// Vertical resolution in pixels
  @ffi.Int32()
  external int vResolution;

  /// Horizontal size in meters
  @ffi.Float()
  external double hScreenSize;

  /// Vertical size in meters
  @ffi.Float()
  external double vScreenSize;

  /// Screen center in meters
  @ffi.Float()
  external double vScreenCenter;

  /// Distance between eye and display in meters
  @ffi.Float()
  external double eyeToScreenDistance;

  /// Lens separation distance in meters
  @ffi.Float()
  external double lensSeparationDistance;

  /// IPD (distance between pupils) in meters
  @ffi.Float()
  external double interpupillaryDistance;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> lensDistortionValues;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> chromaAbCorrection;
}

/// VrStereoConfig, VR stereo rendering configuration for simulator
class VrStereoConfig extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<Matrix> projection;

  @ffi.Array.multi([2])
  external ffi.Array<Matrix> viewOffset;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> leftLensCenter;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> rightLensCenter;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> leftScreenCenter;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> rightScreenCenter;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> scale;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> scaleIn;
}

/// ----------------------------------------------------------------------------------
/// Enumerators Definition
/// ----------------------------------------------------------------------------------
/// System/Window config flags
/// NOTE: Every bit registers one state (use it with bit masks)
/// By default all flags are set to 0
abstract class ConfigFlags {
  /// Set to try enabling V-Sync on GPU
  static const int FLAG_VSYNC_HINT = 64;

  /// Set to run program in fullscreen
  static const int FLAG_FULLSCREEN_MODE = 2;

  /// Set to allow resizable window
  static const int FLAG_WINDOW_RESIZABLE = 4;

  /// Set to disable window decoration (frame and buttons)
  static const int FLAG_WINDOW_UNDECORATED = 8;

  /// Set to hide window
  static const int FLAG_WINDOW_HIDDEN = 128;

  /// Set to minimize window (iconify)
  static const int FLAG_WINDOW_MINIMIZED = 512;

  /// Set to maximize window (expanded to monitor)
  static const int FLAG_WINDOW_MAXIMIZED = 1024;

  /// Set to window non focused
  static const int FLAG_WINDOW_UNFOCUSED = 2048;

  /// Set to window always on top
  static const int FLAG_WINDOW_TOPMOST = 4096;

  /// Set to allow windows running while minimized
  static const int FLAG_WINDOW_ALWAYS_RUN = 256;

  /// Set to allow transparent framebuffer
  static const int FLAG_WINDOW_TRANSPARENT = 16;

  /// Set to support HighDPI
  static const int FLAG_WINDOW_HIGHDPI = 8192;

  /// Set to try enabling MSAA 4X
  static const int FLAG_MSAA_4X_HINT = 32;

  /// Set to try enabling interlaced video format (for V3D)
  static const int FLAG_INTERLACED_HINT = 65536;
}

/// Trace log level
/// NOTE: Organized by priority level
abstract class TraceLogLevel {
  /// Display all logs
  static const int LOG_ALL = 0;

  /// Trace logging, intended for internal use only
  static const int LOG_TRACE = 1;

  /// Debug logging, used for internal debugging, it should be disabled on release builds
  static const int LOG_DEBUG = 2;

  /// Info logging, used for program execution info
  static const int LOG_INFO = 3;

  /// Warning logging, used on recoverable failures
  static const int LOG_WARNING = 4;

  /// Error logging, used on unrecoverable failures
  static const int LOG_ERROR = 5;

  /// Fatal logging, used to abort program: exit(EXIT_FAILURE)
  static const int LOG_FATAL = 6;

  /// Disable logging
  static const int LOG_NONE = 7;
}

/// Keyboard keys (US keyboard layout)
/// NOTE: Use GetKeyPressed() to allow redefining
/// required keys for alternative layouts
abstract class KeyboardKey {
  /// Key: NULL, used for no key pressed
  static const int KEY_NULL = 0;

  /// Key: '
  static const int KEY_APOSTROPHE = 39;

  /// Key: ,
  static const int KEY_COMMA = 44;

  /// Key: -
  static const int KEY_MINUS = 45;

  /// Key: .
  static const int KEY_PERIOD = 46;

  /// Key: /
  static const int KEY_SLASH = 47;

  /// Key: 0
  static const int KEY_ZERO = 48;

  /// Key: 1
  static const int KEY_ONE = 49;

  /// Key: 2
  static const int KEY_TWO = 50;

  /// Key: 3
  static const int KEY_THREE = 51;

  /// Key: 4
  static const int KEY_FOUR = 52;

  /// Key: 5
  static const int KEY_FIVE = 53;

  /// Key: 6
  static const int KEY_SIX = 54;

  /// Key: 7
  static const int KEY_SEVEN = 55;

  /// Key: 8
  static const int KEY_EIGHT = 56;

  /// Key: 9
  static const int KEY_NINE = 57;

  /// Key: ;
  static const int KEY_SEMICOLON = 59;

  /// Key: =
  static const int KEY_EQUAL = 61;

  /// Key: A | a
  static const int KEY_A = 65;

  /// Key: B | b
  static const int KEY_B = 66;

  /// Key: C | c
  static const int KEY_C = 67;

  /// Key: D | d
  static const int KEY_D = 68;

  /// Key: E | e
  static const int KEY_E = 69;

  /// Key: F | f
  static const int KEY_F = 70;

  /// Key: G | g
  static const int KEY_G = 71;

  /// Key: H | h
  static const int KEY_H = 72;

  /// Key: I | i
  static const int KEY_I = 73;

  /// Key: J | j
  static const int KEY_J = 74;

  /// Key: K | k
  static const int KEY_K = 75;

  /// Key: L | l
  static const int KEY_L = 76;

  /// Key: M | m
  static const int KEY_M = 77;

  /// Key: N | n
  static const int KEY_N = 78;

  /// Key: O | o
  static const int KEY_O = 79;

  /// Key: P | p
  static const int KEY_P = 80;

  /// Key: Q | q
  static const int KEY_Q = 81;

  /// Key: R | r
  static const int KEY_R = 82;

  /// Key: S | s
  static const int KEY_S = 83;

  /// Key: T | t
  static const int KEY_T = 84;

  /// Key: U | u
  static const int KEY_U = 85;

  /// Key: V | v
  static const int KEY_V = 86;

  /// Key: W | w
  static const int KEY_W = 87;

  /// Key: X | x
  static const int KEY_X = 88;

  /// Key: Y | y
  static const int KEY_Y = 89;

  /// Key: Z | z
  static const int KEY_Z = 90;

  /// Key: [
  static const int KEY_LEFT_BRACKET = 91;

  /// Key: '\'
  static const int KEY_BACKSLASH = 92;

  /// Key: ]
  static const int KEY_RIGHT_BRACKET = 93;

  /// Key: `
  static const int KEY_GRAVE = 96;

  /// Key: Space
  static const int KEY_SPACE = 32;

  /// Key: Esc
  static const int KEY_ESCAPE = 256;

  /// Key: Enter
  static const int KEY_ENTER = 257;

  /// Key: Tab
  static const int KEY_TAB = 258;

  /// Key: Backspace
  static const int KEY_BACKSPACE = 259;

  /// Key: Ins
  static const int KEY_INSERT = 260;

  /// Key: Del
  static const int KEY_DELETE = 261;

  /// Key: Cursor right
  static const int KEY_RIGHT = 262;

  /// Key: Cursor left
  static const int KEY_LEFT = 263;

  /// Key: Cursor down
  static const int KEY_DOWN = 264;

  /// Key: Cursor up
  static const int KEY_UP = 265;

  /// Key: Page up
  static const int KEY_PAGE_UP = 266;

  /// Key: Page down
  static const int KEY_PAGE_DOWN = 267;

  /// Key: Home
  static const int KEY_HOME = 268;

  /// Key: End
  static const int KEY_END = 269;

  /// Key: Caps lock
  static const int KEY_CAPS_LOCK = 280;

  /// Key: Scroll down
  static const int KEY_SCROLL_LOCK = 281;

  /// Key: Num lock
  static const int KEY_NUM_LOCK = 282;

  /// Key: Print screen
  static const int KEY_PRINT_SCREEN = 283;

  /// Key: Pause
  static const int KEY_PAUSE = 284;

  /// Key: F1
  static const int KEY_F1 = 290;

  /// Key: F2
  static const int KEY_F2 = 291;

  /// Key: F3
  static const int KEY_F3 = 292;

  /// Key: F4
  static const int KEY_F4 = 293;

  /// Key: F5
  static const int KEY_F5 = 294;

  /// Key: F6
  static const int KEY_F6 = 295;

  /// Key: F7
  static const int KEY_F7 = 296;

  /// Key: F8
  static const int KEY_F8 = 297;

  /// Key: F9
  static const int KEY_F9 = 298;

  /// Key: F10
  static const int KEY_F10 = 299;

  /// Key: F11
  static const int KEY_F11 = 300;

  /// Key: F12
  static const int KEY_F12 = 301;

  /// Key: Shift left
  static const int KEY_LEFT_SHIFT = 340;

  /// Key: Control left
  static const int KEY_LEFT_CONTROL = 341;

  /// Key: Alt left
  static const int KEY_LEFT_ALT = 342;

  /// Key: Super left
  static const int KEY_LEFT_SUPER = 343;

  /// Key: Shift right
  static const int KEY_RIGHT_SHIFT = 344;

  /// Key: Control right
  static const int KEY_RIGHT_CONTROL = 345;

  /// Key: Alt right
  static const int KEY_RIGHT_ALT = 346;

  /// Key: Super right
  static const int KEY_RIGHT_SUPER = 347;

  /// Key: KB menu
  static const int KEY_KB_MENU = 348;

  /// Key: Keypad 0
  static const int KEY_KP_0 = 320;

  /// Key: Keypad 1
  static const int KEY_KP_1 = 321;

  /// Key: Keypad 2
  static const int KEY_KP_2 = 322;

  /// Key: Keypad 3
  static const int KEY_KP_3 = 323;

  /// Key: Keypad 4
  static const int KEY_KP_4 = 324;

  /// Key: Keypad 5
  static const int KEY_KP_5 = 325;

  /// Key: Keypad 6
  static const int KEY_KP_6 = 326;

  /// Key: Keypad 7
  static const int KEY_KP_7 = 327;

  /// Key: Keypad 8
  static const int KEY_KP_8 = 328;

  /// Key: Keypad 9
  static const int KEY_KP_9 = 329;

  /// Key: Keypad .
  static const int KEY_KP_DECIMAL = 330;

  /// Key: Keypad /
  static const int KEY_KP_DIVIDE = 331;

  /// Key: Keypad *
  static const int KEY_KP_MULTIPLY = 332;

  /// Key: Keypad -
  static const int KEY_KP_SUBTRACT = 333;

  /// Key: Keypad +
  static const int KEY_KP_ADD = 334;

  /// Key: Keypad Enter
  static const int KEY_KP_ENTER = 335;

  /// Key: Keypad =
  static const int KEY_KP_EQUAL = 336;

  /// Key: Android back button
  static const int KEY_BACK = 4;

  /// Key: Android menu button
  static const int KEY_MENU = 82;

  /// Key: Android volume up button
  static const int KEY_VOLUME_UP = 24;

  /// Key: Android volume down button
  static const int KEY_VOLUME_DOWN = 25;
}

/// Mouse buttons
abstract class MouseButton {
  /// Mouse button left
  static const int MOUSE_BUTTON_LEFT = 0;

  /// Mouse button right
  static const int MOUSE_BUTTON_RIGHT = 1;

  /// Mouse button middle (pressed wheel)
  static const int MOUSE_BUTTON_MIDDLE = 2;

  /// Mouse button side (advanced mouse device)
  static const int MOUSE_BUTTON_SIDE = 3;

  /// Mouse button extra (advanced mouse device)
  static const int MOUSE_BUTTON_EXTRA = 4;

  /// Mouse button fordward (advanced mouse device)
  static const int MOUSE_BUTTON_FORWARD = 5;

  /// Mouse button back (advanced mouse device)
  static const int MOUSE_BUTTON_BACK = 6;
}

/// Mouse cursor
abstract class MouseCursor {
  /// Default pointer shape
  static const int MOUSE_CURSOR_DEFAULT = 0;

  /// Arrow shape
  static const int MOUSE_CURSOR_ARROW = 1;

  /// Text writing cursor shape
  static const int MOUSE_CURSOR_IBEAM = 2;

  /// Cross shape
  static const int MOUSE_CURSOR_CROSSHAIR = 3;

  /// Pointing hand cursor
  static const int MOUSE_CURSOR_POINTING_HAND = 4;

  /// Horizontal resize/move arrow shape
  static const int MOUSE_CURSOR_RESIZE_EW = 5;

  /// Vertical resize/move arrow shape
  static const int MOUSE_CURSOR_RESIZE_NS = 6;

  /// Top-left to bottom-right diagonal resize/move arrow shape
  static const int MOUSE_CURSOR_RESIZE_NWSE = 7;

  /// The top-right to bottom-left diagonal resize/move arrow shape
  static const int MOUSE_CURSOR_RESIZE_NESW = 8;

  /// The omni-directional resize/move cursor shape
  static const int MOUSE_CURSOR_RESIZE_ALL = 9;

  /// The operation-not-allowed shape
  static const int MOUSE_CURSOR_NOT_ALLOWED = 10;
}

/// Gamepad buttons
abstract class GamepadButton {
  /// Unknown button, just for error checking
  static const int GAMEPAD_BUTTON_UNKNOWN = 0;

  /// Gamepad left DPAD up button
  static const int GAMEPAD_BUTTON_LEFT_FACE_UP = 1;

  /// Gamepad left DPAD right button
  static const int GAMEPAD_BUTTON_LEFT_FACE_RIGHT = 2;

  /// Gamepad left DPAD down button
  static const int GAMEPAD_BUTTON_LEFT_FACE_DOWN = 3;

  /// Gamepad left DPAD left button
  static const int GAMEPAD_BUTTON_LEFT_FACE_LEFT = 4;

  /// Gamepad right button up (i.e. PS3: Triangle, Xbox: Y)
  static const int GAMEPAD_BUTTON_RIGHT_FACE_UP = 5;

  /// Gamepad right button right (i.e. PS3: Square, Xbox: X)
  static const int GAMEPAD_BUTTON_RIGHT_FACE_RIGHT = 6;

  /// Gamepad right button down (i.e. PS3: Cross, Xbox: A)
  static const int GAMEPAD_BUTTON_RIGHT_FACE_DOWN = 7;

  /// Gamepad right button left (i.e. PS3: Circle, Xbox: B)
  static const int GAMEPAD_BUTTON_RIGHT_FACE_LEFT = 8;

  /// Gamepad top/back trigger left (first), it could be a trailing button
  static const int GAMEPAD_BUTTON_LEFT_TRIGGER_1 = 9;

  /// Gamepad top/back trigger left (second), it could be a trailing button
  static const int GAMEPAD_BUTTON_LEFT_TRIGGER_2 = 10;

  /// Gamepad top/back trigger right (one), it could be a trailing button
  static const int GAMEPAD_BUTTON_RIGHT_TRIGGER_1 = 11;

  /// Gamepad top/back trigger right (second), it could be a trailing button
  static const int GAMEPAD_BUTTON_RIGHT_TRIGGER_2 = 12;

  /// Gamepad center buttons, left one (i.e. PS3: Select)
  static const int GAMEPAD_BUTTON_MIDDLE_LEFT = 13;

  /// Gamepad center buttons, middle one (i.e. PS3: PS, Xbox: XBOX)
  static const int GAMEPAD_BUTTON_MIDDLE = 14;

  /// Gamepad center buttons, right one (i.e. PS3: Start)
  static const int GAMEPAD_BUTTON_MIDDLE_RIGHT = 15;

  /// Gamepad joystick pressed button left
  static const int GAMEPAD_BUTTON_LEFT_THUMB = 16;

  /// Gamepad joystick pressed button right
  static const int GAMEPAD_BUTTON_RIGHT_THUMB = 17;
}

/// Gamepad axis
abstract class GamepadAxis {
  /// Gamepad left stick X axis
  static const int GAMEPAD_AXIS_LEFT_X = 0;

  /// Gamepad left stick Y axis
  static const int GAMEPAD_AXIS_LEFT_Y = 1;

  /// Gamepad right stick X axis
  static const int GAMEPAD_AXIS_RIGHT_X = 2;

  /// Gamepad right stick Y axis
  static const int GAMEPAD_AXIS_RIGHT_Y = 3;

  /// Gamepad back trigger left, pressure level: [1..-1]
  static const int GAMEPAD_AXIS_LEFT_TRIGGER = 4;

  /// Gamepad back trigger right, pressure level: [1..-1]
  static const int GAMEPAD_AXIS_RIGHT_TRIGGER = 5;
}

/// Material map index
abstract class MaterialMapIndex {
  /// Albedo material (same as: MATERIAL_MAP_DIFFUSE)
  static const int MATERIAL_MAP_ALBEDO = 0;

  /// Metalness material (same as: MATERIAL_MAP_SPECULAR)
  static const int MATERIAL_MAP_METALNESS = 1;

  /// Normal material
  static const int MATERIAL_MAP_NORMAL = 2;

  /// Roughness material
  static const int MATERIAL_MAP_ROUGHNESS = 3;

  /// Ambient occlusion material
  static const int MATERIAL_MAP_OCCLUSION = 4;

  /// Emission material
  static const int MATERIAL_MAP_EMISSION = 5;

  /// Heightmap material
  static const int MATERIAL_MAP_HEIGHT = 6;

  /// Cubemap material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  static const int MATERIAL_MAP_CUBEMAP = 7;

  /// Irradiance material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  static const int MATERIAL_MAP_IRRADIANCE = 8;

  /// Prefilter material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  static const int MATERIAL_MAP_PREFILTER = 9;

  /// Brdf material
  static const int MATERIAL_MAP_BRDF = 10;
}

/// Shader location index
abstract class ShaderLocationIndex {
  /// Shader location: vertex attribute: position
  static const int SHADER_LOC_VERTEX_POSITION = 0;

  /// Shader location: vertex attribute: texcoord01
  static const int SHADER_LOC_VERTEX_TEXCOORD01 = 1;

  /// Shader location: vertex attribute: texcoord02
  static const int SHADER_LOC_VERTEX_TEXCOORD02 = 2;

  /// Shader location: vertex attribute: normal
  static const int SHADER_LOC_VERTEX_NORMAL = 3;

  /// Shader location: vertex attribute: tangent
  static const int SHADER_LOC_VERTEX_TANGENT = 4;

  /// Shader location: vertex attribute: color
  static const int SHADER_LOC_VERTEX_COLOR = 5;

  /// Shader location: matrix uniform: model-view-projection
  static const int SHADER_LOC_MATRIX_MVP = 6;

  /// Shader location: matrix uniform: view (camera transform)
  static const int SHADER_LOC_MATRIX_VIEW = 7;

  /// Shader location: matrix uniform: projection
  static const int SHADER_LOC_MATRIX_PROJECTION = 8;

  /// Shader location: matrix uniform: model (transform)
  static const int SHADER_LOC_MATRIX_MODEL = 9;

  /// Shader location: matrix uniform: normal
  static const int SHADER_LOC_MATRIX_NORMAL = 10;

  /// Shader location: vector uniform: view
  static const int SHADER_LOC_VECTOR_VIEW = 11;

  /// Shader location: vector uniform: diffuse color
  static const int SHADER_LOC_COLOR_DIFFUSE = 12;

  /// Shader location: vector uniform: specular color
  static const int SHADER_LOC_COLOR_SPECULAR = 13;

  /// Shader location: vector uniform: ambient color
  static const int SHADER_LOC_COLOR_AMBIENT = 14;

  /// Shader location: sampler2d texture: albedo (same as: SHADER_LOC_MAP_DIFFUSE)
  static const int SHADER_LOC_MAP_ALBEDO = 15;

  /// Shader location: sampler2d texture: metalness (same as: SHADER_LOC_MAP_SPECULAR)
  static const int SHADER_LOC_MAP_METALNESS = 16;

  /// Shader location: sampler2d texture: normal
  static const int SHADER_LOC_MAP_NORMAL = 17;

  /// Shader location: sampler2d texture: roughness
  static const int SHADER_LOC_MAP_ROUGHNESS = 18;

  /// Shader location: sampler2d texture: occlusion
  static const int SHADER_LOC_MAP_OCCLUSION = 19;

  /// Shader location: sampler2d texture: emission
  static const int SHADER_LOC_MAP_EMISSION = 20;

  /// Shader location: sampler2d texture: height
  static const int SHADER_LOC_MAP_HEIGHT = 21;

  /// Shader location: samplerCube texture: cubemap
  static const int SHADER_LOC_MAP_CUBEMAP = 22;

  /// Shader location: samplerCube texture: irradiance
  static const int SHADER_LOC_MAP_IRRADIANCE = 23;

  /// Shader location: samplerCube texture: prefilter
  static const int SHADER_LOC_MAP_PREFILTER = 24;

  /// Shader location: sampler2d texture: brdf
  static const int SHADER_LOC_MAP_BRDF = 25;
}

/// Shader uniform data type
abstract class ShaderUniformDataType {
  /// Shader uniform type: float
  static const int SHADER_UNIFORM_FLOAT = 0;

  /// Shader uniform type: vec2 (2 float)
  static const int SHADER_UNIFORM_VEC2 = 1;

  /// Shader uniform type: vec3 (3 float)
  static const int SHADER_UNIFORM_VEC3 = 2;

  /// Shader uniform type: vec4 (4 float)
  static const int SHADER_UNIFORM_VEC4 = 3;

  /// Shader uniform type: int
  static const int SHADER_UNIFORM_INT = 4;

  /// Shader uniform type: ivec2 (2 int)
  static const int SHADER_UNIFORM_IVEC2 = 5;

  /// Shader uniform type: ivec3 (3 int)
  static const int SHADER_UNIFORM_IVEC3 = 6;

  /// Shader uniform type: ivec4 (4 int)
  static const int SHADER_UNIFORM_IVEC4 = 7;

  /// Shader uniform type: sampler2d
  static const int SHADER_UNIFORM_SAMPLER2D = 8;
}

/// Shader attribute data types
abstract class ShaderAttributeDataType {
  /// Shader attribute type: float
  static const int SHADER_ATTRIB_FLOAT = 0;

  /// Shader attribute type: vec2 (2 float)
  static const int SHADER_ATTRIB_VEC2 = 1;

  /// Shader attribute type: vec3 (3 float)
  static const int SHADER_ATTRIB_VEC3 = 2;

  /// Shader attribute type: vec4 (4 float)
  static const int SHADER_ATTRIB_VEC4 = 3;
}

/// Pixel formats
/// NOTE: Support depends on OpenGL version and platform
abstract class PixelFormat {
  /// 8 bit per pixel (no alpha)
  static const int PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1;

  /// 8*2 bpp (2 channels)
  static const int PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA = 2;

  /// 16 bpp
  static const int PIXELFORMAT_UNCOMPRESSED_R5G6B5 = 3;

  /// 24 bpp
  static const int PIXELFORMAT_UNCOMPRESSED_R8G8B8 = 4;

  /// 16 bpp (1 bit alpha)
  static const int PIXELFORMAT_UNCOMPRESSED_R5G5B5A1 = 5;

  /// 16 bpp (4 bit alpha)
  static const int PIXELFORMAT_UNCOMPRESSED_R4G4B4A4 = 6;

  /// 32 bpp
  static const int PIXELFORMAT_UNCOMPRESSED_R8G8B8A8 = 7;

  /// 32 bpp (1 channel - float)
  static const int PIXELFORMAT_UNCOMPRESSED_R32 = 8;

  /// 32*3 bpp (3 channels - float)
  static const int PIXELFORMAT_UNCOMPRESSED_R32G32B32 = 9;

  /// 32*4 bpp (4 channels - float)
  static const int PIXELFORMAT_UNCOMPRESSED_R32G32B32A32 = 10;

  /// 4 bpp (no alpha)
  static const int PIXELFORMAT_COMPRESSED_DXT1_RGB = 11;

  /// 4 bpp (1 bit alpha)
  static const int PIXELFORMAT_COMPRESSED_DXT1_RGBA = 12;

  /// 8 bpp
  static const int PIXELFORMAT_COMPRESSED_DXT3_RGBA = 13;

  /// 8 bpp
  static const int PIXELFORMAT_COMPRESSED_DXT5_RGBA = 14;

  /// 4 bpp
  static const int PIXELFORMAT_COMPRESSED_ETC1_RGB = 15;

  /// 4 bpp
  static const int PIXELFORMAT_COMPRESSED_ETC2_RGB = 16;

  /// 8 bpp
  static const int PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA = 17;

  /// 4 bpp
  static const int PIXELFORMAT_COMPRESSED_PVRT_RGB = 18;

  /// 4 bpp
  static const int PIXELFORMAT_COMPRESSED_PVRT_RGBA = 19;

  /// 8 bpp
  static const int PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA = 20;

  /// 2 bpp
  static const int PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA = 21;
}

/// Texture parameters: filter mode
/// NOTE 1: Filtering considers mipmaps if available in the texture
/// NOTE 2: Filter is accordingly set for minification and magnification
abstract class TextureFilter {
  /// No filter, just pixel aproximation
  static const int TEXTURE_FILTER_POINT = 0;

  /// Linear filtering
  static const int TEXTURE_FILTER_BILINEAR = 1;

  /// Trilinear filtering (linear with mipmaps)
  static const int TEXTURE_FILTER_TRILINEAR = 2;

  /// Anisotropic filtering 4x
  static const int TEXTURE_FILTER_ANISOTROPIC_4X = 3;

  /// Anisotropic filtering 8x
  static const int TEXTURE_FILTER_ANISOTROPIC_8X = 4;

  /// Anisotropic filtering 16x
  static const int TEXTURE_FILTER_ANISOTROPIC_16X = 5;
}

/// Texture parameters: wrap mode
abstract class TextureWrap {
  /// Repeats texture in tiled mode
  static const int TEXTURE_WRAP_REPEAT = 0;

  /// Clamps texture to edge pixel in tiled mode
  static const int TEXTURE_WRAP_CLAMP = 1;

  /// Mirrors and repeats the texture in tiled mode
  static const int TEXTURE_WRAP_MIRROR_REPEAT = 2;

  /// Mirrors and clamps to border the texture in tiled mode
  static const int TEXTURE_WRAP_MIRROR_CLAMP = 3;
}

/// Cubemap layouts
abstract class CubemapLayout {
  /// Automatically detect layout type
  static const int CUBEMAP_LAYOUT_AUTO_DETECT = 0;

  /// Layout is defined by a vertical line with faces
  static const int CUBEMAP_LAYOUT_LINE_VERTICAL = 1;

  /// Layout is defined by an horizontal line with faces
  static const int CUBEMAP_LAYOUT_LINE_HORIZONTAL = 2;

  /// Layout is defined by a 3x4 cross with cubemap faces
  static const int CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR = 3;

  /// Layout is defined by a 4x3 cross with cubemap faces
  static const int CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE = 4;

  /// Layout is defined by a panorama image (equirectangular map)
  static const int CUBEMAP_LAYOUT_PANORAMA = 5;
}

/// Font type, defines generation method
abstract class FontType {
  /// Default font generation, anti-aliased
  static const int FONT_DEFAULT = 0;

  /// Bitmap font generation, no anti-aliasing
  static const int FONT_BITMAP = 1;

  /// SDF font generation, requires external shader
  static const int FONT_SDF = 2;
}

/// Color blending modes (pre-defined)
abstract class BlendMode {
  /// Blend textures considering alpha (default)
  static const int BLEND_ALPHA = 0;

  /// Blend textures adding colors
  static const int BLEND_ADDITIVE = 1;

  /// Blend textures multiplying colors
  static const int BLEND_MULTIPLIED = 2;

  /// Blend textures adding colors (alternative)
  static const int BLEND_ADD_COLORS = 3;

  /// Blend textures subtracting colors (alternative)
  static const int BLEND_SUBTRACT_COLORS = 4;

  /// Belnd textures using custom src/dst factors (use rlSetBlendMode())
  static const int BLEND_CUSTOM = 5;
}

/// Gesture
/// NOTE: It could be used as flags to enable only some gestures
abstract class Gesture {
  /// No gesture
  static const int GESTURE_NONE = 0;

  /// Tap gesture
  static const int GESTURE_TAP = 1;

  /// Double tap gesture
  static const int GESTURE_DOUBLETAP = 2;

  /// Hold gesture
  static const int GESTURE_HOLD = 4;

  /// Drag gesture
  static const int GESTURE_DRAG = 8;

  /// Swipe right gesture
  static const int GESTURE_SWIPE_RIGHT = 16;

  /// Swipe left gesture
  static const int GESTURE_SWIPE_LEFT = 32;

  /// Swipe up gesture
  static const int GESTURE_SWIPE_UP = 64;

  /// Swipe down gesture
  static const int GESTURE_SWIPE_DOWN = 128;

  /// Pinch in gesture
  static const int GESTURE_PINCH_IN = 256;

  /// Pinch out gesture
  static const int GESTURE_PINCH_OUT = 512;
}

/// Camera system modes
abstract class CameraMode {
  /// Custom camera
  static const int CAMERA_CUSTOM = 0;

  /// Free camera
  static const int CAMERA_FREE = 1;

  /// Orbital camera
  static const int CAMERA_ORBITAL = 2;

  /// First person camera
  static const int CAMERA_FIRST_PERSON = 3;

  /// Third person camera
  static const int CAMERA_THIRD_PERSON = 4;
}

/// Camera projection
abstract class CameraProjection {
  /// Perspective projection
  static const int CAMERA_PERSPECTIVE = 0;

  /// Orthographic projection
  static const int CAMERA_ORTHOGRAPHIC = 1;
}

/// N-patch layout
abstract class NPatchLayout {
  /// Npatch layout: 3x3 tiles
  static const int NPATCH_NINE_PATCH = 0;

  /// Npatch layout: 1x3 tiles
  static const int NPATCH_THREE_PATCH_VERTICAL = 1;

  /// Npatch layout: 3x1 tiles
  static const int NPATCH_THREE_PATCH_HORIZONTAL = 2;
}

const String RAYLIB_VERSION = '4.0';

const double PI = 3.1415927410125732;

const double DEG2RAD = 0.01745329238474369;

const double RAD2DEG = 57.2957763671875;

const int MOUSE_LEFT_BUTTON = 0;

const int MOUSE_RIGHT_BUTTON = 1;

const int MOUSE_MIDDLE_BUTTON = 2;

const int MATERIAL_MAP_DIFFUSE = 0;

const int MATERIAL_MAP_SPECULAR = 1;

const int SHADER_LOC_MAP_DIFFUSE = 15;

const int SHADER_LOC_MAP_SPECULAR = 16;

typedef _c_InitWindow = ffi.Void Function(
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Pointer<ffi.Int8> title,
);

typedef _dart_InitWindow = void Function(
  int width,
  int height,
  ffi.Pointer<ffi.Int8> title,
);

typedef _c_WindowShouldClose = ffi.Int32 Function();

typedef _dart_WindowShouldClose = int Function();

typedef _c_CloseWindow = ffi.Void Function();

typedef _dart_CloseWindow = void Function();

typedef _c_IsWindowReady = ffi.Int32 Function();

typedef _dart_IsWindowReady = int Function();

typedef _c_IsWindowFullscreen = ffi.Int32 Function();

typedef _dart_IsWindowFullscreen = int Function();

typedef _c_IsWindowHidden = ffi.Int32 Function();

typedef _dart_IsWindowHidden = int Function();

typedef _c_IsWindowMinimized = ffi.Int32 Function();

typedef _dart_IsWindowMinimized = int Function();

typedef _c_IsWindowMaximized = ffi.Int32 Function();

typedef _dart_IsWindowMaximized = int Function();

typedef _c_IsWindowFocused = ffi.Int32 Function();

typedef _dart_IsWindowFocused = int Function();

typedef _c_IsWindowResized = ffi.Int32 Function();

typedef _dart_IsWindowResized = int Function();

typedef _c_IsWindowState = ffi.Int32 Function(
  ffi.Uint32 flag,
);

typedef _dart_IsWindowState = int Function(
  int flag,
);

typedef _c_SetWindowState = ffi.Void Function(
  ffi.Uint32 flags,
);

typedef _dart_SetWindowState = void Function(
  int flags,
);

typedef _c_ClearWindowState = ffi.Void Function(
  ffi.Uint32 flags,
);

typedef _dart_ClearWindowState = void Function(
  int flags,
);

typedef _c_ToggleFullscreen = ffi.Void Function();

typedef _dart_ToggleFullscreen = void Function();

typedef _c_MaximizeWindow = ffi.Void Function();

typedef _dart_MaximizeWindow = void Function();

typedef _c_MinimizeWindow = ffi.Void Function();

typedef _dart_MinimizeWindow = void Function();

typedef _c_RestoreWindow = ffi.Void Function();

typedef _dart_RestoreWindow = void Function();

typedef _c_SetWindowIcon = ffi.Void Function(
  Image image,
);

typedef _dart_SetWindowIcon = void Function(
  Image image,
);

typedef _c_SetWindowTitle = ffi.Void Function(
  ffi.Pointer<ffi.Int8> title,
);

typedef _dart_SetWindowTitle = void Function(
  ffi.Pointer<ffi.Int8> title,
);

typedef _c_SetWindowPosition = ffi.Void Function(
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart_SetWindowPosition = void Function(
  int x,
  int y,
);

typedef _c_SetWindowMonitor = ffi.Void Function(
  ffi.Int32 monitor,
);

typedef _dart_SetWindowMonitor = void Function(
  int monitor,
);

typedef _c_SetWindowMinSize = ffi.Void Function(
  ffi.Int32 width,
  ffi.Int32 height,
);

typedef _dart_SetWindowMinSize = void Function(
  int width,
  int height,
);

typedef _c_SetWindowSize = ffi.Void Function(
  ffi.Int32 width,
  ffi.Int32 height,
);

typedef _dart_SetWindowSize = void Function(
  int width,
  int height,
);

typedef _c_GetWindowHandle = ffi.Pointer<ffi.Void> Function();

typedef _dart_GetWindowHandle = ffi.Pointer<ffi.Void> Function();

typedef _c_GetScreenWidth = ffi.Int32 Function();

typedef _dart_GetScreenWidth = int Function();

typedef _c_GetScreenHeight = ffi.Int32 Function();

typedef _dart_GetScreenHeight = int Function();

typedef _c_GetMonitorCount = ffi.Int32 Function();

typedef _dart_GetMonitorCount = int Function();

typedef _c_GetCurrentMonitor = ffi.Int32 Function();

typedef _dart_GetCurrentMonitor = int Function();

typedef _c_GetMonitorPosition = Vector2 Function(
  ffi.Int32 monitor,
);

typedef _dart_GetMonitorPosition = Vector2 Function(
  int monitor,
);

typedef _c_GetMonitorWidth = ffi.Int32 Function(
  ffi.Int32 monitor,
);

typedef _dart_GetMonitorWidth = int Function(
  int monitor,
);

typedef _c_GetMonitorHeight = ffi.Int32 Function(
  ffi.Int32 monitor,
);

typedef _dart_GetMonitorHeight = int Function(
  int monitor,
);

typedef _c_GetMonitorPhysicalWidth = ffi.Int32 Function(
  ffi.Int32 monitor,
);

typedef _dart_GetMonitorPhysicalWidth = int Function(
  int monitor,
);

typedef _c_GetMonitorPhysicalHeight = ffi.Int32 Function(
  ffi.Int32 monitor,
);

typedef _dart_GetMonitorPhysicalHeight = int Function(
  int monitor,
);

typedef _c_GetMonitorRefreshRate = ffi.Int32 Function(
  ffi.Int32 monitor,
);

typedef _dart_GetMonitorRefreshRate = int Function(
  int monitor,
);

typedef _c_GetWindowPosition = Vector2 Function();

typedef _dart_GetWindowPosition = Vector2 Function();

typedef _c_GetWindowScaleDPI = Vector2 Function();

typedef _dart_GetWindowScaleDPI = Vector2 Function();

typedef _c_GetMonitorName = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 monitor,
);

typedef _dart_GetMonitorName = ffi.Pointer<ffi.Int8> Function(
  int monitor,
);

typedef _c_SetClipboardText = ffi.Void Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _dart_SetClipboardText = void Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _c_GetClipboardText = ffi.Pointer<ffi.Int8> Function();

typedef _dart_GetClipboardText = ffi.Pointer<ffi.Int8> Function();

typedef _c_SwapScreenBuffer = ffi.Void Function();

typedef _dart_SwapScreenBuffer = void Function();

typedef _c_PollInputEvents = ffi.Void Function();

typedef _dart_PollInputEvents = void Function();

typedef _c_WaitTime = ffi.Void Function(
  ffi.Float ms,
);

typedef _dart_WaitTime = void Function(
  double ms,
);

typedef _c_ShowCursor = ffi.Void Function();

typedef _dart_ShowCursor = void Function();

typedef _c_HideCursor = ffi.Void Function();

typedef _dart_HideCursor = void Function();

typedef _c_IsCursorHidden = ffi.Int32 Function();

typedef _dart_IsCursorHidden = int Function();

typedef _c_EnableCursor = ffi.Void Function();

typedef _dart_EnableCursor = void Function();

typedef _c_DisableCursor = ffi.Void Function();

typedef _dart_DisableCursor = void Function();

typedef _c_IsCursorOnScreen = ffi.Int32 Function();

typedef _dart_IsCursorOnScreen = int Function();

typedef _c_ClearBackground = ffi.Void Function(
  Color color,
);

typedef _dart_ClearBackground = void Function(
  Color color,
);

typedef _c_BeginDrawing = ffi.Void Function();

typedef _dart_BeginDrawing = void Function();

typedef _c_EndDrawing = ffi.Void Function();

typedef _dart_EndDrawing = void Function();

typedef _c_BeginMode2D = ffi.Void Function(
  Camera2D camera,
);

typedef _dart_BeginMode2D = void Function(
  Camera2D camera,
);

typedef _c_EndMode2D = ffi.Void Function();

typedef _dart_EndMode2D = void Function();

typedef _c_BeginMode3D = ffi.Void Function(
  Camera3D camera,
);

typedef _dart_BeginMode3D = void Function(
  Camera3D camera,
);

typedef _c_EndMode3D = ffi.Void Function();

typedef _dart_EndMode3D = void Function();

typedef _c_BeginTextureMode = ffi.Void Function(
  RenderTexture target,
);

typedef _dart_BeginTextureMode = void Function(
  RenderTexture target,
);

typedef _c_EndTextureMode = ffi.Void Function();

typedef _dart_EndTextureMode = void Function();

typedef _c_BeginShaderMode = ffi.Void Function(
  Shader shader,
);

typedef _dart_BeginShaderMode = void Function(
  Shader shader,
);

typedef _c_EndShaderMode = ffi.Void Function();

typedef _dart_EndShaderMode = void Function();

typedef _c_BeginBlendMode = ffi.Void Function(
  ffi.Int32 mode,
);

typedef _dart_BeginBlendMode = void Function(
  int mode,
);

typedef _c_EndBlendMode = ffi.Void Function();

typedef _dart_EndBlendMode = void Function();

typedef _c_BeginScissorMode = ffi.Void Function(
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 width,
  ffi.Int32 height,
);

typedef _dart_BeginScissorMode = void Function(
  int x,
  int y,
  int width,
  int height,
);

typedef _c_EndScissorMode = ffi.Void Function();

typedef _dart_EndScissorMode = void Function();

typedef _c_BeginVrStereoMode = ffi.Void Function(
  VrStereoConfig config,
);

typedef _dart_BeginVrStereoMode = void Function(
  VrStereoConfig config,
);

typedef _c_EndVrStereoMode = ffi.Void Function();

typedef _dart_EndVrStereoMode = void Function();

typedef _c_LoadVrStereoConfig = VrStereoConfig Function(
  VrDeviceInfo device,
);

typedef _dart_LoadVrStereoConfig = VrStereoConfig Function(
  VrDeviceInfo device,
);

typedef _c_UnloadVrStereoConfig = ffi.Void Function(
  VrStereoConfig config,
);

typedef _dart_UnloadVrStereoConfig = void Function(
  VrStereoConfig config,
);

typedef _c_LoadShader = Shader Function(
  ffi.Pointer<ffi.Int8> vsFileName,
  ffi.Pointer<ffi.Int8> fsFileName,
);

typedef _dart_LoadShader = Shader Function(
  ffi.Pointer<ffi.Int8> vsFileName,
  ffi.Pointer<ffi.Int8> fsFileName,
);

typedef _c_LoadShaderFromMemory = Shader Function(
  ffi.Pointer<ffi.Int8> vsCode,
  ffi.Pointer<ffi.Int8> fsCode,
);

typedef _dart_LoadShaderFromMemory = Shader Function(
  ffi.Pointer<ffi.Int8> vsCode,
  ffi.Pointer<ffi.Int8> fsCode,
);

typedef _c_GetShaderLocation = ffi.Int32 Function(
  Shader shader,
  ffi.Pointer<ffi.Int8> uniformName,
);

typedef _dart_GetShaderLocation = int Function(
  Shader shader,
  ffi.Pointer<ffi.Int8> uniformName,
);

typedef _c_GetShaderLocationAttrib = ffi.Int32 Function(
  Shader shader,
  ffi.Pointer<ffi.Int8> attribName,
);

typedef _dart_GetShaderLocationAttrib = int Function(
  Shader shader,
  ffi.Pointer<ffi.Int8> attribName,
);

typedef _c_SetShaderValue = ffi.Void Function(
  Shader shader,
  ffi.Int32 locIndex,
  ffi.Pointer<ffi.Void> value,
  ffi.Int32 uniformType,
);

typedef _dart_SetShaderValue = void Function(
  Shader shader,
  int locIndex,
  ffi.Pointer<ffi.Void> value,
  int uniformType,
);

typedef _c_SetShaderValueV = ffi.Void Function(
  Shader shader,
  ffi.Int32 locIndex,
  ffi.Pointer<ffi.Void> value,
  ffi.Int32 uniformType,
  ffi.Int32 count,
);

typedef _dart_SetShaderValueV = void Function(
  Shader shader,
  int locIndex,
  ffi.Pointer<ffi.Void> value,
  int uniformType,
  int count,
);

typedef _c_SetShaderValueMatrix = ffi.Void Function(
  Shader shader,
  ffi.Int32 locIndex,
  Matrix mat,
);

typedef _dart_SetShaderValueMatrix = void Function(
  Shader shader,
  int locIndex,
  Matrix mat,
);

typedef _c_SetShaderValueTexture = ffi.Void Function(
  Shader shader,
  ffi.Int32 locIndex,
  Texture texture,
);

typedef _dart_SetShaderValueTexture = void Function(
  Shader shader,
  int locIndex,
  Texture texture,
);

typedef _c_UnloadShader = ffi.Void Function(
  Shader shader,
);

typedef _dart_UnloadShader = void Function(
  Shader shader,
);

typedef _c_GetMouseRay = Ray Function(
  Vector2 mousePosition,
  Camera3D camera,
);

typedef _dart_GetMouseRay = Ray Function(
  Vector2 mousePosition,
  Camera3D camera,
);

typedef _c_GetCameraMatrix = Matrix Function(
  Camera3D camera,
);

typedef _dart_GetCameraMatrix = Matrix Function(
  Camera3D camera,
);

typedef _c_GetCameraMatrix2D = Matrix Function(
  Camera2D camera,
);

typedef _dart_GetCameraMatrix2D = Matrix Function(
  Camera2D camera,
);

typedef _c_GetWorldToScreen = Vector2 Function(
  Vector3 position,
  Camera3D camera,
);

typedef _dart_GetWorldToScreen = Vector2 Function(
  Vector3 position,
  Camera3D camera,
);

typedef _c_GetWorldToScreenEx = Vector2 Function(
  Vector3 position,
  Camera3D camera,
  ffi.Int32 width,
  ffi.Int32 height,
);

typedef _dart_GetWorldToScreenEx = Vector2 Function(
  Vector3 position,
  Camera3D camera,
  int width,
  int height,
);

typedef _c_GetWorldToScreen2D = Vector2 Function(
  Vector2 position,
  Camera2D camera,
);

typedef _dart_GetWorldToScreen2D = Vector2 Function(
  Vector2 position,
  Camera2D camera,
);

typedef _c_GetScreenToWorld2D = Vector2 Function(
  Vector2 position,
  Camera2D camera,
);

typedef _dart_GetScreenToWorld2D = Vector2 Function(
  Vector2 position,
  Camera2D camera,
);

typedef _c_SetTargetFPS = ffi.Void Function(
  ffi.Int32 fps,
);

typedef _dart_SetTargetFPS = void Function(
  int fps,
);

typedef _c_GetFPS = ffi.Int32 Function();

typedef _dart_GetFPS = int Function();

typedef _c_GetFrameTime = ffi.Float Function();

typedef _dart_GetFrameTime = double Function();

typedef _c_GetTime = ffi.Double Function();

typedef _dart_GetTime = double Function();

typedef _c_GetRandomValue = ffi.Int32 Function(
  ffi.Int32 min,
  ffi.Int32 max,
);

typedef _dart_GetRandomValue = int Function(
  int min,
  int max,
);

typedef _c_SetRandomSeed = ffi.Void Function(
  ffi.Uint32 seed,
);

typedef _dart_SetRandomSeed = void Function(
  int seed,
);

typedef _c_TakeScreenshot = ffi.Void Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _dart_TakeScreenshot = void Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _c_SetConfigFlags = ffi.Void Function(
  ffi.Uint32 flags,
);

typedef _dart_SetConfigFlags = void Function(
  int flags,
);

typedef _c_TraceLog = ffi.Void Function(
  ffi.Int32 logLevel,
  ffi.Pointer<ffi.Int8> text,
);

typedef _dart_TraceLog = void Function(
  int logLevel,
  ffi.Pointer<ffi.Int8> text,
);

typedef _c_SetTraceLogLevel = ffi.Void Function(
  ffi.Int32 logLevel,
);

typedef _dart_SetTraceLogLevel = void Function(
  int logLevel,
);

typedef _c_MemAlloc = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 size,
);

typedef _dart_MemAlloc = ffi.Pointer<ffi.Void> Function(
  int size,
);

typedef _c_MemRealloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> ptr,
  ffi.Int32 size,
);

typedef _dart_MemRealloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> ptr,
  int size,
);

typedef _c_MemFree = ffi.Void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_MemFree = void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef TraceLogCallback = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_SetTraceLogCallback = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<TraceLogCallback>> callback,
);

typedef _dart_SetTraceLogCallback = void Function(
  ffi.Pointer<ffi.NativeFunction<TraceLogCallback>> callback,
);

typedef LoadFileDataCallback = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Uint32>,
);

typedef _c_SetLoadFileDataCallback = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<LoadFileDataCallback>> callback,
);

typedef _dart_SetLoadFileDataCallback = void Function(
  ffi.Pointer<ffi.NativeFunction<LoadFileDataCallback>> callback,
);

typedef SaveFileDataCallback = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint32,
);

typedef _c_SetSaveFileDataCallback = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<SaveFileDataCallback>> callback,
);

typedef _dart_SetSaveFileDataCallback = void Function(
  ffi.Pointer<ffi.NativeFunction<SaveFileDataCallback>> callback,
);

typedef LoadFileTextCallback = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _c_SetLoadFileTextCallback = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<LoadFileTextCallback>> callback,
);

typedef _dart_SetLoadFileTextCallback = void Function(
  ffi.Pointer<ffi.NativeFunction<LoadFileTextCallback>> callback,
);

typedef SaveFileTextCallback = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_SetSaveFileTextCallback = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<SaveFileTextCallback>> callback,
);

typedef _dart_SetSaveFileTextCallback = void Function(
  ffi.Pointer<ffi.NativeFunction<SaveFileTextCallback>> callback,
);

typedef _c_LoadFileData = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Int8> fileName,
  ffi.Pointer<ffi.Uint32> bytesRead,
);

typedef _dart_LoadFileData = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Int8> fileName,
  ffi.Pointer<ffi.Uint32> bytesRead,
);

typedef _c_UnloadFileData = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> data,
);

typedef _dart_UnloadFileData = void Function(
  ffi.Pointer<ffi.Uint8> data,
);

typedef _c_SaveFileData = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> fileName,
  ffi.Pointer<ffi.Void> data,
  ffi.Uint32 bytesToWrite,
);

typedef _dart_SaveFileData = int Function(
  ffi.Pointer<ffi.Int8> fileName,
  ffi.Pointer<ffi.Void> data,
  int bytesToWrite,
);

typedef _c_LoadFileText = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _dart_LoadFileText = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _c_UnloadFileText = ffi.Void Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _dart_UnloadFileText = void Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _c_SaveFileText = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> fileName,
  ffi.Pointer<ffi.Int8> text,
);

typedef _dart_SaveFileText = int Function(
  ffi.Pointer<ffi.Int8> fileName,
  ffi.Pointer<ffi.Int8> text,
);

typedef _c_FileExists = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _dart_FileExists = int Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _c_DirectoryExists = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> dirPath,
);

typedef _dart_DirectoryExists = int Function(
  ffi.Pointer<ffi.Int8> dirPath,
);

typedef _c_IsFileExtension = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> fileName,
  ffi.Pointer<ffi.Int8> ext,
);

typedef _dart_IsFileExtension = int Function(
  ffi.Pointer<ffi.Int8> fileName,
  ffi.Pointer<ffi.Int8> ext,
);

typedef _c_GetFileExtension = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _dart_GetFileExtension = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _c_GetFileName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> filePath,
);

typedef _dart_GetFileName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> filePath,
);

typedef _c_GetFileNameWithoutExt = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> filePath,
);

typedef _dart_GetFileNameWithoutExt = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> filePath,
);

typedef _c_GetDirectoryPath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> filePath,
);

typedef _dart_GetDirectoryPath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> filePath,
);

typedef _c_GetPrevDirectoryPath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> dirPath,
);

typedef _dart_GetPrevDirectoryPath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> dirPath,
);

typedef _c_GetWorkingDirectory = ffi.Pointer<ffi.Int8> Function();

typedef _dart_GetWorkingDirectory = ffi.Pointer<ffi.Int8> Function();

typedef _c_GetDirectoryFiles = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<ffi.Int8> dirPath,
  ffi.Pointer<ffi.Int32> count,
);

typedef _dart_GetDirectoryFiles = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<ffi.Int8> dirPath,
  ffi.Pointer<ffi.Int32> count,
);

typedef _c_ClearDirectoryFiles = ffi.Void Function();

typedef _dart_ClearDirectoryFiles = void Function();

typedef _c_ChangeDirectory = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> dir,
);

typedef _dart_ChangeDirectory = int Function(
  ffi.Pointer<ffi.Int8> dir,
);

typedef _c_IsFileDropped = ffi.Int32 Function();

typedef _dart_IsFileDropped = int Function();

typedef _c_GetDroppedFiles = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<ffi.Int32> count,
);

typedef _dart_GetDroppedFiles = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<ffi.Int32> count,
);

typedef _c_ClearDroppedFiles = ffi.Void Function();

typedef _dart_ClearDroppedFiles = void Function();

typedef _c_GetFileModTime = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _dart_GetFileModTime = int Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _c_CompressData = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Uint8> data,
  ffi.Int32 dataLength,
  ffi.Pointer<ffi.Int32> compDataLength,
);

typedef _dart_CompressData = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Uint8> data,
  int dataLength,
  ffi.Pointer<ffi.Int32> compDataLength,
);

typedef _c_DecompressData = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Uint8> compData,
  ffi.Int32 compDataLength,
  ffi.Pointer<ffi.Int32> dataLength,
);

typedef _dart_DecompressData = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Uint8> compData,
  int compDataLength,
  ffi.Pointer<ffi.Int32> dataLength,
);

typedef _c_EncodeDataBase64 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Uint8> data,
  ffi.Int32 dataLength,
  ffi.Pointer<ffi.Int32> outputLength,
);

typedef _dart_EncodeDataBase64 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Uint8> data,
  int dataLength,
  ffi.Pointer<ffi.Int32> outputLength,
);

typedef _c_DecodeDataBase64 = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Uint8> data,
  ffi.Pointer<ffi.Int32> outputLength,
);

typedef _dart_DecodeDataBase64 = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Uint8> data,
  ffi.Pointer<ffi.Int32> outputLength,
);

typedef _c_SaveStorageValue = ffi.Int32 Function(
  ffi.Uint32 position,
  ffi.Int32 value,
);

typedef _dart_SaveStorageValue = int Function(
  int position,
  int value,
);

typedef _c_LoadStorageValue = ffi.Int32 Function(
  ffi.Uint32 position,
);

typedef _dart_LoadStorageValue = int Function(
  int position,
);

typedef _c_OpenURL = ffi.Void Function(
  ffi.Pointer<ffi.Int8> url,
);

typedef _dart_OpenURL = void Function(
  ffi.Pointer<ffi.Int8> url,
);

typedef _c_IsKeyPressed = ffi.Int32 Function(
  ffi.Int32 key,
);

typedef _dart_IsKeyPressed = int Function(
  int key,
);

typedef _c_IsKeyDown = ffi.Int32 Function(
  ffi.Int32 key,
);

typedef _dart_IsKeyDown = int Function(
  int key,
);

typedef _c_IsKeyReleased = ffi.Int32 Function(
  ffi.Int32 key,
);

typedef _dart_IsKeyReleased = int Function(
  int key,
);

typedef _c_IsKeyUp = ffi.Int32 Function(
  ffi.Int32 key,
);

typedef _dart_IsKeyUp = int Function(
  int key,
);

typedef _c_SetExitKey = ffi.Void Function(
  ffi.Int32 key,
);

typedef _dart_SetExitKey = void Function(
  int key,
);

typedef _c_GetKeyPressed = ffi.Int32 Function();

typedef _dart_GetKeyPressed = int Function();

typedef _c_GetCharPressed = ffi.Int32 Function();

typedef _dart_GetCharPressed = int Function();

typedef _c_IsGamepadAvailable = ffi.Int32 Function(
  ffi.Int32 gamepad,
);

typedef _dart_IsGamepadAvailable = int Function(
  int gamepad,
);

typedef _c_GetGamepadName = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 gamepad,
);

typedef _dart_GetGamepadName = ffi.Pointer<ffi.Int8> Function(
  int gamepad,
);

typedef _c_IsGamepadButtonPressed = ffi.Int32 Function(
  ffi.Int32 gamepad,
  ffi.Int32 button,
);

typedef _dart_IsGamepadButtonPressed = int Function(
  int gamepad,
  int button,
);

typedef _c_IsGamepadButtonDown = ffi.Int32 Function(
  ffi.Int32 gamepad,
  ffi.Int32 button,
);

typedef _dart_IsGamepadButtonDown = int Function(
  int gamepad,
  int button,
);

typedef _c_IsGamepadButtonReleased = ffi.Int32 Function(
  ffi.Int32 gamepad,
  ffi.Int32 button,
);

typedef _dart_IsGamepadButtonReleased = int Function(
  int gamepad,
  int button,
);

typedef _c_IsGamepadButtonUp = ffi.Int32 Function(
  ffi.Int32 gamepad,
  ffi.Int32 button,
);

typedef _dart_IsGamepadButtonUp = int Function(
  int gamepad,
  int button,
);

typedef _c_GetGamepadButtonPressed = ffi.Int32 Function();

typedef _dart_GetGamepadButtonPressed = int Function();

typedef _c_GetGamepadAxisCount = ffi.Int32 Function(
  ffi.Int32 gamepad,
);

typedef _dart_GetGamepadAxisCount = int Function(
  int gamepad,
);

typedef _c_GetGamepadAxisMovement = ffi.Float Function(
  ffi.Int32 gamepad,
  ffi.Int32 axis,
);

typedef _dart_GetGamepadAxisMovement = double Function(
  int gamepad,
  int axis,
);

typedef _c_SetGamepadMappings = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> mappings,
);

typedef _dart_SetGamepadMappings = int Function(
  ffi.Pointer<ffi.Int8> mappings,
);

typedef _c_IsMouseButtonPressed = ffi.Int32 Function(
  ffi.Int32 button,
);

typedef _dart_IsMouseButtonPressed = int Function(
  int button,
);

typedef _c_IsMouseButtonDown = ffi.Int32 Function(
  ffi.Int32 button,
);

typedef _dart_IsMouseButtonDown = int Function(
  int button,
);

typedef _c_IsMouseButtonReleased = ffi.Int32 Function(
  ffi.Int32 button,
);

typedef _dart_IsMouseButtonReleased = int Function(
  int button,
);

typedef _c_IsMouseButtonUp = ffi.Int32 Function(
  ffi.Int32 button,
);

typedef _dart_IsMouseButtonUp = int Function(
  int button,
);

typedef _c_GetMouseX = ffi.Int32 Function();

typedef _dart_GetMouseX = int Function();

typedef _c_GetMouseY = ffi.Int32 Function();

typedef _dart_GetMouseY = int Function();

typedef _c_GetMousePosition = Vector2 Function();

typedef _dart_GetMousePosition = Vector2 Function();

typedef _c_GetMouseDelta = Vector2 Function();

typedef _dart_GetMouseDelta = Vector2 Function();

typedef _c_SetMousePosition = ffi.Void Function(
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart_SetMousePosition = void Function(
  int x,
  int y,
);

typedef _c_SetMouseOffset = ffi.Void Function(
  ffi.Int32 offsetX,
  ffi.Int32 offsetY,
);

typedef _dart_SetMouseOffset = void Function(
  int offsetX,
  int offsetY,
);

typedef _c_SetMouseScale = ffi.Void Function(
  ffi.Float scaleX,
  ffi.Float scaleY,
);

typedef _dart_SetMouseScale = void Function(
  double scaleX,
  double scaleY,
);

typedef _c_GetMouseWheelMove = ffi.Float Function();

typedef _dart_GetMouseWheelMove = double Function();

typedef _c_SetMouseCursor = ffi.Void Function(
  ffi.Int32 cursor,
);

typedef _dart_SetMouseCursor = void Function(
  int cursor,
);

typedef _c_GetTouchX = ffi.Int32 Function();

typedef _dart_GetTouchX = int Function();

typedef _c_GetTouchY = ffi.Int32 Function();

typedef _dart_GetTouchY = int Function();

typedef _c_GetTouchPosition = Vector2 Function(
  ffi.Int32 index,
);

typedef _dart_GetTouchPosition = Vector2 Function(
  int index,
);

typedef _c_GetTouchPointId = ffi.Int32 Function(
  ffi.Int32 index,
);

typedef _dart_GetTouchPointId = int Function(
  int index,
);

typedef _c_GetTouchPointCount = ffi.Int32 Function();

typedef _dart_GetTouchPointCount = int Function();

typedef _c_SetGesturesEnabled = ffi.Void Function(
  ffi.Uint32 flags,
);

typedef _dart_SetGesturesEnabled = void Function(
  int flags,
);

typedef _c_IsGestureDetected = ffi.Int32 Function(
  ffi.Int32 gesture,
);

typedef _dart_IsGestureDetected = int Function(
  int gesture,
);

typedef _c_GetGestureDetected = ffi.Int32 Function();

typedef _dart_GetGestureDetected = int Function();

typedef _c_GetGestureHoldDuration = ffi.Float Function();

typedef _dart_GetGestureHoldDuration = double Function();

typedef _c_GetGestureDragVector = Vector2 Function();

typedef _dart_GetGestureDragVector = Vector2 Function();

typedef _c_GetGestureDragAngle = ffi.Float Function();

typedef _dart_GetGestureDragAngle = double Function();

typedef _c_GetGesturePinchVector = Vector2 Function();

typedef _dart_GetGesturePinchVector = Vector2 Function();

typedef _c_GetGesturePinchAngle = ffi.Float Function();

typedef _dart_GetGesturePinchAngle = double Function();

typedef _c_SetCameraMode = ffi.Void Function(
  Camera3D camera,
  ffi.Int32 mode,
);

typedef _dart_SetCameraMode = void Function(
  Camera3D camera,
  int mode,
);

typedef _c_UpdateCamera = ffi.Void Function(
  ffi.Pointer<Camera3D> camera,
);

typedef _dart_UpdateCamera = void Function(
  ffi.Pointer<Camera3D> camera,
);

typedef _c_SetCameraPanControl = ffi.Void Function(
  ffi.Int32 keyPan,
);

typedef _dart_SetCameraPanControl = void Function(
  int keyPan,
);

typedef _c_SetCameraAltControl = ffi.Void Function(
  ffi.Int32 keyAlt,
);

typedef _dart_SetCameraAltControl = void Function(
  int keyAlt,
);

typedef _c_SetCameraSmoothZoomControl = ffi.Void Function(
  ffi.Int32 keySmoothZoom,
);

typedef _dart_SetCameraSmoothZoomControl = void Function(
  int keySmoothZoom,
);

typedef _c_SetCameraMoveControls = ffi.Void Function(
  ffi.Int32 keyFront,
  ffi.Int32 keyBack,
  ffi.Int32 keyRight,
  ffi.Int32 keyLeft,
  ffi.Int32 keyUp,
  ffi.Int32 keyDown,
);

typedef _dart_SetCameraMoveControls = void Function(
  int keyFront,
  int keyBack,
  int keyRight,
  int keyLeft,
  int keyUp,
  int keyDown,
);

typedef _c_SetShapesTexture = ffi.Void Function(
  Texture texture,
  Rectangle source,
);

typedef _dart_SetShapesTexture = void Function(
  Texture texture,
  Rectangle source,
);

typedef _c_DrawPixel = ffi.Void Function(
  ffi.Int32 posX,
  ffi.Int32 posY,
  Color color,
);

typedef _dart_DrawPixel = void Function(
  int posX,
  int posY,
  Color color,
);

typedef _c_DrawPixelV = ffi.Void Function(
  Vector2 position,
  Color color,
);

typedef _dart_DrawPixelV = void Function(
  Vector2 position,
  Color color,
);

typedef _c_DrawLine = ffi.Void Function(
  ffi.Int32 startPosX,
  ffi.Int32 startPosY,
  ffi.Int32 endPosX,
  ffi.Int32 endPosY,
  Color color,
);

typedef _dart_DrawLine = void Function(
  int startPosX,
  int startPosY,
  int endPosX,
  int endPosY,
  Color color,
);

typedef _c_DrawLineV = ffi.Void Function(
  Vector2 startPos,
  Vector2 endPos,
  Color color,
);

typedef _dart_DrawLineV = void Function(
  Vector2 startPos,
  Vector2 endPos,
  Color color,
);

typedef _c_DrawLineEx = ffi.Void Function(
  Vector2 startPos,
  Vector2 endPos,
  ffi.Float thick,
  Color color,
);

typedef _dart_DrawLineEx = void Function(
  Vector2 startPos,
  Vector2 endPos,
  double thick,
  Color color,
);

typedef _c_DrawLineBezier = ffi.Void Function(
  Vector2 startPos,
  Vector2 endPos,
  ffi.Float thick,
  Color color,
);

typedef _dart_DrawLineBezier = void Function(
  Vector2 startPos,
  Vector2 endPos,
  double thick,
  Color color,
);

typedef _c_DrawLineBezierQuad = ffi.Void Function(
  Vector2 startPos,
  Vector2 endPos,
  Vector2 controlPos,
  ffi.Float thick,
  Color color,
);

typedef _dart_DrawLineBezierQuad = void Function(
  Vector2 startPos,
  Vector2 endPos,
  Vector2 controlPos,
  double thick,
  Color color,
);

typedef _c_DrawLineBezierCubic = ffi.Void Function(
  Vector2 startPos,
  Vector2 endPos,
  Vector2 startControlPos,
  Vector2 endControlPos,
  ffi.Float thick,
  Color color,
);

typedef _dart_DrawLineBezierCubic = void Function(
  Vector2 startPos,
  Vector2 endPos,
  Vector2 startControlPos,
  Vector2 endControlPos,
  double thick,
  Color color,
);

typedef _c_DrawLineStrip = ffi.Void Function(
  ffi.Pointer<Vector2> points,
  ffi.Int32 pointCount,
  Color color,
);

typedef _dart_DrawLineStrip = void Function(
  ffi.Pointer<Vector2> points,
  int pointCount,
  Color color,
);

typedef _c_DrawCircle = ffi.Void Function(
  ffi.Int32 centerX,
  ffi.Int32 centerY,
  ffi.Float radius,
  Color color,
);

typedef _dart_DrawCircle = void Function(
  int centerX,
  int centerY,
  double radius,
  Color color,
);

typedef _c_DrawCircleSector = ffi.Void Function(
  Vector2 center,
  ffi.Float radius,
  ffi.Float startAngle,
  ffi.Float endAngle,
  ffi.Int32 segments,
  Color color,
);

typedef _dart_DrawCircleSector = void Function(
  Vector2 center,
  double radius,
  double startAngle,
  double endAngle,
  int segments,
  Color color,
);

typedef _c_DrawCircleSectorLines = ffi.Void Function(
  Vector2 center,
  ffi.Float radius,
  ffi.Float startAngle,
  ffi.Float endAngle,
  ffi.Int32 segments,
  Color color,
);

typedef _dart_DrawCircleSectorLines = void Function(
  Vector2 center,
  double radius,
  double startAngle,
  double endAngle,
  int segments,
  Color color,
);

typedef _c_DrawCircleGradient = ffi.Void Function(
  ffi.Int32 centerX,
  ffi.Int32 centerY,
  ffi.Float radius,
  Color color1,
  Color color2,
);

typedef _dart_DrawCircleGradient = void Function(
  int centerX,
  int centerY,
  double radius,
  Color color1,
  Color color2,
);

typedef _c_DrawCircleV = ffi.Void Function(
  Vector2 center,
  ffi.Float radius,
  Color color,
);

typedef _dart_DrawCircleV = void Function(
  Vector2 center,
  double radius,
  Color color,
);

typedef _c_DrawCircleLines = ffi.Void Function(
  ffi.Int32 centerX,
  ffi.Int32 centerY,
  ffi.Float radius,
  Color color,
);

typedef _dart_DrawCircleLines = void Function(
  int centerX,
  int centerY,
  double radius,
  Color color,
);

typedef _c_DrawEllipse = ffi.Void Function(
  ffi.Int32 centerX,
  ffi.Int32 centerY,
  ffi.Float radiusH,
  ffi.Float radiusV,
  Color color,
);

typedef _dart_DrawEllipse = void Function(
  int centerX,
  int centerY,
  double radiusH,
  double radiusV,
  Color color,
);

typedef _c_DrawEllipseLines = ffi.Void Function(
  ffi.Int32 centerX,
  ffi.Int32 centerY,
  ffi.Float radiusH,
  ffi.Float radiusV,
  Color color,
);

typedef _dart_DrawEllipseLines = void Function(
  int centerX,
  int centerY,
  double radiusH,
  double radiusV,
  Color color,
);

typedef _c_DrawRing = ffi.Void Function(
  Vector2 center,
  ffi.Float innerRadius,
  ffi.Float outerRadius,
  ffi.Float startAngle,
  ffi.Float endAngle,
  ffi.Int32 segments,
  Color color,
);

typedef _dart_DrawRing = void Function(
  Vector2 center,
  double innerRadius,
  double outerRadius,
  double startAngle,
  double endAngle,
  int segments,
  Color color,
);

typedef _c_DrawRingLines = ffi.Void Function(
  Vector2 center,
  ffi.Float innerRadius,
  ffi.Float outerRadius,
  ffi.Float startAngle,
  ffi.Float endAngle,
  ffi.Int32 segments,
  Color color,
);

typedef _dart_DrawRingLines = void Function(
  Vector2 center,
  double innerRadius,
  double outerRadius,
  double startAngle,
  double endAngle,
  int segments,
  Color color,
);

typedef _c_DrawRectangle = ffi.Void Function(
  ffi.Int32 posX,
  ffi.Int32 posY,
  ffi.Int32 width,
  ffi.Int32 height,
  Color color,
);

typedef _dart_DrawRectangle = void Function(
  int posX,
  int posY,
  int width,
  int height,
  Color color,
);

typedef _c_DrawRectangleV = ffi.Void Function(
  Vector2 position,
  Vector2 size,
  Color color,
);

typedef _dart_DrawRectangleV = void Function(
  Vector2 position,
  Vector2 size,
  Color color,
);

typedef _c_DrawRectangleRec = ffi.Void Function(
  Rectangle rec,
  Color color,
);

typedef _dart_DrawRectangleRec = void Function(
  Rectangle rec,
  Color color,
);

typedef _c_DrawRectanglePro = ffi.Void Function(
  Rectangle rec,
  Vector2 origin,
  ffi.Float rotation,
  Color color,
);

typedef _dart_DrawRectanglePro = void Function(
  Rectangle rec,
  Vector2 origin,
  double rotation,
  Color color,
);

typedef _c_DrawRectangleGradientV = ffi.Void Function(
  ffi.Int32 posX,
  ffi.Int32 posY,
  ffi.Int32 width,
  ffi.Int32 height,
  Color color1,
  Color color2,
);

typedef _dart_DrawRectangleGradientV = void Function(
  int posX,
  int posY,
  int width,
  int height,
  Color color1,
  Color color2,
);

typedef _c_DrawRectangleGradientH = ffi.Void Function(
  ffi.Int32 posX,
  ffi.Int32 posY,
  ffi.Int32 width,
  ffi.Int32 height,
  Color color1,
  Color color2,
);

typedef _dart_DrawRectangleGradientH = void Function(
  int posX,
  int posY,
  int width,
  int height,
  Color color1,
  Color color2,
);

typedef _c_DrawRectangleGradientEx = ffi.Void Function(
  Rectangle rec,
  Color col1,
  Color col2,
  Color col3,
  Color col4,
);

typedef _dart_DrawRectangleGradientEx = void Function(
  Rectangle rec,
  Color col1,
  Color col2,
  Color col3,
  Color col4,
);

typedef _c_DrawRectangleLines = ffi.Void Function(
  ffi.Int32 posX,
  ffi.Int32 posY,
  ffi.Int32 width,
  ffi.Int32 height,
  Color color,
);

typedef _dart_DrawRectangleLines = void Function(
  int posX,
  int posY,
  int width,
  int height,
  Color color,
);

typedef _c_DrawRectangleLinesEx = ffi.Void Function(
  Rectangle rec,
  ffi.Float lineThick,
  Color color,
);

typedef _dart_DrawRectangleLinesEx = void Function(
  Rectangle rec,
  double lineThick,
  Color color,
);

typedef _c_DrawRectangleRounded = ffi.Void Function(
  Rectangle rec,
  ffi.Float roundness,
  ffi.Int32 segments,
  Color color,
);

typedef _dart_DrawRectangleRounded = void Function(
  Rectangle rec,
  double roundness,
  int segments,
  Color color,
);

typedef _c_DrawRectangleRoundedLines = ffi.Void Function(
  Rectangle rec,
  ffi.Float roundness,
  ffi.Int32 segments,
  ffi.Float lineThick,
  Color color,
);

typedef _dart_DrawRectangleRoundedLines = void Function(
  Rectangle rec,
  double roundness,
  int segments,
  double lineThick,
  Color color,
);

typedef _c_DrawTriangle = ffi.Void Function(
  Vector2 v1,
  Vector2 v2,
  Vector2 v3,
  Color color,
);

typedef _dart_DrawTriangle = void Function(
  Vector2 v1,
  Vector2 v2,
  Vector2 v3,
  Color color,
);

typedef _c_DrawTriangleLines = ffi.Void Function(
  Vector2 v1,
  Vector2 v2,
  Vector2 v3,
  Color color,
);

typedef _dart_DrawTriangleLines = void Function(
  Vector2 v1,
  Vector2 v2,
  Vector2 v3,
  Color color,
);

typedef _c_DrawTriangleFan = ffi.Void Function(
  ffi.Pointer<Vector2> points,
  ffi.Int32 pointCount,
  Color color,
);

typedef _dart_DrawTriangleFan = void Function(
  ffi.Pointer<Vector2> points,
  int pointCount,
  Color color,
);

typedef _c_DrawTriangleStrip = ffi.Void Function(
  ffi.Pointer<Vector2> points,
  ffi.Int32 pointCount,
  Color color,
);

typedef _dart_DrawTriangleStrip = void Function(
  ffi.Pointer<Vector2> points,
  int pointCount,
  Color color,
);

typedef _c_DrawPoly = ffi.Void Function(
  Vector2 center,
  ffi.Int32 sides,
  ffi.Float radius,
  ffi.Float rotation,
  Color color,
);

typedef _dart_DrawPoly = void Function(
  Vector2 center,
  int sides,
  double radius,
  double rotation,
  Color color,
);

typedef _c_DrawPolyLines = ffi.Void Function(
  Vector2 center,
  ffi.Int32 sides,
  ffi.Float radius,
  ffi.Float rotation,
  Color color,
);

typedef _dart_DrawPolyLines = void Function(
  Vector2 center,
  int sides,
  double radius,
  double rotation,
  Color color,
);

typedef _c_DrawPolyLinesEx = ffi.Void Function(
  Vector2 center,
  ffi.Int32 sides,
  ffi.Float radius,
  ffi.Float rotation,
  ffi.Float lineThick,
  Color color,
);

typedef _dart_DrawPolyLinesEx = void Function(
  Vector2 center,
  int sides,
  double radius,
  double rotation,
  double lineThick,
  Color color,
);

typedef _c_CheckCollisionRecs = ffi.Int32 Function(
  Rectangle rec1,
  Rectangle rec2,
);

typedef _dart_CheckCollisionRecs = int Function(
  Rectangle rec1,
  Rectangle rec2,
);

typedef _c_CheckCollisionCircles = ffi.Int32 Function(
  Vector2 center1,
  ffi.Float radius1,
  Vector2 center2,
  ffi.Float radius2,
);

typedef _dart_CheckCollisionCircles = int Function(
  Vector2 center1,
  double radius1,
  Vector2 center2,
  double radius2,
);

typedef _c_CheckCollisionCircleRec = ffi.Int32 Function(
  Vector2 center,
  ffi.Float radius,
  Rectangle rec,
);

typedef _dart_CheckCollisionCircleRec = int Function(
  Vector2 center,
  double radius,
  Rectangle rec,
);

typedef _c_CheckCollisionPointRec = ffi.Int32 Function(
  Vector2 point,
  Rectangle rec,
);

typedef _dart_CheckCollisionPointRec = int Function(
  Vector2 point,
  Rectangle rec,
);

typedef _c_CheckCollisionPointCircle = ffi.Int32 Function(
  Vector2 point,
  Vector2 center,
  ffi.Float radius,
);

typedef _dart_CheckCollisionPointCircle = int Function(
  Vector2 point,
  Vector2 center,
  double radius,
);

typedef _c_CheckCollisionPointTriangle = ffi.Int32 Function(
  Vector2 point,
  Vector2 p1,
  Vector2 p2,
  Vector2 p3,
);

typedef _dart_CheckCollisionPointTriangle = int Function(
  Vector2 point,
  Vector2 p1,
  Vector2 p2,
  Vector2 p3,
);

typedef _c_CheckCollisionLines = ffi.Int32 Function(
  Vector2 startPos1,
  Vector2 endPos1,
  Vector2 startPos2,
  Vector2 endPos2,
  ffi.Pointer<Vector2> collisionPoint,
);

typedef _dart_CheckCollisionLines = int Function(
  Vector2 startPos1,
  Vector2 endPos1,
  Vector2 startPos2,
  Vector2 endPos2,
  ffi.Pointer<Vector2> collisionPoint,
);

typedef _c_CheckCollisionPointLine = ffi.Int32 Function(
  Vector2 point,
  Vector2 p1,
  Vector2 p2,
  ffi.Int32 threshold,
);

typedef _dart_CheckCollisionPointLine = int Function(
  Vector2 point,
  Vector2 p1,
  Vector2 p2,
  int threshold,
);

typedef _c_GetCollisionRec = Rectangle Function(
  Rectangle rec1,
  Rectangle rec2,
);

typedef _dart_GetCollisionRec = Rectangle Function(
  Rectangle rec1,
  Rectangle rec2,
);

typedef _c_LoadImage = Image Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _dart_LoadImage = Image Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _c_LoadImageRaw = Image Function(
  ffi.Pointer<ffi.Int8> fileName,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 format,
  ffi.Int32 headerSize,
);

typedef _dart_LoadImageRaw = Image Function(
  ffi.Pointer<ffi.Int8> fileName,
  int width,
  int height,
  int format,
  int headerSize,
);

typedef _c_LoadImageAnim = Image Function(
  ffi.Pointer<ffi.Int8> fileName,
  ffi.Pointer<ffi.Int32> frames,
);

typedef _dart_LoadImageAnim = Image Function(
  ffi.Pointer<ffi.Int8> fileName,
  ffi.Pointer<ffi.Int32> frames,
);

typedef _c_LoadImageFromMemory = Image Function(
  ffi.Pointer<ffi.Int8> fileType,
  ffi.Pointer<ffi.Uint8> fileData,
  ffi.Int32 dataSize,
);

typedef _dart_LoadImageFromMemory = Image Function(
  ffi.Pointer<ffi.Int8> fileType,
  ffi.Pointer<ffi.Uint8> fileData,
  int dataSize,
);

typedef _c_LoadImageFromTexture = Image Function(
  Texture texture,
);

typedef _dart_LoadImageFromTexture = Image Function(
  Texture texture,
);

typedef _c_LoadImageFromScreen = Image Function();

typedef _dart_LoadImageFromScreen = Image Function();

typedef _c_UnloadImage = ffi.Void Function(
  Image image,
);

typedef _dart_UnloadImage = void Function(
  Image image,
);

typedef _c_ExportImage = ffi.Int32 Function(
  Image image,
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _dart_ExportImage = int Function(
  Image image,
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _c_ExportImageAsCode = ffi.Int32 Function(
  Image image,
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _dart_ExportImageAsCode = int Function(
  Image image,
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _c_GenImageColor = Image Function(
  ffi.Int32 width,
  ffi.Int32 height,
  Color color,
);

typedef _dart_GenImageColor = Image Function(
  int width,
  int height,
  Color color,
);

typedef _c_GenImageGradientV = Image Function(
  ffi.Int32 width,
  ffi.Int32 height,
  Color top,
  Color bottom,
);

typedef _dart_GenImageGradientV = Image Function(
  int width,
  int height,
  Color top,
  Color bottom,
);

typedef _c_GenImageGradientH = Image Function(
  ffi.Int32 width,
  ffi.Int32 height,
  Color left,
  Color right,
);

typedef _dart_GenImageGradientH = Image Function(
  int width,
  int height,
  Color left,
  Color right,
);

typedef _c_GenImageGradientRadial = Image Function(
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Float density,
  Color inner,
  Color outer,
);

typedef _dart_GenImageGradientRadial = Image Function(
  int width,
  int height,
  double density,
  Color inner,
  Color outer,
);

typedef _c_GenImageChecked = Image Function(
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 checksX,
  ffi.Int32 checksY,
  Color col1,
  Color col2,
);

typedef _dart_GenImageChecked = Image Function(
  int width,
  int height,
  int checksX,
  int checksY,
  Color col1,
  Color col2,
);

typedef _c_GenImageWhiteNoise = Image Function(
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Float factor,
);

typedef _dart_GenImageWhiteNoise = Image Function(
  int width,
  int height,
  double factor,
);

typedef _c_GenImageCellular = Image Function(
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 tileSize,
);

typedef _dart_GenImageCellular = Image Function(
  int width,
  int height,
  int tileSize,
);

typedef _c_ImageCopy = Image Function(
  Image image,
);

typedef _dart_ImageCopy = Image Function(
  Image image,
);

typedef _c_ImageFromImage = Image Function(
  Image image,
  Rectangle rec,
);

typedef _dart_ImageFromImage = Image Function(
  Image image,
  Rectangle rec,
);

typedef _c_ImageText = Image Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Int32 fontSize,
  Color color,
);

typedef _dart_ImageText = Image Function(
  ffi.Pointer<ffi.Int8> text,
  int fontSize,
  Color color,
);

typedef _c_ImageTextEx = Image Function(
  Font font,
  ffi.Pointer<ffi.Int8> text,
  ffi.Float fontSize,
  ffi.Float spacing,
  Color tint,
);

typedef _dart_ImageTextEx = Image Function(
  Font font,
  ffi.Pointer<ffi.Int8> text,
  double fontSize,
  double spacing,
  Color tint,
);

typedef _c_ImageFormat = ffi.Void Function(
  ffi.Pointer<Image> image,
  ffi.Int32 newFormat,
);

typedef _dart_ImageFormat = void Function(
  ffi.Pointer<Image> image,
  int newFormat,
);

typedef _c_ImageToPOT = ffi.Void Function(
  ffi.Pointer<Image> image,
  Color fill,
);

typedef _dart_ImageToPOT = void Function(
  ffi.Pointer<Image> image,
  Color fill,
);

typedef _c_ImageCrop = ffi.Void Function(
  ffi.Pointer<Image> image,
  Rectangle crop,
);

typedef _dart_ImageCrop = void Function(
  ffi.Pointer<Image> image,
  Rectangle crop,
);

typedef _c_ImageAlphaCrop = ffi.Void Function(
  ffi.Pointer<Image> image,
  ffi.Float threshold,
);

typedef _dart_ImageAlphaCrop = void Function(
  ffi.Pointer<Image> image,
  double threshold,
);

typedef _c_ImageAlphaClear = ffi.Void Function(
  ffi.Pointer<Image> image,
  Color color,
  ffi.Float threshold,
);

typedef _dart_ImageAlphaClear = void Function(
  ffi.Pointer<Image> image,
  Color color,
  double threshold,
);

typedef _c_ImageAlphaMask = ffi.Void Function(
  ffi.Pointer<Image> image,
  Image alphaMask,
);

typedef _dart_ImageAlphaMask = void Function(
  ffi.Pointer<Image> image,
  Image alphaMask,
);

typedef _c_ImageAlphaPremultiply = ffi.Void Function(
  ffi.Pointer<Image> image,
);

typedef _dart_ImageAlphaPremultiply = void Function(
  ffi.Pointer<Image> image,
);

typedef _c_ImageResize = ffi.Void Function(
  ffi.Pointer<Image> image,
  ffi.Int32 newWidth,
  ffi.Int32 newHeight,
);

typedef _dart_ImageResize = void Function(
  ffi.Pointer<Image> image,
  int newWidth,
  int newHeight,
);

typedef _c_ImageResizeNN = ffi.Void Function(
  ffi.Pointer<Image> image,
  ffi.Int32 newWidth,
  ffi.Int32 newHeight,
);

typedef _dart_ImageResizeNN = void Function(
  ffi.Pointer<Image> image,
  int newWidth,
  int newHeight,
);

typedef _c_ImageResizeCanvas = ffi.Void Function(
  ffi.Pointer<Image> image,
  ffi.Int32 newWidth,
  ffi.Int32 newHeight,
  ffi.Int32 offsetX,
  ffi.Int32 offsetY,
  Color fill,
);

typedef _dart_ImageResizeCanvas = void Function(
  ffi.Pointer<Image> image,
  int newWidth,
  int newHeight,
  int offsetX,
  int offsetY,
  Color fill,
);

typedef _c_ImageMipmaps = ffi.Void Function(
  ffi.Pointer<Image> image,
);

typedef _dart_ImageMipmaps = void Function(
  ffi.Pointer<Image> image,
);

typedef _c_ImageDither = ffi.Void Function(
  ffi.Pointer<Image> image,
  ffi.Int32 rBpp,
  ffi.Int32 gBpp,
  ffi.Int32 bBpp,
  ffi.Int32 aBpp,
);

typedef _dart_ImageDither = void Function(
  ffi.Pointer<Image> image,
  int rBpp,
  int gBpp,
  int bBpp,
  int aBpp,
);

typedef _c_ImageFlipVertical = ffi.Void Function(
  ffi.Pointer<Image> image,
);

typedef _dart_ImageFlipVertical = void Function(
  ffi.Pointer<Image> image,
);

typedef _c_ImageFlipHorizontal = ffi.Void Function(
  ffi.Pointer<Image> image,
);

typedef _dart_ImageFlipHorizontal = void Function(
  ffi.Pointer<Image> image,
);

typedef _c_ImageRotateCW = ffi.Void Function(
  ffi.Pointer<Image> image,
);

typedef _dart_ImageRotateCW = void Function(
  ffi.Pointer<Image> image,
);

typedef _c_ImageRotateCCW = ffi.Void Function(
  ffi.Pointer<Image> image,
);

typedef _dart_ImageRotateCCW = void Function(
  ffi.Pointer<Image> image,
);

typedef _c_ImageColorTint = ffi.Void Function(
  ffi.Pointer<Image> image,
  Color color,
);

typedef _dart_ImageColorTint = void Function(
  ffi.Pointer<Image> image,
  Color color,
);

typedef _c_ImageColorInvert = ffi.Void Function(
  ffi.Pointer<Image> image,
);

typedef _dart_ImageColorInvert = void Function(
  ffi.Pointer<Image> image,
);

typedef _c_ImageColorGrayscale = ffi.Void Function(
  ffi.Pointer<Image> image,
);

typedef _dart_ImageColorGrayscale = void Function(
  ffi.Pointer<Image> image,
);

typedef _c_ImageColorContrast = ffi.Void Function(
  ffi.Pointer<Image> image,
  ffi.Float contrast,
);

typedef _dart_ImageColorContrast = void Function(
  ffi.Pointer<Image> image,
  double contrast,
);

typedef _c_ImageColorBrightness = ffi.Void Function(
  ffi.Pointer<Image> image,
  ffi.Int32 brightness,
);

typedef _dart_ImageColorBrightness = void Function(
  ffi.Pointer<Image> image,
  int brightness,
);

typedef _c_ImageColorReplace = ffi.Void Function(
  ffi.Pointer<Image> image,
  Color color,
  Color replace,
);

typedef _dart_ImageColorReplace = void Function(
  ffi.Pointer<Image> image,
  Color color,
  Color replace,
);

typedef _c_LoadImageColors = ffi.Pointer<Color> Function(
  Image image,
);

typedef _dart_LoadImageColors = ffi.Pointer<Color> Function(
  Image image,
);

typedef _c_LoadImagePalette = ffi.Pointer<Color> Function(
  Image image,
  ffi.Int32 maxPaletteSize,
  ffi.Pointer<ffi.Int32> colorCount,
);

typedef _dart_LoadImagePalette = ffi.Pointer<Color> Function(
  Image image,
  int maxPaletteSize,
  ffi.Pointer<ffi.Int32> colorCount,
);

typedef _c_UnloadImageColors = ffi.Void Function(
  ffi.Pointer<Color> colors,
);

typedef _dart_UnloadImageColors = void Function(
  ffi.Pointer<Color> colors,
);

typedef _c_UnloadImagePalette = ffi.Void Function(
  ffi.Pointer<Color> colors,
);

typedef _dart_UnloadImagePalette = void Function(
  ffi.Pointer<Color> colors,
);

typedef _c_GetImageAlphaBorder = Rectangle Function(
  Image image,
  ffi.Float threshold,
);

typedef _dart_GetImageAlphaBorder = Rectangle Function(
  Image image,
  double threshold,
);

typedef _c_GetImageColor = Color Function(
  Image image,
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart_GetImageColor = Color Function(
  Image image,
  int x,
  int y,
);

typedef _c_ImageClearBackground = ffi.Void Function(
  ffi.Pointer<Image> dst,
  Color color,
);

typedef _dart_ImageClearBackground = void Function(
  ffi.Pointer<Image> dst,
  Color color,
);

typedef _c_ImageDrawPixel = ffi.Void Function(
  ffi.Pointer<Image> dst,
  ffi.Int32 posX,
  ffi.Int32 posY,
  Color color,
);

typedef _dart_ImageDrawPixel = void Function(
  ffi.Pointer<Image> dst,
  int posX,
  int posY,
  Color color,
);

typedef _c_ImageDrawPixelV = ffi.Void Function(
  ffi.Pointer<Image> dst,
  Vector2 position,
  Color color,
);

typedef _dart_ImageDrawPixelV = void Function(
  ffi.Pointer<Image> dst,
  Vector2 position,
  Color color,
);

typedef _c_ImageDrawLine = ffi.Void Function(
  ffi.Pointer<Image> dst,
  ffi.Int32 startPosX,
  ffi.Int32 startPosY,
  ffi.Int32 endPosX,
  ffi.Int32 endPosY,
  Color color,
);

typedef _dart_ImageDrawLine = void Function(
  ffi.Pointer<Image> dst,
  int startPosX,
  int startPosY,
  int endPosX,
  int endPosY,
  Color color,
);

typedef _c_ImageDrawLineV = ffi.Void Function(
  ffi.Pointer<Image> dst,
  Vector2 start,
  Vector2 end,
  Color color,
);

typedef _dart_ImageDrawLineV = void Function(
  ffi.Pointer<Image> dst,
  Vector2 start,
  Vector2 end,
  Color color,
);

typedef _c_ImageDrawCircle = ffi.Void Function(
  ffi.Pointer<Image> dst,
  ffi.Int32 centerX,
  ffi.Int32 centerY,
  ffi.Int32 radius,
  Color color,
);

typedef _dart_ImageDrawCircle = void Function(
  ffi.Pointer<Image> dst,
  int centerX,
  int centerY,
  int radius,
  Color color,
);

typedef _c_ImageDrawCircleV = ffi.Void Function(
  ffi.Pointer<Image> dst,
  Vector2 center,
  ffi.Int32 radius,
  Color color,
);

typedef _dart_ImageDrawCircleV = void Function(
  ffi.Pointer<Image> dst,
  Vector2 center,
  int radius,
  Color color,
);

typedef _c_ImageDrawRectangle = ffi.Void Function(
  ffi.Pointer<Image> dst,
  ffi.Int32 posX,
  ffi.Int32 posY,
  ffi.Int32 width,
  ffi.Int32 height,
  Color color,
);

typedef _dart_ImageDrawRectangle = void Function(
  ffi.Pointer<Image> dst,
  int posX,
  int posY,
  int width,
  int height,
  Color color,
);

typedef _c_ImageDrawRectangleV = ffi.Void Function(
  ffi.Pointer<Image> dst,
  Vector2 position,
  Vector2 size,
  Color color,
);

typedef _dart_ImageDrawRectangleV = void Function(
  ffi.Pointer<Image> dst,
  Vector2 position,
  Vector2 size,
  Color color,
);

typedef _c_ImageDrawRectangleRec = ffi.Void Function(
  ffi.Pointer<Image> dst,
  Rectangle rec,
  Color color,
);

typedef _dart_ImageDrawRectangleRec = void Function(
  ffi.Pointer<Image> dst,
  Rectangle rec,
  Color color,
);

typedef _c_ImageDrawRectangleLines = ffi.Void Function(
  ffi.Pointer<Image> dst,
  Rectangle rec,
  ffi.Int32 thick,
  Color color,
);

typedef _dart_ImageDrawRectangleLines = void Function(
  ffi.Pointer<Image> dst,
  Rectangle rec,
  int thick,
  Color color,
);

typedef _c_ImageDraw = ffi.Void Function(
  ffi.Pointer<Image> dst,
  Image src,
  Rectangle srcRec,
  Rectangle dstRec,
  Color tint,
);

typedef _dart_ImageDraw = void Function(
  ffi.Pointer<Image> dst,
  Image src,
  Rectangle srcRec,
  Rectangle dstRec,
  Color tint,
);

typedef _c_ImageDrawText = ffi.Void Function(
  ffi.Pointer<Image> dst,
  ffi.Pointer<ffi.Int8> text,
  ffi.Int32 posX,
  ffi.Int32 posY,
  ffi.Int32 fontSize,
  Color color,
);

typedef _dart_ImageDrawText = void Function(
  ffi.Pointer<Image> dst,
  ffi.Pointer<ffi.Int8> text,
  int posX,
  int posY,
  int fontSize,
  Color color,
);

typedef _c_ImageDrawTextEx = ffi.Void Function(
  ffi.Pointer<Image> dst,
  Font font,
  ffi.Pointer<ffi.Int8> text,
  Vector2 position,
  ffi.Float fontSize,
  ffi.Float spacing,
  Color tint,
);

typedef _dart_ImageDrawTextEx = void Function(
  ffi.Pointer<Image> dst,
  Font font,
  ffi.Pointer<ffi.Int8> text,
  Vector2 position,
  double fontSize,
  double spacing,
  Color tint,
);

typedef _c_LoadTexture = Texture Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _dart_LoadTexture = Texture Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _c_LoadTextureFromImage = Texture Function(
  Image image,
);

typedef _dart_LoadTextureFromImage = Texture Function(
  Image image,
);

typedef _c_LoadTextureCubemap = Texture Function(
  Image image,
  ffi.Int32 layout,
);

typedef _dart_LoadTextureCubemap = Texture Function(
  Image image,
  int layout,
);

typedef _c_LoadRenderTexture = RenderTexture Function(
  ffi.Int32 width,
  ffi.Int32 height,
);

typedef _dart_LoadRenderTexture = RenderTexture Function(
  int width,
  int height,
);

typedef _c_UnloadTexture = ffi.Void Function(
  Texture texture,
);

typedef _dart_UnloadTexture = void Function(
  Texture texture,
);

typedef _c_UnloadRenderTexture = ffi.Void Function(
  RenderTexture target,
);

typedef _dart_UnloadRenderTexture = void Function(
  RenderTexture target,
);

typedef _c_UpdateTexture = ffi.Void Function(
  Texture texture,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _dart_UpdateTexture = void Function(
  Texture texture,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _c_UpdateTextureRec = ffi.Void Function(
  Texture texture,
  Rectangle rec,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _dart_UpdateTextureRec = void Function(
  Texture texture,
  Rectangle rec,
  ffi.Pointer<ffi.Void> pixels,
);

typedef _c_GenTextureMipmaps = ffi.Void Function(
  ffi.Pointer<Texture> texture,
);

typedef _dart_GenTextureMipmaps = void Function(
  ffi.Pointer<Texture> texture,
);

typedef _c_SetTextureFilter = ffi.Void Function(
  Texture texture,
  ffi.Int32 filter,
);

typedef _dart_SetTextureFilter = void Function(
  Texture texture,
  int filter,
);

typedef _c_SetTextureWrap = ffi.Void Function(
  Texture texture,
  ffi.Int32 wrap,
);

typedef _dart_SetTextureWrap = void Function(
  Texture texture,
  int wrap,
);

typedef _c_DrawTexture = ffi.Void Function(
  Texture texture,
  ffi.Int32 posX,
  ffi.Int32 posY,
  Color tint,
);

typedef _dart_DrawTexture = void Function(
  Texture texture,
  int posX,
  int posY,
  Color tint,
);

typedef _c_DrawTextureV = ffi.Void Function(
  Texture texture,
  Vector2 position,
  Color tint,
);

typedef _dart_DrawTextureV = void Function(
  Texture texture,
  Vector2 position,
  Color tint,
);

typedef _c_DrawTextureEx = ffi.Void Function(
  Texture texture,
  Vector2 position,
  ffi.Float rotation,
  ffi.Float scale,
  Color tint,
);

typedef _dart_DrawTextureEx = void Function(
  Texture texture,
  Vector2 position,
  double rotation,
  double scale,
  Color tint,
);

typedef _c_DrawTextureRec = ffi.Void Function(
  Texture texture,
  Rectangle source,
  Vector2 position,
  Color tint,
);

typedef _dart_DrawTextureRec = void Function(
  Texture texture,
  Rectangle source,
  Vector2 position,
  Color tint,
);

typedef _c_DrawTextureQuad = ffi.Void Function(
  Texture texture,
  Vector2 tiling,
  Vector2 offset,
  Rectangle quad,
  Color tint,
);

typedef _dart_DrawTextureQuad = void Function(
  Texture texture,
  Vector2 tiling,
  Vector2 offset,
  Rectangle quad,
  Color tint,
);

typedef _c_DrawTextureTiled = ffi.Void Function(
  Texture texture,
  Rectangle source,
  Rectangle dest,
  Vector2 origin,
  ffi.Float rotation,
  ffi.Float scale,
  Color tint,
);

typedef _dart_DrawTextureTiled = void Function(
  Texture texture,
  Rectangle source,
  Rectangle dest,
  Vector2 origin,
  double rotation,
  double scale,
  Color tint,
);

typedef _c_DrawTexturePro = ffi.Void Function(
  Texture texture,
  Rectangle source,
  Rectangle dest,
  Vector2 origin,
  ffi.Float rotation,
  Color tint,
);

typedef _dart_DrawTexturePro = void Function(
  Texture texture,
  Rectangle source,
  Rectangle dest,
  Vector2 origin,
  double rotation,
  Color tint,
);

typedef _c_DrawTextureNPatch = ffi.Void Function(
  Texture texture,
  NPatchInfo nPatchInfo,
  Rectangle dest,
  Vector2 origin,
  ffi.Float rotation,
  Color tint,
);

typedef _dart_DrawTextureNPatch = void Function(
  Texture texture,
  NPatchInfo nPatchInfo,
  Rectangle dest,
  Vector2 origin,
  double rotation,
  Color tint,
);

typedef _c_DrawTexturePoly = ffi.Void Function(
  Texture texture,
  Vector2 center,
  ffi.Pointer<Vector2> points,
  ffi.Pointer<Vector2> texcoords,
  ffi.Int32 pointCount,
  Color tint,
);

typedef _dart_DrawTexturePoly = void Function(
  Texture texture,
  Vector2 center,
  ffi.Pointer<Vector2> points,
  ffi.Pointer<Vector2> texcoords,
  int pointCount,
  Color tint,
);

typedef _c_Fade = Color Function(
  Color color,
  ffi.Float alpha,
);

typedef _dart_Fade = Color Function(
  Color color,
  double alpha,
);

typedef _c_ColorToInt = ffi.Int32 Function(
  Color color,
);

typedef _dart_ColorToInt = int Function(
  Color color,
);

typedef _c_ColorNormalize = Vector4 Function(
  Color color,
);

typedef _dart_ColorNormalize = Vector4 Function(
  Color color,
);

typedef _c_ColorFromNormalized = Color Function(
  Vector4 normalized,
);

typedef _dart_ColorFromNormalized = Color Function(
  Vector4 normalized,
);

typedef _c_ColorToHSV = Vector3 Function(
  Color color,
);

typedef _dart_ColorToHSV = Vector3 Function(
  Color color,
);

typedef _c_ColorFromHSV = Color Function(
  ffi.Float hue,
  ffi.Float saturation,
  ffi.Float value,
);

typedef _dart_ColorFromHSV = Color Function(
  double hue,
  double saturation,
  double value,
);

typedef _c_ColorAlpha = Color Function(
  Color color,
  ffi.Float alpha,
);

typedef _dart_ColorAlpha = Color Function(
  Color color,
  double alpha,
);

typedef _c_ColorAlphaBlend = Color Function(
  Color dst,
  Color src,
  Color tint,
);

typedef _dart_ColorAlphaBlend = Color Function(
  Color dst,
  Color src,
  Color tint,
);

typedef _c_GetColor = Color Function(
  ffi.Uint32 hexValue,
);

typedef _dart_GetColor = Color Function(
  int hexValue,
);

typedef _c_GetPixelColor = Color Function(
  ffi.Pointer<ffi.Void> srcPtr,
  ffi.Int32 format,
);

typedef _dart_GetPixelColor = Color Function(
  ffi.Pointer<ffi.Void> srcPtr,
  int format,
);

typedef _c_SetPixelColor = ffi.Void Function(
  ffi.Pointer<ffi.Void> dstPtr,
  Color color,
  ffi.Int32 format,
);

typedef _dart_SetPixelColor = void Function(
  ffi.Pointer<ffi.Void> dstPtr,
  Color color,
  int format,
);

typedef _c_GetPixelDataSize = ffi.Int32 Function(
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 format,
);

typedef _dart_GetPixelDataSize = int Function(
  int width,
  int height,
  int format,
);

typedef _c_GetFontDefault = Font Function();

typedef _dart_GetFontDefault = Font Function();

typedef _c_LoadFont = Font Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _dart_LoadFont = Font Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _c_LoadFontEx = Font Function(
  ffi.Pointer<ffi.Int8> fileName,
  ffi.Int32 fontSize,
  ffi.Pointer<ffi.Int32> fontChars,
  ffi.Int32 glyphCount,
);

typedef _dart_LoadFontEx = Font Function(
  ffi.Pointer<ffi.Int8> fileName,
  int fontSize,
  ffi.Pointer<ffi.Int32> fontChars,
  int glyphCount,
);

typedef _c_LoadFontFromImage = Font Function(
  Image image,
  Color key,
  ffi.Int32 firstChar,
);

typedef _dart_LoadFontFromImage = Font Function(
  Image image,
  Color key,
  int firstChar,
);

typedef _c_LoadFontFromMemory = Font Function(
  ffi.Pointer<ffi.Int8> fileType,
  ffi.Pointer<ffi.Uint8> fileData,
  ffi.Int32 dataSize,
  ffi.Int32 fontSize,
  ffi.Pointer<ffi.Int32> fontChars,
  ffi.Int32 glyphCount,
);

typedef _dart_LoadFontFromMemory = Font Function(
  ffi.Pointer<ffi.Int8> fileType,
  ffi.Pointer<ffi.Uint8> fileData,
  int dataSize,
  int fontSize,
  ffi.Pointer<ffi.Int32> fontChars,
  int glyphCount,
);

typedef _c_LoadFontData = ffi.Pointer<GlyphInfo> Function(
  ffi.Pointer<ffi.Uint8> fileData,
  ffi.Int32 dataSize,
  ffi.Int32 fontSize,
  ffi.Pointer<ffi.Int32> fontChars,
  ffi.Int32 glyphCount,
  ffi.Int32 type,
);

typedef _dart_LoadFontData = ffi.Pointer<GlyphInfo> Function(
  ffi.Pointer<ffi.Uint8> fileData,
  int dataSize,
  int fontSize,
  ffi.Pointer<ffi.Int32> fontChars,
  int glyphCount,
  int type,
);

typedef _c_GenImageFontAtlas = Image Function(
  ffi.Pointer<GlyphInfo> chars,
  ffi.Pointer<ffi.Pointer<Rectangle>> recs,
  ffi.Int32 glyphCount,
  ffi.Int32 fontSize,
  ffi.Int32 padding,
  ffi.Int32 packMethod,
);

typedef _dart_GenImageFontAtlas = Image Function(
  ffi.Pointer<GlyphInfo> chars,
  ffi.Pointer<ffi.Pointer<Rectangle>> recs,
  int glyphCount,
  int fontSize,
  int padding,
  int packMethod,
);

typedef _c_UnloadFontData = ffi.Void Function(
  ffi.Pointer<GlyphInfo> chars,
  ffi.Int32 glyphCount,
);

typedef _dart_UnloadFontData = void Function(
  ffi.Pointer<GlyphInfo> chars,
  int glyphCount,
);

typedef _c_UnloadFont = ffi.Void Function(
  Font font,
);

typedef _dart_UnloadFont = void Function(
  Font font,
);

typedef _c_DrawFPS = ffi.Void Function(
  ffi.Int32 posX,
  ffi.Int32 posY,
);

typedef _dart_DrawFPS = void Function(
  int posX,
  int posY,
);

typedef _c_DrawText = ffi.Void Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Int32 posX,
  ffi.Int32 posY,
  ffi.Int32 fontSize,
  Color color,
);

typedef _dart_DrawText = void Function(
  ffi.Pointer<ffi.Int8> text,
  int posX,
  int posY,
  int fontSize,
  Color color,
);

typedef _c_DrawTextEx = ffi.Void Function(
  Font font,
  ffi.Pointer<ffi.Int8> text,
  Vector2 position,
  ffi.Float fontSize,
  ffi.Float spacing,
  Color tint,
);

typedef _dart_DrawTextEx = void Function(
  Font font,
  ffi.Pointer<ffi.Int8> text,
  Vector2 position,
  double fontSize,
  double spacing,
  Color tint,
);

typedef _c_DrawTextPro = ffi.Void Function(
  Font font,
  ffi.Pointer<ffi.Int8> text,
  Vector2 position,
  Vector2 origin,
  ffi.Float rotation,
  ffi.Float fontSize,
  ffi.Float spacing,
  Color tint,
);

typedef _dart_DrawTextPro = void Function(
  Font font,
  ffi.Pointer<ffi.Int8> text,
  Vector2 position,
  Vector2 origin,
  double rotation,
  double fontSize,
  double spacing,
  Color tint,
);

typedef _c_DrawTextCodepoint = ffi.Void Function(
  Font font,
  ffi.Int32 codepoint,
  Vector2 position,
  ffi.Float fontSize,
  Color tint,
);

typedef _dart_DrawTextCodepoint = void Function(
  Font font,
  int codepoint,
  Vector2 position,
  double fontSize,
  Color tint,
);

typedef _c_MeasureText = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Int32 fontSize,
);

typedef _dart_MeasureText = int Function(
  ffi.Pointer<ffi.Int8> text,
  int fontSize,
);

typedef _c_MeasureTextEx = Vector2 Function(
  Font font,
  ffi.Pointer<ffi.Int8> text,
  ffi.Float fontSize,
  ffi.Float spacing,
);

typedef _dart_MeasureTextEx = Vector2 Function(
  Font font,
  ffi.Pointer<ffi.Int8> text,
  double fontSize,
  double spacing,
);

typedef _c_GetGlyphIndex = ffi.Int32 Function(
  Font font,
  ffi.Int32 codepoint,
);

typedef _dart_GetGlyphIndex = int Function(
  Font font,
  int codepoint,
);

typedef _c_GetGlyphInfo = GlyphInfo Function(
  Font font,
  ffi.Int32 codepoint,
);

typedef _dart_GetGlyphInfo = GlyphInfo Function(
  Font font,
  int codepoint,
);

typedef _c_GetGlyphAtlasRec = Rectangle Function(
  Font font,
  ffi.Int32 codepoint,
);

typedef _dart_GetGlyphAtlasRec = Rectangle Function(
  Font font,
  int codepoint,
);

typedef _c_LoadCodepoints = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Int32> count,
);

typedef _dart_LoadCodepoints = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Int32> count,
);

typedef _c_UnloadCodepoints = ffi.Void Function(
  ffi.Pointer<ffi.Int32> codepoints,
);

typedef _dart_UnloadCodepoints = void Function(
  ffi.Pointer<ffi.Int32> codepoints,
);

typedef _c_GetCodepointCount = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _dart_GetCodepointCount = int Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _c_GetCodepoint = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Int32> bytesProcessed,
);

typedef _dart_GetCodepoint = int Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Int32> bytesProcessed,
);

typedef _c_CodepointToUTF8 = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 codepoint,
  ffi.Pointer<ffi.Int32> byteSize,
);

typedef _dart_CodepointToUTF8 = ffi.Pointer<ffi.Int8> Function(
  int codepoint,
  ffi.Pointer<ffi.Int32> byteSize,
);

typedef _c_TextCodepointsToUTF8 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> codepoints,
  ffi.Int32 length,
);

typedef _dart_TextCodepointsToUTF8 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> codepoints,
  int length,
);

typedef _c_TextCopy = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> dst,
  ffi.Pointer<ffi.Int8> src,
);

typedef _dart_TextCopy = int Function(
  ffi.Pointer<ffi.Int8> dst,
  ffi.Pointer<ffi.Int8> src,
);

typedef _c_TextIsEqual = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> text1,
  ffi.Pointer<ffi.Int8> text2,
);

typedef _dart_TextIsEqual = int Function(
  ffi.Pointer<ffi.Int8> text1,
  ffi.Pointer<ffi.Int8> text2,
);

typedef _c_TextLength = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _dart_TextLength = int Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _c_TextFormat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _dart_TextFormat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _c_TextSubtext = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Int32 position,
  ffi.Int32 length,
);

typedef _dart_TextSubtext = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> text,
  int position,
  int length,
);

typedef _c_TextReplace = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Int8> replace,
  ffi.Pointer<ffi.Int8> by,
);

typedef _dart_TextReplace = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Int8> replace,
  ffi.Pointer<ffi.Int8> by,
);

typedef _c_TextInsert = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Int8> insert,
  ffi.Int32 position,
);

typedef _dart_TextInsert = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Int8> insert,
  int position,
);

typedef _c_TextJoin = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> textList,
  ffi.Int32 count,
  ffi.Pointer<ffi.Int8> delimiter,
);

typedef _dart_TextJoin = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> textList,
  int count,
  ffi.Pointer<ffi.Int8> delimiter,
);

typedef _c_TextSplit = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Int8 delimiter,
  ffi.Pointer<ffi.Int32> count,
);

typedef _dart_TextSplit = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<ffi.Int8> text,
  int delimiter,
  ffi.Pointer<ffi.Int32> count,
);

typedef _c_TextAppend = ffi.Void Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Int8> append,
  ffi.Pointer<ffi.Int32> position,
);

typedef _dart_TextAppend = void Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Int8> append,
  ffi.Pointer<ffi.Int32> position,
);

typedef _c_TextFindIndex = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Int8> find,
);

typedef _dart_TextFindIndex = int Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Int8> find,
);

typedef _c_TextToUpper = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _dart_TextToUpper = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _c_TextToLower = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _dart_TextToLower = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _c_TextToPascal = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _dart_TextToPascal = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _c_TextToInteger = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _dart_TextToInteger = int Function(
  ffi.Pointer<ffi.Int8> text,
);

typedef _c_DrawLine3D = ffi.Void Function(
  Vector3 startPos,
  Vector3 endPos,
  Color color,
);

typedef _dart_DrawLine3D = void Function(
  Vector3 startPos,
  Vector3 endPos,
  Color color,
);

typedef _c_DrawPoint3D = ffi.Void Function(
  Vector3 position,
  Color color,
);

typedef _dart_DrawPoint3D = void Function(
  Vector3 position,
  Color color,
);

typedef _c_DrawCircle3D = ffi.Void Function(
  Vector3 center,
  ffi.Float radius,
  Vector3 rotationAxis,
  ffi.Float rotationAngle,
  Color color,
);

typedef _dart_DrawCircle3D = void Function(
  Vector3 center,
  double radius,
  Vector3 rotationAxis,
  double rotationAngle,
  Color color,
);

typedef _c_DrawTriangle3D = ffi.Void Function(
  Vector3 v1,
  Vector3 v2,
  Vector3 v3,
  Color color,
);

typedef _dart_DrawTriangle3D = void Function(
  Vector3 v1,
  Vector3 v2,
  Vector3 v3,
  Color color,
);

typedef _c_DrawTriangleStrip3D = ffi.Void Function(
  ffi.Pointer<Vector3> points,
  ffi.Int32 pointCount,
  Color color,
);

typedef _dart_DrawTriangleStrip3D = void Function(
  ffi.Pointer<Vector3> points,
  int pointCount,
  Color color,
);

typedef _c_DrawCube = ffi.Void Function(
  Vector3 position,
  ffi.Float width,
  ffi.Float height,
  ffi.Float length,
  Color color,
);

typedef _dart_DrawCube = void Function(
  Vector3 position,
  double width,
  double height,
  double length,
  Color color,
);

typedef _c_DrawCubeV = ffi.Void Function(
  Vector3 position,
  Vector3 size,
  Color color,
);

typedef _dart_DrawCubeV = void Function(
  Vector3 position,
  Vector3 size,
  Color color,
);

typedef _c_DrawCubeWires = ffi.Void Function(
  Vector3 position,
  ffi.Float width,
  ffi.Float height,
  ffi.Float length,
  Color color,
);

typedef _dart_DrawCubeWires = void Function(
  Vector3 position,
  double width,
  double height,
  double length,
  Color color,
);

typedef _c_DrawCubeWiresV = ffi.Void Function(
  Vector3 position,
  Vector3 size,
  Color color,
);

typedef _dart_DrawCubeWiresV = void Function(
  Vector3 position,
  Vector3 size,
  Color color,
);

typedef _c_DrawCubeTexture = ffi.Void Function(
  Texture texture,
  Vector3 position,
  ffi.Float width,
  ffi.Float height,
  ffi.Float length,
  Color color,
);

typedef _dart_DrawCubeTexture = void Function(
  Texture texture,
  Vector3 position,
  double width,
  double height,
  double length,
  Color color,
);

typedef _c_DrawCubeTextureRec = ffi.Void Function(
  Texture texture,
  Rectangle source,
  Vector3 position,
  ffi.Float width,
  ffi.Float height,
  ffi.Float length,
  Color color,
);

typedef _dart_DrawCubeTextureRec = void Function(
  Texture texture,
  Rectangle source,
  Vector3 position,
  double width,
  double height,
  double length,
  Color color,
);

typedef _c_DrawSphere = ffi.Void Function(
  Vector3 centerPos,
  ffi.Float radius,
  Color color,
);

typedef _dart_DrawSphere = void Function(
  Vector3 centerPos,
  double radius,
  Color color,
);

typedef _c_DrawSphereEx = ffi.Void Function(
  Vector3 centerPos,
  ffi.Float radius,
  ffi.Int32 rings,
  ffi.Int32 slices,
  Color color,
);

typedef _dart_DrawSphereEx = void Function(
  Vector3 centerPos,
  double radius,
  int rings,
  int slices,
  Color color,
);

typedef _c_DrawSphereWires = ffi.Void Function(
  Vector3 centerPos,
  ffi.Float radius,
  ffi.Int32 rings,
  ffi.Int32 slices,
  Color color,
);

typedef _dart_DrawSphereWires = void Function(
  Vector3 centerPos,
  double radius,
  int rings,
  int slices,
  Color color,
);

typedef _c_DrawCylinder = ffi.Void Function(
  Vector3 position,
  ffi.Float radiusTop,
  ffi.Float radiusBottom,
  ffi.Float height,
  ffi.Int32 slices,
  Color color,
);

typedef _dart_DrawCylinder = void Function(
  Vector3 position,
  double radiusTop,
  double radiusBottom,
  double height,
  int slices,
  Color color,
);

typedef _c_DrawCylinderEx = ffi.Void Function(
  Vector3 startPos,
  Vector3 endPos,
  ffi.Float startRadius,
  ffi.Float endRadius,
  ffi.Int32 sides,
  Color color,
);

typedef _dart_DrawCylinderEx = void Function(
  Vector3 startPos,
  Vector3 endPos,
  double startRadius,
  double endRadius,
  int sides,
  Color color,
);

typedef _c_DrawCylinderWires = ffi.Void Function(
  Vector3 position,
  ffi.Float radiusTop,
  ffi.Float radiusBottom,
  ffi.Float height,
  ffi.Int32 slices,
  Color color,
);

typedef _dart_DrawCylinderWires = void Function(
  Vector3 position,
  double radiusTop,
  double radiusBottom,
  double height,
  int slices,
  Color color,
);

typedef _c_DrawCylinderWiresEx = ffi.Void Function(
  Vector3 startPos,
  Vector3 endPos,
  ffi.Float startRadius,
  ffi.Float endRadius,
  ffi.Int32 sides,
  Color color,
);

typedef _dart_DrawCylinderWiresEx = void Function(
  Vector3 startPos,
  Vector3 endPos,
  double startRadius,
  double endRadius,
  int sides,
  Color color,
);

typedef _c_DrawPlane = ffi.Void Function(
  Vector3 centerPos,
  Vector2 size,
  Color color,
);

typedef _dart_DrawPlane = void Function(
  Vector3 centerPos,
  Vector2 size,
  Color color,
);

typedef _c_DrawRay = ffi.Void Function(
  Ray ray,
  Color color,
);

typedef _dart_DrawRay = void Function(
  Ray ray,
  Color color,
);

typedef _c_DrawGrid = ffi.Void Function(
  ffi.Int32 slices,
  ffi.Float spacing,
);

typedef _dart_DrawGrid = void Function(
  int slices,
  double spacing,
);

typedef _c_LoadModel = Model Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _dart_LoadModel = Model Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _c_LoadModelFromMesh = Model Function(
  Mesh mesh,
);

typedef _dart_LoadModelFromMesh = Model Function(
  Mesh mesh,
);

typedef _c_UnloadModel = ffi.Void Function(
  Model model,
);

typedef _dart_UnloadModel = void Function(
  Model model,
);

typedef _c_UnloadModelKeepMeshes = ffi.Void Function(
  Model model,
);

typedef _dart_UnloadModelKeepMeshes = void Function(
  Model model,
);

typedef _c_GetModelBoundingBox = BoundingBox Function(
  Model model,
);

typedef _dart_GetModelBoundingBox = BoundingBox Function(
  Model model,
);

typedef _c_DrawModel = ffi.Void Function(
  Model model,
  Vector3 position,
  ffi.Float scale,
  Color tint,
);

typedef _dart_DrawModel = void Function(
  Model model,
  Vector3 position,
  double scale,
  Color tint,
);

typedef _c_DrawModelEx = ffi.Void Function(
  Model model,
  Vector3 position,
  Vector3 rotationAxis,
  ffi.Float rotationAngle,
  Vector3 scale,
  Color tint,
);

typedef _dart_DrawModelEx = void Function(
  Model model,
  Vector3 position,
  Vector3 rotationAxis,
  double rotationAngle,
  Vector3 scale,
  Color tint,
);

typedef _c_DrawModelWires = ffi.Void Function(
  Model model,
  Vector3 position,
  ffi.Float scale,
  Color tint,
);

typedef _dart_DrawModelWires = void Function(
  Model model,
  Vector3 position,
  double scale,
  Color tint,
);

typedef _c_DrawModelWiresEx = ffi.Void Function(
  Model model,
  Vector3 position,
  Vector3 rotationAxis,
  ffi.Float rotationAngle,
  Vector3 scale,
  Color tint,
);

typedef _dart_DrawModelWiresEx = void Function(
  Model model,
  Vector3 position,
  Vector3 rotationAxis,
  double rotationAngle,
  Vector3 scale,
  Color tint,
);

typedef _c_DrawBoundingBox = ffi.Void Function(
  BoundingBox box,
  Color color,
);

typedef _dart_DrawBoundingBox = void Function(
  BoundingBox box,
  Color color,
);

typedef _c_DrawBillboard = ffi.Void Function(
  Camera3D camera,
  Texture texture,
  Vector3 position,
  ffi.Float size,
  Color tint,
);

typedef _dart_DrawBillboard = void Function(
  Camera3D camera,
  Texture texture,
  Vector3 position,
  double size,
  Color tint,
);

typedef _c_DrawBillboardRec = ffi.Void Function(
  Camera3D camera,
  Texture texture,
  Rectangle source,
  Vector3 position,
  Vector2 size,
  Color tint,
);

typedef _dart_DrawBillboardRec = void Function(
  Camera3D camera,
  Texture texture,
  Rectangle source,
  Vector3 position,
  Vector2 size,
  Color tint,
);

typedef _c_DrawBillboardPro = ffi.Void Function(
  Camera3D camera,
  Texture texture,
  Rectangle source,
  Vector3 position,
  Vector3 up,
  Vector2 size,
  Vector2 origin,
  ffi.Float rotation,
  Color tint,
);

typedef _dart_DrawBillboardPro = void Function(
  Camera3D camera,
  Texture texture,
  Rectangle source,
  Vector3 position,
  Vector3 up,
  Vector2 size,
  Vector2 origin,
  double rotation,
  Color tint,
);

typedef _c_UploadMesh = ffi.Void Function(
  ffi.Pointer<Mesh> mesh,
  ffi.Int32 dynamic_1,
);

typedef _dart_UploadMesh = void Function(
  ffi.Pointer<Mesh> mesh,
  int dynamic_1,
);

typedef _c_UpdateMeshBuffer = ffi.Void Function(
  Mesh mesh,
  ffi.Int32 index,
  ffi.Pointer<ffi.Void> data,
  ffi.Int32 dataSize,
  ffi.Int32 offset,
);

typedef _dart_UpdateMeshBuffer = void Function(
  Mesh mesh,
  int index,
  ffi.Pointer<ffi.Void> data,
  int dataSize,
  int offset,
);

typedef _c_UnloadMesh = ffi.Void Function(
  Mesh mesh,
);

typedef _dart_UnloadMesh = void Function(
  Mesh mesh,
);

typedef _c_DrawMesh = ffi.Void Function(
  Mesh mesh,
  Material material,
  Matrix transform,
);

typedef _dart_DrawMesh = void Function(
  Mesh mesh,
  Material material,
  Matrix transform,
);

typedef _c_DrawMeshInstanced = ffi.Void Function(
  Mesh mesh,
  Material material,
  ffi.Pointer<Matrix> transforms,
  ffi.Int32 instances,
);

typedef _dart_DrawMeshInstanced = void Function(
  Mesh mesh,
  Material material,
  ffi.Pointer<Matrix> transforms,
  int instances,
);

typedef _c_ExportMesh = ffi.Int32 Function(
  Mesh mesh,
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _dart_ExportMesh = int Function(
  Mesh mesh,
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _c_GetMeshBoundingBox = BoundingBox Function(
  Mesh mesh,
);

typedef _dart_GetMeshBoundingBox = BoundingBox Function(
  Mesh mesh,
);

typedef _c_GenMeshTangents = ffi.Void Function(
  ffi.Pointer<Mesh> mesh,
);

typedef _dart_GenMeshTangents = void Function(
  ffi.Pointer<Mesh> mesh,
);

typedef _c_GenMeshBinormals = ffi.Void Function(
  ffi.Pointer<Mesh> mesh,
);

typedef _dart_GenMeshBinormals = void Function(
  ffi.Pointer<Mesh> mesh,
);

typedef _c_GenMeshPoly = Mesh Function(
  ffi.Int32 sides,
  ffi.Float radius,
);

typedef _dart_GenMeshPoly = Mesh Function(
  int sides,
  double radius,
);

typedef _c_GenMeshPlane = Mesh Function(
  ffi.Float width,
  ffi.Float length,
  ffi.Int32 resX,
  ffi.Int32 resZ,
);

typedef _dart_GenMeshPlane = Mesh Function(
  double width,
  double length,
  int resX,
  int resZ,
);

typedef _c_GenMeshCube = Mesh Function(
  ffi.Float width,
  ffi.Float height,
  ffi.Float length,
);

typedef _dart_GenMeshCube = Mesh Function(
  double width,
  double height,
  double length,
);

typedef _c_GenMeshSphere = Mesh Function(
  ffi.Float radius,
  ffi.Int32 rings,
  ffi.Int32 slices,
);

typedef _dart_GenMeshSphere = Mesh Function(
  double radius,
  int rings,
  int slices,
);

typedef _c_GenMeshHemiSphere = Mesh Function(
  ffi.Float radius,
  ffi.Int32 rings,
  ffi.Int32 slices,
);

typedef _dart_GenMeshHemiSphere = Mesh Function(
  double radius,
  int rings,
  int slices,
);

typedef _c_GenMeshCylinder = Mesh Function(
  ffi.Float radius,
  ffi.Float height,
  ffi.Int32 slices,
);

typedef _dart_GenMeshCylinder = Mesh Function(
  double radius,
  double height,
  int slices,
);

typedef _c_GenMeshCone = Mesh Function(
  ffi.Float radius,
  ffi.Float height,
  ffi.Int32 slices,
);

typedef _dart_GenMeshCone = Mesh Function(
  double radius,
  double height,
  int slices,
);

typedef _c_GenMeshTorus = Mesh Function(
  ffi.Float radius,
  ffi.Float size,
  ffi.Int32 radSeg,
  ffi.Int32 sides,
);

typedef _dart_GenMeshTorus = Mesh Function(
  double radius,
  double size,
  int radSeg,
  int sides,
);

typedef _c_GenMeshKnot = Mesh Function(
  ffi.Float radius,
  ffi.Float size,
  ffi.Int32 radSeg,
  ffi.Int32 sides,
);

typedef _dart_GenMeshKnot = Mesh Function(
  double radius,
  double size,
  int radSeg,
  int sides,
);

typedef _c_GenMeshHeightmap = Mesh Function(
  Image heightmap,
  Vector3 size,
);

typedef _dart_GenMeshHeightmap = Mesh Function(
  Image heightmap,
  Vector3 size,
);

typedef _c_GenMeshCubicmap = Mesh Function(
  Image cubicmap,
  Vector3 cubeSize,
);

typedef _dart_GenMeshCubicmap = Mesh Function(
  Image cubicmap,
  Vector3 cubeSize,
);

typedef _c_LoadMaterials = ffi.Pointer<Material> Function(
  ffi.Pointer<ffi.Int8> fileName,
  ffi.Pointer<ffi.Int32> materialCount,
);

typedef _dart_LoadMaterials = ffi.Pointer<Material> Function(
  ffi.Pointer<ffi.Int8> fileName,
  ffi.Pointer<ffi.Int32> materialCount,
);

typedef _c_LoadMaterialDefault = Material Function();

typedef _dart_LoadMaterialDefault = Material Function();

typedef _c_UnloadMaterial = ffi.Void Function(
  Material material,
);

typedef _dart_UnloadMaterial = void Function(
  Material material,
);

typedef _c_SetMaterialTexture = ffi.Void Function(
  ffi.Pointer<Material> material,
  ffi.Int32 mapType,
  Texture texture,
);

typedef _dart_SetMaterialTexture = void Function(
  ffi.Pointer<Material> material,
  int mapType,
  Texture texture,
);

typedef _c_SetModelMeshMaterial = ffi.Void Function(
  ffi.Pointer<Model> model,
  ffi.Int32 meshId,
  ffi.Int32 materialId,
);

typedef _dart_SetModelMeshMaterial = void Function(
  ffi.Pointer<Model> model,
  int meshId,
  int materialId,
);

typedef _c_LoadModelAnimations = ffi.Pointer<ModelAnimation> Function(
  ffi.Pointer<ffi.Int8> fileName,
  ffi.Pointer<ffi.Uint32> animCount,
);

typedef _dart_LoadModelAnimations = ffi.Pointer<ModelAnimation> Function(
  ffi.Pointer<ffi.Int8> fileName,
  ffi.Pointer<ffi.Uint32> animCount,
);

typedef _c_UpdateModelAnimation = ffi.Void Function(
  Model model,
  ModelAnimation anim,
  ffi.Int32 frame,
);

typedef _dart_UpdateModelAnimation = void Function(
  Model model,
  ModelAnimation anim,
  int frame,
);

typedef _c_UnloadModelAnimation = ffi.Void Function(
  ModelAnimation anim,
);

typedef _dart_UnloadModelAnimation = void Function(
  ModelAnimation anim,
);

typedef _c_UnloadModelAnimations = ffi.Void Function(
  ffi.Pointer<ModelAnimation> animations,
  ffi.Uint32 count,
);

typedef _dart_UnloadModelAnimations = void Function(
  ffi.Pointer<ModelAnimation> animations,
  int count,
);

typedef _c_IsModelAnimationValid = ffi.Int32 Function(
  Model model,
  ModelAnimation anim,
);

typedef _dart_IsModelAnimationValid = int Function(
  Model model,
  ModelAnimation anim,
);

typedef _c_CheckCollisionSpheres = ffi.Int32 Function(
  Vector3 center1,
  ffi.Float radius1,
  Vector3 center2,
  ffi.Float radius2,
);

typedef _dart_CheckCollisionSpheres = int Function(
  Vector3 center1,
  double radius1,
  Vector3 center2,
  double radius2,
);

typedef _c_CheckCollisionBoxes = ffi.Int32 Function(
  BoundingBox box1,
  BoundingBox box2,
);

typedef _dart_CheckCollisionBoxes = int Function(
  BoundingBox box1,
  BoundingBox box2,
);

typedef _c_CheckCollisionBoxSphere = ffi.Int32 Function(
  BoundingBox box,
  Vector3 center,
  ffi.Float radius,
);

typedef _dart_CheckCollisionBoxSphere = int Function(
  BoundingBox box,
  Vector3 center,
  double radius,
);

typedef _c_GetRayCollisionSphere = RayCollision Function(
  Ray ray,
  Vector3 center,
  ffi.Float radius,
);

typedef _dart_GetRayCollisionSphere = RayCollision Function(
  Ray ray,
  Vector3 center,
  double radius,
);

typedef _c_GetRayCollisionBox = RayCollision Function(
  Ray ray,
  BoundingBox box,
);

typedef _dart_GetRayCollisionBox = RayCollision Function(
  Ray ray,
  BoundingBox box,
);

typedef _c_GetRayCollisionModel = RayCollision Function(
  Ray ray,
  Model model,
);

typedef _dart_GetRayCollisionModel = RayCollision Function(
  Ray ray,
  Model model,
);

typedef _c_GetRayCollisionMesh = RayCollision Function(
  Ray ray,
  Mesh mesh,
  Matrix transform,
);

typedef _dart_GetRayCollisionMesh = RayCollision Function(
  Ray ray,
  Mesh mesh,
  Matrix transform,
);

typedef _c_GetRayCollisionTriangle = RayCollision Function(
  Ray ray,
  Vector3 p1,
  Vector3 p2,
  Vector3 p3,
);

typedef _dart_GetRayCollisionTriangle = RayCollision Function(
  Ray ray,
  Vector3 p1,
  Vector3 p2,
  Vector3 p3,
);

typedef _c_GetRayCollisionQuad = RayCollision Function(
  Ray ray,
  Vector3 p1,
  Vector3 p2,
  Vector3 p3,
  Vector3 p4,
);

typedef _dart_GetRayCollisionQuad = RayCollision Function(
  Ray ray,
  Vector3 p1,
  Vector3 p2,
  Vector3 p3,
  Vector3 p4,
);

typedef _c_InitAudioDevice = ffi.Void Function();

typedef _dart_InitAudioDevice = void Function();

typedef _c_CloseAudioDevice = ffi.Void Function();

typedef _dart_CloseAudioDevice = void Function();

typedef _c_IsAudioDeviceReady = ffi.Int32 Function();

typedef _dart_IsAudioDeviceReady = int Function();

typedef _c_SetMasterVolume = ffi.Void Function(
  ffi.Float volume,
);

typedef _dart_SetMasterVolume = void Function(
  double volume,
);

typedef _c_LoadWave = Wave Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _dart_LoadWave = Wave Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _c_LoadWaveFromMemory = Wave Function(
  ffi.Pointer<ffi.Int8> fileType,
  ffi.Pointer<ffi.Uint8> fileData,
  ffi.Int32 dataSize,
);

typedef _dart_LoadWaveFromMemory = Wave Function(
  ffi.Pointer<ffi.Int8> fileType,
  ffi.Pointer<ffi.Uint8> fileData,
  int dataSize,
);

typedef _c_LoadSound = Sound Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _dart_LoadSound = Sound Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _c_LoadSoundFromWave = Sound Function(
  Wave wave,
);

typedef _dart_LoadSoundFromWave = Sound Function(
  Wave wave,
);

typedef _c_UpdateSound = ffi.Void Function(
  Sound sound,
  ffi.Pointer<ffi.Void> data,
  ffi.Int32 sampleCount,
);

typedef _dart_UpdateSound = void Function(
  Sound sound,
  ffi.Pointer<ffi.Void> data,
  int sampleCount,
);

typedef _c_UnloadWave = ffi.Void Function(
  Wave wave,
);

typedef _dart_UnloadWave = void Function(
  Wave wave,
);

typedef _c_UnloadSound = ffi.Void Function(
  Sound sound,
);

typedef _dart_UnloadSound = void Function(
  Sound sound,
);

typedef _c_ExportWave = ffi.Int32 Function(
  Wave wave,
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _dart_ExportWave = int Function(
  Wave wave,
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _c_ExportWaveAsCode = ffi.Int32 Function(
  Wave wave,
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _dart_ExportWaveAsCode = int Function(
  Wave wave,
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _c_PlaySound = ffi.Void Function(
  Sound sound,
);

typedef _dart_PlaySound = void Function(
  Sound sound,
);

typedef _c_StopSound = ffi.Void Function(
  Sound sound,
);

typedef _dart_StopSound = void Function(
  Sound sound,
);

typedef _c_PauseSound = ffi.Void Function(
  Sound sound,
);

typedef _dart_PauseSound = void Function(
  Sound sound,
);

typedef _c_ResumeSound = ffi.Void Function(
  Sound sound,
);

typedef _dart_ResumeSound = void Function(
  Sound sound,
);

typedef _c_PlaySoundMulti = ffi.Void Function(
  Sound sound,
);

typedef _dart_PlaySoundMulti = void Function(
  Sound sound,
);

typedef _c_StopSoundMulti = ffi.Void Function();

typedef _dart_StopSoundMulti = void Function();

typedef _c_GetSoundsPlaying = ffi.Int32 Function();

typedef _dart_GetSoundsPlaying = int Function();

typedef _c_IsSoundPlaying = ffi.Int32 Function(
  Sound sound,
);

typedef _dart_IsSoundPlaying = int Function(
  Sound sound,
);

typedef _c_SetSoundVolume = ffi.Void Function(
  Sound sound,
  ffi.Float volume,
);

typedef _dart_SetSoundVolume = void Function(
  Sound sound,
  double volume,
);

typedef _c_SetSoundPitch = ffi.Void Function(
  Sound sound,
  ffi.Float pitch,
);

typedef _dart_SetSoundPitch = void Function(
  Sound sound,
  double pitch,
);

typedef _c_WaveFormat = ffi.Void Function(
  ffi.Pointer<Wave> wave,
  ffi.Int32 sampleRate,
  ffi.Int32 sampleSize,
  ffi.Int32 channels,
);

typedef _dart_WaveFormat = void Function(
  ffi.Pointer<Wave> wave,
  int sampleRate,
  int sampleSize,
  int channels,
);

typedef _c_WaveCopy = Wave Function(
  Wave wave,
);

typedef _dart_WaveCopy = Wave Function(
  Wave wave,
);

typedef _c_WaveCrop = ffi.Void Function(
  ffi.Pointer<Wave> wave,
  ffi.Int32 initSample,
  ffi.Int32 finalSample,
);

typedef _dart_WaveCrop = void Function(
  ffi.Pointer<Wave> wave,
  int initSample,
  int finalSample,
);

typedef _c_LoadWaveSamples = ffi.Pointer<ffi.Float> Function(
  Wave wave,
);

typedef _dart_LoadWaveSamples = ffi.Pointer<ffi.Float> Function(
  Wave wave,
);

typedef _c_UnloadWaveSamples = ffi.Void Function(
  ffi.Pointer<ffi.Float> samples,
);

typedef _dart_UnloadWaveSamples = void Function(
  ffi.Pointer<ffi.Float> samples,
);

typedef _c_LoadMusicStream = Music Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _dart_LoadMusicStream = Music Function(
  ffi.Pointer<ffi.Int8> fileName,
);

typedef _c_LoadMusicStreamFromMemory = Music Function(
  ffi.Pointer<ffi.Int8> fileType,
  ffi.Pointer<ffi.Uint8> data,
  ffi.Int32 dataSize,
);

typedef _dart_LoadMusicStreamFromMemory = Music Function(
  ffi.Pointer<ffi.Int8> fileType,
  ffi.Pointer<ffi.Uint8> data,
  int dataSize,
);

typedef _c_UnloadMusicStream = ffi.Void Function(
  Music music,
);

typedef _dart_UnloadMusicStream = void Function(
  Music music,
);

typedef _c_PlayMusicStream = ffi.Void Function(
  Music music,
);

typedef _dart_PlayMusicStream = void Function(
  Music music,
);

typedef _c_IsMusicStreamPlaying = ffi.Int32 Function(
  Music music,
);

typedef _dart_IsMusicStreamPlaying = int Function(
  Music music,
);

typedef _c_UpdateMusicStream = ffi.Void Function(
  Music music,
);

typedef _dart_UpdateMusicStream = void Function(
  Music music,
);

typedef _c_StopMusicStream = ffi.Void Function(
  Music music,
);

typedef _dart_StopMusicStream = void Function(
  Music music,
);

typedef _c_PauseMusicStream = ffi.Void Function(
  Music music,
);

typedef _dart_PauseMusicStream = void Function(
  Music music,
);

typedef _c_ResumeMusicStream = ffi.Void Function(
  Music music,
);

typedef _dart_ResumeMusicStream = void Function(
  Music music,
);

typedef _c_SeekMusicStream = ffi.Void Function(
  Music music,
  ffi.Float position,
);

typedef _dart_SeekMusicStream = void Function(
  Music music,
  double position,
);

typedef _c_SetMusicVolume = ffi.Void Function(
  Music music,
  ffi.Float volume,
);

typedef _dart_SetMusicVolume = void Function(
  Music music,
  double volume,
);

typedef _c_SetMusicPitch = ffi.Void Function(
  Music music,
  ffi.Float pitch,
);

typedef _dart_SetMusicPitch = void Function(
  Music music,
  double pitch,
);

typedef _c_GetMusicTimeLength = ffi.Float Function(
  Music music,
);

typedef _dart_GetMusicTimeLength = double Function(
  Music music,
);

typedef _c_GetMusicTimePlayed = ffi.Float Function(
  Music music,
);

typedef _dart_GetMusicTimePlayed = double Function(
  Music music,
);

typedef _c_LoadAudioStream = AudioStream Function(
  ffi.Uint32 sampleRate,
  ffi.Uint32 sampleSize,
  ffi.Uint32 channels,
);

typedef _dart_LoadAudioStream = AudioStream Function(
  int sampleRate,
  int sampleSize,
  int channels,
);

typedef _c_UnloadAudioStream = ffi.Void Function(
  AudioStream stream,
);

typedef _dart_UnloadAudioStream = void Function(
  AudioStream stream,
);

typedef _c_UpdateAudioStream = ffi.Void Function(
  AudioStream stream,
  ffi.Pointer<ffi.Void> data,
  ffi.Int32 frameCount,
);

typedef _dart_UpdateAudioStream = void Function(
  AudioStream stream,
  ffi.Pointer<ffi.Void> data,
  int frameCount,
);

typedef _c_IsAudioStreamProcessed = ffi.Int32 Function(
  AudioStream stream,
);

typedef _dart_IsAudioStreamProcessed = int Function(
  AudioStream stream,
);

typedef _c_PlayAudioStream = ffi.Void Function(
  AudioStream stream,
);

typedef _dart_PlayAudioStream = void Function(
  AudioStream stream,
);

typedef _c_PauseAudioStream = ffi.Void Function(
  AudioStream stream,
);

typedef _dart_PauseAudioStream = void Function(
  AudioStream stream,
);

typedef _c_ResumeAudioStream = ffi.Void Function(
  AudioStream stream,
);

typedef _dart_ResumeAudioStream = void Function(
  AudioStream stream,
);

typedef _c_IsAudioStreamPlaying = ffi.Int32 Function(
  AudioStream stream,
);

typedef _dart_IsAudioStreamPlaying = int Function(
  AudioStream stream,
);

typedef _c_StopAudioStream = ffi.Void Function(
  AudioStream stream,
);

typedef _dart_StopAudioStream = void Function(
  AudioStream stream,
);

typedef _c_SetAudioStreamVolume = ffi.Void Function(
  AudioStream stream,
  ffi.Float volume,
);

typedef _dart_SetAudioStreamVolume = void Function(
  AudioStream stream,
  double volume,
);

typedef _c_SetAudioStreamPitch = ffi.Void Function(
  AudioStream stream,
  ffi.Float pitch,
);

typedef _dart_SetAudioStreamPitch = void Function(
  AudioStream stream,
  double pitch,
);

typedef _c_SetAudioStreamBufferSizeDefault = ffi.Void Function(
  ffi.Int32 size,
);

typedef _dart_SetAudioStreamBufferSizeDefault = void Function(
  int size,
);

typedef _c_CreateVector2 = Vector2 Function(
  ffi.Float x,
  ffi.Float y,
);

typedef _dart_CreateVector2 = Vector2 Function(
  double x,
  double y,
);

typedef _c_CreateColor = Color Function(
  ffi.Uint8 r,
  ffi.Uint8 g,
  ffi.Uint8 b,
  ffi.Uint8 a,
);

typedef _dart_CreateColor = Color Function(
  int r,
  int g,
  int b,
  int a,
);

typedef _c_CreateImage = Image Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 mipmaps,
  ffi.Int32 format,
);

typedef _dart_CreateImage = Image Function(
  ffi.Pointer<ffi.Void> data,
  int width,
  int height,
  int mipmaps,
  int format,
);

typedef _c_CreateCamera2D = Camera2D Function(
  Vector2 offset,
  Vector2 target,
  ffi.Double rotation,
  ffi.Double zoom,
);

typedef _dart_CreateCamera2D = Camera2D Function(
  Vector2 offset,
  Vector2 target,
  double rotation,
  double zoom,
);
